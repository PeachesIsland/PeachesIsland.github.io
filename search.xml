<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>redis 使用场景</title>
    <url>/2022/10/03/redis/redis-shi-yong-chang-jing/</url>
    <content><![CDATA[<h2 id="1-string"><a href="#1-string" class="headerlink" title="1. string"></a>1. string</h2><h3 id="1-1-记录短信验证码到redis，并给失效时间"><a href="#1-1-记录短信验证码到redis，并给失效时间" class="headerlink" title="1.1. 记录短信验证码到redis，并给失效时间"></a>1.1. 记录短信验证码到redis，并给失效时间</h3><h3 id="1-2-记录用户-token，判断是否合法登录，"><a href="#1-2-记录用户-token，判断是否合法登录，" class="headerlink" title="1.2. 记录用户 token，判断是否合法登录，"></a>1.2. 记录用户 token，判断是否合法登录，</h3><h3 id="1-3-商品计数器"><a href="#1-3-商品计数器" class="headerlink" title="1.3. 商品计数器"></a>1.3. 商品计数器</h3><h2 id="2-hash"><a href="#2-hash" class="headerlink" title="2. hash"></a>2. hash</h2><h3 id="2-1-购物车-hset-hget"><a href="#2-1-购物车-hset-hget" class="headerlink" title="2.1. 购物车 hset hget"></a>2.1. 购物车 hset hget</h3>]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis 使用场景</title>
    <url>/2022/10/03/redis/redis-yu-shu-ju-ku-huan-cun-yi-zhi-xing-wen-ti/</url>
    <content><![CDATA[<h2 id="1-redis-与数据库缓存一致性问题"><a href="#1-redis-与数据库缓存一致性问题" class="headerlink" title="1. redis 与数据库缓存一致性问题"></a>1. redis 与数据库缓存一致性问题</h2><h3 id="1-1-延时双删"><a href="#1-1-延时双删" class="headerlink" title="1.1. 延时双删"></a>1.1. 延时双删</h3><h3 id="1-2-先写库，再删除缓存"><a href="#1-2-先写库，再删除缓存" class="headerlink" title="1.2. 先写库，再删除缓存"></a>1.2. 先写库，再删除缓存</h3><pre><code>引入MQ
    MQ mysql，失败可重试
    MQ 更新 redis
闹正原子操作
</code></pre>
<h3 id="1-3-热点数据永不过期，保证若一致性"><a href="#1-3-热点数据永不过期，保证若一致性" class="headerlink" title="1.3. 热点数据永不过期，保证若一致性"></a>1.3. 热点数据永不过期，保证若一致性</h3>]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>string</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 常用操作</title>
    <url>/2022/10/03/docker/docker-chang-yong-cao-zuo/</url>
    <content><![CDATA[<h3 id="1-docker-命令"><a href="#1-docker-命令" class="headerlink" title="1. docker 命令"></a>1. docker 命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start 容器名/id     <span class="comment">#开始运行容器</span></span><br><span class="line">docker stop 容器名/id      <span class="comment">#停止运行容器</span></span><br><span class="line">docker ps       <span class="comment">#列出正在运行的容器</span></span><br><span class="line">docker run      <span class="comment">#构建容器</span></span><br><span class="line">docker build    <span class="comment">#创建镜像</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>beego 常用操作</title>
    <url>/2022/10/03/golang/beego-chang-yong-cao-zuo/</url>
    <content><![CDATA[<h3 id="1-bee-命令"><a href="#1-bee-命令" class="headerlink" title="1. bee 命令"></a>1. bee 命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bee new xxx <span class="comment"># 创建一个新项目</span></span><br><span class="line">bee api xxx <span class="comment"># 创建一个api项目</span></span><br><span class="line">bee run <span class="comment"># 运行 beego 项目</span></span><br><span class="line">bee pack <span class="comment"># 上线时用来打包beego文件的，打包完成的文件在bin文件中</span></span><br></pre></td></tr></table></figure>

<h3 id="2-beego-过滤器"><a href="#2-beego-过滤器" class="headerlink" title="2. beego 过滤器"></a>2. beego 过滤器</h3><pre><code>安全验证，如IP屏蔽，token 验证，访问地址屏蔽
</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ne 不等于</span><br><span class="line">lt 小于</span><br><span class="line">gt 大于</span><br><span class="line">le 小于等于</span><br><span class="line">ge 大于等于</span><br></pre></td></tr></table></figure>

<h3 id="3-beego-通过orm-操作数据库"><a href="#3-beego-通过orm-操作数据库" class="headerlink" title="3. beego 通过orm 操作数据库"></a>3. beego 通过orm 操作数据库</h3><pre><code>在关系型数据库和对象之间做一个映射
在操作数据库时，不需要写复杂的sql语句，只需要操作对象即可对对应的数据进行操作
</code></pre>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>beego</tag>
      </tags>
  </entry>
  <entry>
    <title>go init 函数</title>
    <url>/2022/10/03/golang/go-init-han-shu/</url>
    <content><![CDATA[<h3 id="1-特点"><a href="#1-特点" class="headerlink" title="1. 特点"></a>1. 特点</h3><pre><code>先于main函数执行，实现包级别的一些初始化操作
每个包可以包含多个 init 函数
所有编译器发现的函数都会被安排在main函数之前执行
init 函数没有输入参数，返回值会且仅会导入一次
</code></pre>
<h3 id="2-主要作用"><a href="#2-主要作用" class="headerlink" title="2. 主要作用"></a>2. 主要作用</h3><pre><code>初始化不能采用初始化表达式初始化的变量
程序运行前的注册
实现 sync.Once 功能
</code></pre>
<h3 id="3-init-执行顺序"><a href="#3-init-执行顺序" class="headerlink" title="3. init 执行顺序"></a>3. init 执行顺序</h3><pre><code>单个包中init执行顺序 初始化变量 &gt; init 函数 &gt; main 函数
单个包中多个init 执行是顺序的
相互以来的包之间的init 函数，按照递归的顺序执行
</code></pre>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 待梳理问题</title>
    <url>/2022/10/03/mysql/mysql-dai-shu-li-wen-ti/</url>
    <content><![CDATA[<h2 id="1-Mysql-待梳理问题"><a href="#1-Mysql-待梳理问题" class="headerlink" title="1. Mysql 待梳理问题"></a>1. Mysql 待梳理问题</h2><h3 id="1-1-mysql-如何进行分库分表"><a href="#1-1-mysql-如何进行分库分表" class="headerlink" title="1.1. mysql 如何进行分库分表"></a>1.1. mysql 如何进行分库分表</h3>]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 待梳理问题</title>
    <url>/2022/10/03/redis/redis-dai-shu-li-wen-ti/</url>
    <content><![CDATA[<h2 id="1-Redis-待梳理问题"><a href="#1-Redis-待梳理问题" class="headerlink" title="1. Redis 待梳理问题"></a>1. Redis 待梳理问题</h2><h3 id="1-1-redis-主从模式是什么？和集群模式的区别是什么？"><a href="#1-1-redis-主从模式是什么？和集群模式的区别是什么？" class="headerlink" title="1.1. redis 主从模式是什么？和集群模式的区别是什么？"></a>1.1. redis 主从模式是什么？和集群模式的区别是什么？</h3>]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 待梳理问题</title>
    <url>/2022/10/03/golanghigh/golang-dai-shu-li-wen-ti/</url>
    <content><![CDATA[<h2 id="1-Golang-待梳理问题"><a href="#1-Golang-待梳理问题" class="headerlink" title="1. Golang 待梳理问题"></a>1. Golang 待梳理问题</h2><h3 id="1-1-Gin-如何让做参数校验？"><a href="#1-1-Gin-如何让做参数校验？" class="headerlink" title="1.1. Gin 如何让做参数校验？"></a>1.1. Gin 如何让做参数校验？</h3><h3 id="1-2-如何通过字符串调用函数？"><a href="#1-2-如何通过字符串调用函数？" class="headerlink" title="1.2. 如何通过字符串调用函数？"></a>1.2. 如何通过字符串调用函数？</h3><h3 id="1-3-go-的-chan-关闭后还可以大宋数据吗-？"><a href="#1-3-go-的-chan-关闭后还可以大宋数据吗-？" class="headerlink" title="1.3. go 的 chan 关闭后还可以大宋数据吗 ？"></a>1.3. go 的 chan 关闭后还可以大宋数据吗 ？</h3><h3 id="1-4-什么是内存逃逸？-什么时候会发生内存逃逸？"><a href="#1-4-什么是内存逃逸？-什么时候会发生内存逃逸？" class="headerlink" title="1.4. 什么是内存逃逸？ 什么时候会发生内存逃逸？"></a>1.4. 什么是内存逃逸？ 什么时候会发生内存逃逸？</h3><h3 id="1-5-new-和-make-的区别是什么"><a href="#1-5-new-和-make-的区别是什么" class="headerlink" title="1.5. new 和 make 的区别是什么"></a>1.5. new 和 make 的区别是什么</h3><h3 id="1-6-结构体是传指针还是值-？"><a href="#1-6-结构体是传指针还是值-？" class="headerlink" title="1.6. 结构体是传指针还是值 ？"></a>1.6. 结构体是传指针还是值 ？</h3><h3 id="1-7-G一直占用资源，GMP怎么解决？"><a href="#1-7-G一直占用资源，GMP怎么解决？" class="headerlink" title="1.7. G一直占用资源，GMP怎么解决？"></a>1.7. G一直占用资源，GMP怎么解决？</h3><h3 id="1-8-GMP，G什么时候阻塞，G阻塞，调度器如何解决？G有集中状态？"><a href="#1-8-GMP，G什么时候阻塞，G阻塞，调度器如何解决？G有集中状态？" class="headerlink" title="1.8. GMP，G什么时候阻塞，G阻塞，调度器如何解决？G有集中状态？"></a>1.8. GMP，G什么时候阻塞，G阻塞，调度器如何解决？G有集中状态？</h3><h3 id="1-9-线程有几种状态？-自旋和非自旋"><a href="#1-9-线程有几种状态？-自旋和非自旋" class="headerlink" title="1.9. 线程有几种状态？ 自旋和非自旋"></a>1.9. 线程有几种状态？ 自旋和非自旋</h3><h3 id="1-10-Go的tag-原理-反射原理-？"><a href="#1-10-Go的tag-原理-反射原理-？" class="headerlink" title="1.10. Go的tag 原理? 反射原理 ？"></a>1.10. Go的tag 原理? 反射原理 ？</h3><h3 id="1-11-线程有多大？携程有多大-？-线程2M，协程2KB"><a href="#1-11-线程有多大？携程有多大-？-线程2M，协程2KB" class="headerlink" title="1.11. 线程有多大？携程有多大 ？ 线程2M，协程2KB"></a>1.11. 线程有多大？携程有多大 ？ 线程2M，协程2KB</h3><h3 id="1-12-一个线程发生OOM？"><a href="#1-12-一个线程发生OOM？" class="headerlink" title="1.12. 一个线程发生OOM？"></a>1.12. 一个线程发生OOM？</h3><h3 id="1-13-携程发生OOM？"><a href="#1-13-携程发生OOM？" class="headerlink" title="1.13. 携程发生OOM？"></a>1.13. 携程发生OOM？</h3><h3 id="1-14-错误处理如何解决-？是否统一处理-？"><a href="#1-14-错误处理如何解决-？是否统一处理-？" class="headerlink" title="1.14. 错误处理如何解决 ？是否统一处理 ？"></a>1.14. 错误处理如何解决 ？是否统一处理 ？</h3><h3 id="1-15-CPU多核如何保持不冲突-？"><a href="#1-15-CPU多核如何保持不冲突-？" class="headerlink" title="1.15. CPU多核如何保持不冲突 ？"></a>1.15. CPU多核如何保持不冲突 ？</h3><h3 id="1-16-Go的Mutex的-底层实现-？"><a href="#1-16-Go的Mutex的-底层实现-？" class="headerlink" title="1.16. Go的Mutex的 底层实现 ？"></a>1.16. Go的Mutex的 底层实现 ？</h3><h3 id="1-17-饥饿模式和正常模式的区别是什么-？"><a href="#1-17-饥饿模式和正常模式的区别是什么-？" class="headerlink" title="1.17. 饥饿模式和正常模式的区别是什么 ？"></a>1.17. 饥饿模式和正常模式的区别是什么 ？</h3><h3 id="1-18-多个G中一个G出错如何处理？"><a href="#1-18-多个G中一个G出错如何处理？" class="headerlink" title="1.18. 多个G中一个G出错如何处理？"></a>1.18. 多个G中一个G出错如何处理？</h3><h3 id="1-19-空-struct-的使用场景-？空结构体增加方法"><a href="#1-19-空-struct-的使用场景-？空结构体增加方法" class="headerlink" title="1.19. 空 struct 的使用场景 ？空结构体增加方法"></a>1.19. 空 struct 的使用场景 ？空结构体增加方法</h3><h3 id="1-20-字符串转字节数组是否发生内存拷贝？"><a href="#1-20-字符串转字节数组是否发生内存拷贝？" class="headerlink" title="1.20. 字符串转字节数组是否发生内存拷贝？"></a>1.20. 字符串转字节数组是否发生内存拷贝？</h3><h3 id="1-21-如何不发生内存拷贝？"><a href="#1-21-如何不发生内存拷贝？" class="headerlink" title="1.21. 如何不发生内存拷贝？"></a>1.21. 如何不发生内存拷贝？</h3><h3 id="1-22-如何设计RPC框架-？"><a href="#1-22-如何设计RPC框架-？" class="headerlink" title="1.22. 如何设计RPC框架 ？"></a>1.22. 如何设计RPC框架 ？</h3><h3 id="1-23-TCP-粘包问题-？-包序列号-，长度？"><a href="#1-23-TCP-粘包问题-？-包序列号-，长度？" class="headerlink" title="1.23. TCP 粘包问题 ？ 包序列号 ，长度？"></a>1.23. TCP 粘包问题 ？ 包序列号 ，长度？</h3><h3 id="1-24"><a href="#1-24" class="headerlink" title="1.24."></a>1.24.</h3><h3 id="1-25"><a href="#1-25" class="headerlink" title="1.25."></a>1.25.</h3>]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>GMP 的设计策略</title>
    <url>/2022/10/03/golanghigh/gmp-de-she-ji-ce-lue/</url>
    <content><![CDATA[<h2 id="1-GMP-的设计策略"><a href="#1-GMP-的设计策略" class="headerlink" title="1. GMP 的设计策略"></a>1. GMP 的设计策略</h2><h3 id="1-1-复用线程"><a href="#1-1-复用线程" class="headerlink" title="1.1. 复用线程"></a>1.1. 复用线程</h3><pre><code>偷取G
handle off
</code></pre>
<h3 id="1-2-抢占"><a href="#1-2-抢占" class="headerlink" title="1.2. 抢占"></a>1.2. 抢占</h3><pre><code>每个G只执行10ms，到期会被抢走P
</code></pre>
<h3 id="1-3-全局队列"><a href="#1-3-全局队列" class="headerlink" title="1.3. 全局队列"></a>1.3. 全局队列</h3><pre><code>M 没有 G 的时候从全局队列取G
</code></pre>
<h3 id="1-4-利用并行"><a href="#1-4-利用并行" class="headerlink" title="1.4. 利用并行"></a>1.4. 利用并行</h3><pre><code>MaxProcess P = cpu/2
</code></pre>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub 添加 sshkey</title>
    <url>/2022/10/03/util/github-tian-jia-sshkey/</url>
    <content><![CDATA[<h2 id="1-GitHub-添加-sshkey"><a href="#1-GitHub-添加-sshkey" class="headerlink" title="1. GitHub 添加 sshkey"></a>1. GitHub 添加 sshkey</h2><h3 id="1-1-生成密钥-邮箱填自己的GitHub注册邮箱"><a href="#1-1-生成密钥-邮箱填自己的GitHub注册邮箱" class="headerlink" title="1.1. 生成密钥 邮箱填自己的GitHub注册邮箱"></a>1.1. 生成密钥 邮箱填自己的GitHub注册邮箱</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;xxx@xxx.com&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-2-生成密钥-邮箱填自己的GitHub注册邮箱"><a href="#1-2-生成密钥-邮箱填自己的GitHub注册邮箱" class="headerlink" title="1.2. 生成密钥 邮箱填自己的GitHub注册邮箱"></a>1.2. 生成密钥 邮箱填自己的GitHub注册邮箱</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;xxx@xxx.com&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-3-将生成的密钥添加到GitHub-SSH-keys-里面"><a href="#1-3-将生成的密钥添加到GitHub-SSH-keys-里面" class="headerlink" title="1.3. 将生成的密钥添加到GitHub SSH keys 里面"></a>1.3. 将生成的密钥添加到GitHub SSH keys 里面</h3><p>点击头像 &#x3D;》 <code>Settings</code> &#x3D;》 <code>SSH and GPG keys</code> &#x3D;》 点击 <code>New SSH key</code> 按钮 添加即可</p>
<h3 id="1-4-测试是否添加成功"><a href="#1-4-测试是否添加成功" class="headerlink" title="1.4. 测试是否添加成功"></a>1.4. 测试是否添加成功</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com <span class="comment"># 回车 输入 yes即可 </span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 修改后 自动提交脚本</title>
    <url>/2022/10/03/util/zi-dong-ti-jiao-jiao-ben/</url>
    <content><![CDATA[<p>每次修改文章后都需要敲一串生成 和 提交github 的代码，研究了一下脚本，写了两种方式自动生成并且将原代码提交</p>
<h3 id="为什么要写两种方式呢-？"><a href="#为什么要写两种方式呢-？" class="headerlink" title="为什么要写两种方式呢 ？"></a>为什么要写两种方式呢 ？</h3><h4 id="因为-bash-和-powershell-不是一种语言，在powershell-里执行-sh-脚本也可以，他会自动调用-bash，但是不方便查看输出内容"><a href="#因为-bash-和-powershell-不是一种语言，在powershell-里执行-sh-脚本也可以，他会自动调用-bash，但是不方便查看输出内容" class="headerlink" title="因为 bash 和 powershell 不是一种语言，在powershell 里执行 sh 脚本也可以，他会自动调用 bash，但是不方便查看输出内容"></a>因为 bash 和 powershell 不是一种语言，在powershell 里执行 sh 脚本也可以，他会自动调用 bash，但是不方便查看输出内容</h4><p>脚本非常简单 一共就两步，一是hexo 生成并发布，二是推送源代码到github仓库</p>
<p>提交到github 仓库需要 commit 的 message，所以需要在执行脚本的时候可以输入</p>
<h3 id="bash-脚本"><a href="#bash-脚本" class="headerlink" title="bash 脚本"></a>bash 脚本</h3><h4 id="将代码复制保存在”-sh”-为后缀名的文件中，在-gitbash-中执行即可。比如-保存成-push-sh-，则-执行-“push-sh-提交信息”"><a href="#将代码复制保存在”-sh”-为后缀名的文件中，在-gitbash-中执行即可。比如-保存成-push-sh-，则-执行-“push-sh-提交信息”" class="headerlink" title="将代码复制保存在”.sh” 为后缀名的文件中，在 gitbash 中执行即可。比如 保存成 push.sh ，则 执行 “push.sh 提交信息”"></a>将代码复制保存在”.sh” 为后缀名的文件中，在 gitbash 中执行即可。比如 保存成 push.sh ，则 执行 “push.sh 提交信息”</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> [ ! -n <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;请输入提交信息&quot;</span></span><br><span class="line">  <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  msg=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$msg</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">echoMsg</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$1</span>:&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echoMsg <span class="string">&quot;cd D:\github\github-hexo&quot;</span></span><br><span class="line"><span class="built_in">cd</span> D:\github\github-hexo</span><br><span class="line"></span><br><span class="line">echoMsg <span class="string">&quot;hexo g&quot;</span></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">echoMsg <span class="string">&quot;hexo d&quot;</span></span><br><span class="line">hexo d</span><br><span class="line"></span><br><span class="line">echoMsg <span class="string">&quot;git pull&quot;</span></span><br><span class="line">git pull</span><br><span class="line">echoMsg <span class="string">&quot;git status&quot;</span></span><br><span class="line">git status</span><br><span class="line"> </span><br><span class="line">echoMsg <span class="string">&quot;git add .&quot;</span></span><br><span class="line">git add .</span><br><span class="line"> </span><br><span class="line">echoMsg <span class="string">&quot;git commit -m <span class="variable">$msg</span>&quot;</span></span><br><span class="line">git commit -m <span class="string">&quot;<span class="variable">$msg</span>&quot;</span></span><br><span class="line"> </span><br><span class="line">echoMsg <span class="string">&quot;git push &quot;</span></span><br><span class="line">git push </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="powershell-脚本"><a href="#powershell-脚本" class="headerlink" title="powershell 脚本"></a>powershell 脚本</h3><h4 id="将代码复制保存在”-ps1”-为后缀名的文件中，在-powershell下执行-即可。比如-保存成-push-ps1-，则-执行-“push-ps1-提交信息”"><a href="#将代码复制保存在”-ps1”-为后缀名的文件中，在-powershell下执行-即可。比如-保存成-push-ps1-，则-执行-“push-ps1-提交信息”" class="headerlink" title="将代码复制保存在”.ps1” 为后缀名的文件中，在 powershell下执行 即可。比如 保存成 push.ps1 ，则 执行 “push.ps1 提交信息”"></a>将代码复制保存在”.ps1” 为后缀名的文件中，在 powershell下执行 即可。比如 保存成 push.ps1 ，则 执行 “push.ps1 提交信息”</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此文件在 powershell下执行</span></span><br><span class="line"></span><br><span class="line">param(<span class="variable">$msg</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hexo g&quot;</span></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hexo d&quot;</span></span><br><span class="line">hexo d</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;git add .&quot;</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;git commit -m <span class="variable">$msg</span>&quot;</span></span><br><span class="line">git commit -m <span class="variable">$msg</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;git push &quot;</span></span><br><span class="line">git push</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>bash</tag>
        <tag>powershell</tag>
      </tags>
  </entry>
  <entry>
    <title>免费 图床</title>
    <url>/2022/10/03/util/tu-chuang/</url>
    <content><![CDATA[<p>免费 图床 <a href="https://www.imgurl.org/vip/manage">https://www.imgurl.org/vip/manage</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>redis</title>
    <url>/2022/10/03/redis/redis/</url>
    <content><![CDATA[<p>redis 所有的key 原则上都要设置过期时间！！！</p>
<h2 id="1-常用数据类型"><a href="#1-常用数据类型" class="headerlink" title="1. 常用数据类型"></a>1. 常用数据类型</h2><h3 id="1-1-string-字符串"><a href="#1-1-string-字符串" class="headerlink" title="1.1. string 字符串"></a>1.1. string 字符串</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">set</span> user:001 <span class="string">&#x27;&#123;&quot;Id&quot;:&quot;214&quot;,&quot;Name&quot;:&quot;玫德丝度假系列青梨洗发水&quot;,&quot;Barcode&quot;:&quot;8714462081942&quot;,&quot;RecordCode&quot;:&quot;61F9J8714462081942&quot;&#125;&#x27;</span></span><br><span class="line"><span class="string">&quot;OK&quot;</span></span><br><span class="line">&gt; get user:001</span><br><span class="line"><span class="string">&quot;&#123;&quot;</span>Id<span class="string">&quot;:&quot;</span>214<span class="string">&quot;,&quot;</span>Name<span class="string">&quot;:&quot;</span>玫德丝度假系列青梨洗发水<span class="string">&quot;,&quot;</span>Barcode<span class="string">&quot;:&quot;</span>8714462081942<span class="string">&quot;,&quot;</span>RecordCode<span class="string">&quot;:&quot;</span>61F9J8714462081942<span class="string">&quot;&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-hash-哈希"><a href="#1-2-hash-哈希" class="headerlink" title="1.2. hash 哈希"></a>1.2. hash 哈希</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; hget </span><br><span class="line">&gt; hmget </span><br><span class="line">&gt; hset </span><br><span class="line">&gt; hmset </span><br></pre></td></tr></table></figure>

<h3 id="1-3-list-链表"><a href="#1-3-list-链表" class="headerlink" title="1.3. list 链表"></a>1.3. list 链表</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; lpush user zhangsan</span><br><span class="line">&gt; lpush user lisi</span><br><span class="line">&gt; lpush user wangwu</span><br><span class="line">&gt; rpop user </span><br><span class="line">&gt; lpop user </span><br><span class="line">&gt;lrange user 1 10</span><br></pre></td></tr></table></figure>

<h3 id="1-4-set-集合"><a href="#1-4-set-集合" class="headerlink" title="1.4. set 集合"></a>1.4. set 集合</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; sadd</span><br><span class="line">&gt; spop</span><br><span class="line">&gt; smembers</span><br></pre></td></tr></table></figure>
<h3 id="1-5-sort-set-有序集合"><a href="#1-5-sort-set-有序集合" class="headerlink" title="1.5. sort set 有序集合"></a>1.5. sort set 有序集合</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; zadd</span><br><span class="line">&gt; zrange</span><br></pre></td></tr></table></figure>




<p>更多用法: <a href="https://www.runoob.com/redis/redis-tutorial.html">菜鸟教程</a></p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>string</tag>
        <tag>get</tag>
        <tag>set</tag>
      </tags>
  </entry>
  <entry>
    <title>postman、apipost 预览接口数据</title>
    <url>/2022/10/03/util/postman-apipost-yu-lan-jie-kou-shu-ju/</url>
    <content><![CDATA[<p>使用postman 挺长时间了 ， 最近才发现可以预览接口返回的json数据</p>
<p>ps：早知道这个功能能省事好多啊</p>
<p>在此记录一下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 此代码写在 tests 中，请求接口后返回数据点击 Visualize 按钮 即可预览</span><br><span class="line">// html 模板字符</span><br><span class="line">var template = `</span><br><span class="line"> </span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;<span class="built_in">tr</span>&gt;</span><br><span class="line">            &lt;th&gt;ID&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;用户名&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;创建时间&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line"> </span><br><span class="line">        &#123;&#123;<span class="comment">#each response&#125;&#125;</span></span><br><span class="line">            &lt;<span class="built_in">tr</span>&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;<span class="built_in">id</span>&#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;name&#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;create_time&#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &#123;&#123;/each&#125;&#125;</span><br><span class="line"> </span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">`;</span><br><span class="line"> </span><br><span class="line">// Set visualizer</span><br><span class="line">pm.visualizer.set(template, &#123;</span><br><span class="line">    // 解析返回的数据，并传给模板想要预览的数据 </span><br><span class="line">    response: pm.response.json().data.details</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title>mysql 优化</title>
    <url>/2022/10/03/mysql/mysql-you-hua/</url>
    <content><![CDATA[<p>mysql</p>
<h2 id="mysql-优化"><a href="#mysql-优化" class="headerlink" title="mysql 优化"></a>mysql 优化</h2><p>建立索引的原则是： 尽量选择区分度高的字段建立索引</p>
<p>比例越接近1，越适合建立索引，但是区分度高低，并不能作为绝对的标准，还要结合实际业务设置索引</p>
<p>区分度公式 ： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">count(distinct col_name)/count(*)</span><br></pre></td></tr></table></figure>

<h3 id="在-where-x2F-order-by-字段加索引，比如下面的sql，需要在-name-age-建立索引"><a href="#在-where-x2F-order-by-字段加索引，比如下面的sql，需要在-name-age-建立索引" class="headerlink" title="在 where&#x2F;order by 字段加索引，比如下面的sql，需要在 name,age 建立索引"></a>在 where&#x2F;order by 字段加索引，比如下面的sql，需要在 name,age 建立索引</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select name,age,phone from user <span class="built_in">where</span> name = <span class="string">&quot;张三&quot;</span> order by age desc </span><br></pre></td></tr></table></figure>

<h3 id="用户“性别”要不要建立索引-？"><a href="#用户“性别”要不要建立索引-？" class="headerlink" title="用户“性别”要不要建立索引 ？"></a>用户“性别”要不要建立索引 ？</h3><p>如果用户性别是平均分布，那么性别列建立索引效果不大<br>如果男女不平衡，经常需要查询少的那部分，则建立索引比较好</p>
<p>同理，比如数据是否已经处理，is_deal 字段，0 未处理，1 已处理成功，2 处理失败，处理成功的数据占据99.9%。<br>那么建立索引就比较好</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql优化</tag>
      </tags>
  </entry>
  <entry>
    <title>golang 实现简单文件上传</title>
    <url>/2022/10/03/golang/go-shi-xian-wen-jian-shang-chuan/</url>
    <content><![CDATA[<h2 id="golang-上传文件"><a href="#golang-上传文件" class="headerlink" title="golang 上传文件"></a>golang 上传文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;html/template&quot;</span></span><br><span class="line">	<span class="string">&quot;io&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func <span class="function"><span class="title">main</span></span>()  &#123;</span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/upload&quot;</span>, Upload)</span><br><span class="line">	<span class="keyword">if</span> err := http.ListenAndServe(<span class="string">&quot;127.0.0.1:9090&quot;</span>, nil); err != nil &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func Upload(w http.ResponseWriter, r *http.Request)  &#123;</span><br><span class="line">	//判断请求方式</span><br><span class="line">	<span class="keyword">if</span> r.Method == <span class="string">&quot;POST&quot;</span> &#123;</span><br><span class="line">		//设置内存大小</span><br><span class="line">		r.ParseMultipartForm(32 &lt;&lt; <span class="string">20)</span></span><br><span class="line"><span class="string">		//获取上传文件</span></span><br><span class="line"><span class="string">		file, handler, err := r.FormFile(&quot;uploadfile&quot;)</span></span><br><span class="line"><span class="string">		if err != nil &#123;</span></span><br><span class="line"><span class="string">			fmt.Println(err)</span></span><br><span class="line"><span class="string">			return</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">		defer file.Close()</span></span><br><span class="line"><span class="string">		fmt.Fprintf(w, &quot;%v&quot;, handler.Header)</span></span><br><span class="line"><span class="string">		//创建上传目录</span></span><br><span class="line"><span class="string">		os.Mkdir(&quot;./upload&quot;, os.ModePerm)</span></span><br><span class="line"><span class="string">		//创建上传文件</span></span><br><span class="line"><span class="string">		f, err := os.Create(&quot;./upload/&quot; + handler.Filename)</span></span><br><span class="line"><span class="string">		if err != nil &#123;</span></span><br><span class="line"><span class="string">			fmt.Println(err)</span></span><br><span class="line"><span class="string">			return</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">		defer f.Close()</span></span><br><span class="line"><span class="string">		io.Copy(f, file)</span></span><br><span class="line"><span class="string">		w.WriteHeader(http.StatusCreated)</span></span><br><span class="line"><span class="string">		io.WriteString(w, &quot;Uploaded successfully&quot;)</span></span><br><span class="line"><span class="string">	&#125; else &#123;</span></span><br><span class="line"><span class="string">		//渲染页面 解析模板文件</span></span><br><span class="line"><span class="string">		tpl, _ := template.ParseFiles(&quot;./upload.html&quot;)</span></span><br><span class="line"><span class="string">		tpl.Execute(w, nil)</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<p>参考文章: <a href="https://juejin.cn/post/7134935002432667679">稀土掘金</a></p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go 修改结构体切片的值</title>
    <url>/2022/10/03/golang/go-jie-gou-ti-qie-pian-de-zhi/</url>
    <content><![CDATA[<p>golang</p>
<h2 id="for-循环结构体切片的时候，直接使用-value-值去修改，是不会修改原数据的"><a href="#for-循环结构体切片的时候，直接使用-value-值去修改，是不会修改原数据的" class="headerlink" title="for 循环结构体切片的时候，直接使用 value 值去修改，是不会修改原数据的"></a>for 循环结构体切片的时候，直接使用 value 值去修改，是不会修改原数据的</h2><h3 id="for-循环里的-v-属于临时变量"><a href="#for-循环里的-v-属于临时变量" class="headerlink" title="for 循环里的 v 属于临时变量"></a>for 循环里的 v 属于临时变量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span> User struct &#123;</span><br><span class="line">	Name    string</span><br><span class="line">	Address string</span><br><span class="line">	Age     int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">	<span class="built_in">users</span> := []User&#123;</span><br><span class="line">		&#123;<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;北京&quot;</span>, 18&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;李四&quot;</span>, <span class="string">&quot;上海&quot;</span>, 19&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;王五&quot;</span>, <span class="string">&quot;广州&quot;</span>, 20&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	users02 := <span class="built_in">users</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;原数据:\n %+v \n&quot;</span>, <span class="built_in">users</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> _, v := range <span class="built_in">users</span> &#123;</span><br><span class="line">		v.Name = <span class="string">&quot;大傻瓜：&quot;</span> + v.Name</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;第一种方式修改后:\n %+v \n&quot;</span>, <span class="built_in">users</span>)</span><br><span class="line">	<span class="keyword">for</span> k, v := range users02 &#123;</span><br><span class="line">		<span class="built_in">users</span>[k].Name = <span class="string">&quot;小傻瓜：&quot;</span> + v.Name</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;第二种方式修改后:\n %+v \n&quot;</span>, <span class="built_in">users</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="打印内容，可以看到大傻瓜没加上，小傻瓜加上了"><a href="#打印内容，可以看到大傻瓜没加上，小傻瓜加上了" class="headerlink" title="打印内容，可以看到大傻瓜没加上，小傻瓜加上了"></a>打印内容，可以看到大傻瓜没加上，小傻瓜加上了</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">原数据:</span><br><span class="line">[&#123;Name:张三 Address:北京 Age:18&#125; &#123;Name:李四 Address:上海 Age:19&#125; &#123;Name:王五 Address:广州 Age:20&#125;]</span><br><span class="line">第一种方式修改后:</span><br><span class="line">[&#123;Name:张三 Address:北京 Age:18&#125; &#123;Name:李四 Address:上海 Age:19&#125; &#123;Name:王五 Address:广州 Age:20&#125;]</span><br><span class="line">第二种方式修改后:</span><br><span class="line">[&#123;Name:小傻瓜：张三 Address:北京 Age:18&#125; &#123;Name:小傻瓜：李四 Address:上海 Age:19 &#125; &#123;Name:小傻瓜：王五 Address:广州 Age:20&#125;]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>结构体</tag>
        <tag>切片</tag>
      </tags>
  </entry>
  <entry>
    <title>go int64 精度丢失</title>
    <url>/2022/10/03/golang/go-int64-jing-du-diu-shi/</url>
    <content><![CDATA[<p>golang</p>
<h2 id="math-包可查看各种类型的最大值，最小数"><a href="#math-包可查看各种类型的最大值，最小数" class="headerlink" title="math 包可查看各种类型的最大值，最小数"></a>math 包可查看各种类型的最大值，最小数</h2><h3 id="int64-接收超过最大值的数字将会丢失数据"><a href="#int64-接收超过最大值的数字将会丢失数据" class="headerlink" title="int64 接收超过最大值的数字将会丢失数据"></a>int64 接收超过最大值的数字将会丢失数据</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Int64 最大值&quot;</span>, math.MaxInt64)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Int64 最小值&quot;</span>, math.MinInt64)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#Int64 最大值 9223372036854775807</span></span><br><span class="line"><span class="comment">#Int64 最小值 -9223372036854775808</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>数据类型</tag>
        <tag>int64</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下 docker Vmmem 占用内存过多</title>
    <url>/2022/10/03/docker/docker-vmmem-zhan-yong-nei-cun-guo-duo/</url>
    <content><![CDATA[<h2 id="1-Windows下-docker-启动后，Vmmem-占用内存过多"><a href="#1-Windows下-docker-启动后，Vmmem-占用内存过多" class="headerlink" title="1. Windows下 docker 启动后，Vmmem 占用内存过多"></a>1. Windows下 docker 启动后，Vmmem 占用内存过多</h2><h3 id="1-1-如果是用的wsl模式的话，就可以关闭-hyper-v"><a href="#1-1-如果是用的wsl模式的话，就可以关闭-hyper-v" class="headerlink" title="1.1. 如果是用的wsl模式的话，就可以关闭 hyper-v"></a>1.1. 如果是用的wsl模式的话，就可以关闭 hyper-v</h3><h4 id="1-1-1-关闭方式-learn-microsoft-com"><a href="#1-1-1-关闭方式-learn-microsoft-com" class="headerlink" title="1.1.1. 关闭方式 learn.microsoft.com"></a>1.1.1. 关闭方式 <a href="https://learn.microsoft.com/zh-cn/troubleshoot/windows-client/application-management/virtualization-apps-not-work-with-hyper-v">learn.microsoft.com</a></h4><h3 id="1-2-然后设置-docker-的最大使用内存"><a href="#1-2-然后设置-docker-的最大使用内存" class="headerlink" title="1.2. 然后设置 docker 的最大使用内存"></a>1.2. 然后设置 docker 的最大使用内存</h3><h4 id="1-2-1-按下-Windows-R-键，输入-UserProfile-并运行进入用户文件夹"><a href="#1-2-1-按下-Windows-R-键，输入-UserProfile-并运行进入用户文件夹" class="headerlink" title="1.2.1. 按下 Windows+R 键，输入 %UserProfile% 并运行进入用户文件夹"></a>1.2.1. 按下 <code>Windows+R</code> 键，输入 <code>%UserProfile%</code> 并运行进入用户文件夹</h4><h4 id="1-2-2-新建文件-wslconfig-，然后记事本编辑"><a href="#1-2-2-新建文件-wslconfig-，然后记事本编辑" class="headerlink" title="1.2.2. 新建文件 .wslconfig ，然后记事本编辑"></a>1.2.2. 新建文件 <code>.wslconfig</code> ，然后记事本编辑</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[wsl2]</span><br><span class="line">memory=2GB</span><br><span class="line">swap=0</span><br><span class="line">localhostForwarding=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="1-3-重启电脑和docker"><a href="#1-3-重启电脑和docker" class="headerlink" title="1.3. 重启电脑和docker"></a>1.3. 重启电脑和docker</h3>]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>Vmmem</tag>
      </tags>
  </entry>
  <entry>
    <title>windows 环境下 使用 docker 安装 mysql,并且挂载外部配置和数据</title>
    <url>/2022/10/03/docker/windows-xia-shi-yong-docker-an-zhuang-mysql/</url>
    <content><![CDATA[<h2 id="1-Docker-安装-MySQL"><a href="#1-Docker-安装-MySQL" class="headerlink" title="1. Docker 安装 MySQL"></a>1. Docker 安装 MySQL</h2><h3 id="1-1-查看可用的-MySQL-版本"><a href="#1-1-查看可用的-MySQL-版本" class="headerlink" title="1.1. 查看可用的 MySQL 版本"></a>1.1. 查看可用的 MySQL 版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure>
<h3 id="1-2-拉取-MySQL-镜像"><a href="#1-2-拉取-MySQL-镜像" class="headerlink" title="1.2. 拉取 MySQL 镜像"></a>1.2. 拉取 MySQL 镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull mysql:latest</span><br></pre></td></tr></table></figure>

<h3 id="1-3-查看本地镜像"><a href="#1-3-查看本地镜像" class="headerlink" title="1.3. 查看本地镜像"></a>1.3. 查看本地镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<h3 id="1-4-运行容器"><a href="#1-4-运行容器" class="headerlink" title="1.4. 运行容器"></a>1.4. 运行容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -itd --name mysql-test06 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</span><br><span class="line">docker run -itd --name mysql-test07 -p 3307:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</span><br><span class="line">docker run -itd --name mysql-test08 -p 3308:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</span><br><span class="line">docker run -itd --name mysql-test09 -p 3309:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</span><br></pre></td></tr></table></figure>

<h3 id="1-5-参数说明："><a href="#1-5-参数说明：" class="headerlink" title="1.5. 参数说明："></a>1.5. 参数说明：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--name 设置容器名</span><br><span class="line">-p ，设置端口映射，</span><br><span class="line">    3306:3306 ：主机 windows 3306 端口:容器内mysql 的 3306 端口，</span><br><span class="line">    外部主机可以直接通过 宿主机ip:3306 访问到 MySQL 的服务。</span><br><span class="line">    也可以改为 3307/3308/3309 等其他可用端口值</span><br><span class="line"></span><br><span class="line">-e 设置环境变量</span><br><span class="line">    MYSQL_ROOT_PASSWORD=123456：设置 MySQL 服务 root 用户的密码。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-6-挂载外部配置和数据"><a href="#1-6-挂载外部配置和数据" class="headerlink" title="1.6. 挂载外部配置和数据"></a>1.6. 挂载外部配置和数据</h3><ul>
<li>data: mysql的数据目录，包括数据库，表</li>
<li>conf.d :存储自定义配置文件</li>
<li>my.cnf :是默认配置文件</li>
</ul>
<h3 id="1-7-创建对应的文件夹和文件"><a href="#1-7-创建对应的文件夹和文件" class="headerlink" title="1.7. 创建对应的文件夹和文件"></a>1.7. 创建对应的文件夹和文件</h3><p>如下：<br><img src="https://s3.bmp.ovh/imgs/2022/09/28/9106e755438c0a34.png"></p>
<h4 id="1-7-1-创建对应的文件夹"><a href="#1-7-1-创建对应的文件夹" class="headerlink" title="1.7.1. 创建对应的文件夹"></a>1.7.1. 创建对应的文件夹</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">d:/docker/mysql/data  </span><br><span class="line">d:/docker/mysql/conf.d</span><br></pre></td></tr></table></figure>
<h4 id="1-7-2-创建对应的配置文件-my-cnf"><a href="#1-7-2-创建对应的配置文件-my-cnf" class="headerlink" title="1.7.2. 创建对应的配置文件 my.cnf"></a>1.7.2. 创建对应的配置文件 my.cnf</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">d:/docker/mysql/my.cnf</span><br></pre></td></tr></table></figure>

<h4 id="1-7-3-my-cnf添加如下内容"><a href="#1-7-3-my-cnf添加如下内容" class="headerlink" title="1.7.3. my.cnf添加如下内容"></a>1.7.3. my.cnf添加如下内容</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">user=mysql</span><br><span class="line">character-set-server=utf8</span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line">secure_file_priv=/var/lib/mysql</span><br><span class="line">expire_logs_days=7</span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</span><br><span class="line">max_connections=1000</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure>

<h3 id="1-8-创建容器，并后台启动"><a href="#1-8-创建容器，并后台启动" class="headerlink" title="1.8. 创建容器，并后台启动"></a>1.8. 创建容器，并后台启动</h3><p><strong>注意，这里如果在 windows 系统下 需要加上盘符，即绝对路径</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">示例一：</span><br><span class="line">docker run -v d:/docker/mysql/data/:/var/lib/mysql -v d:/docker/mysql/conf.d:/etc/mysql/conf.d -v d:/docker/mysql/my.cnf:/etc/mysql/my.cnf -p 3309:3306 --name mysql-test09 -e MYSQL_ROOT_PASSWORD=123456 -d 43fcfca0776d</span><br><span class="line">示例二：</span><br><span class="line">docker run -v d:/docker/mysql3306/data/:/var/lib/mysql -v d:/docker/mysql3306/conf.d:/etc/mysql/conf.d -v d:/docker/mysql3306/my.cnf:/etc/mysql/my.cnf -p 3306:3306 --name mysql-test06 -e MYSQL_ROOT_PASSWORD=123456 -d 43fcfca0776d</span><br></pre></td></tr></table></figure>


<h3 id="1-5-参数说明：-1"><a href="#1-5-参数说明：-1" class="headerlink" title="1.5. 参数说明："></a>1.5. 参数说明：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-v : --volume 绑定一个卷</span><br><span class="line">-d :后台运行容器，并返回容器ID</span><br></pre></td></tr></table></figure>

<p>参考文章:<br>    <a href="https://www.runoob.com/docker/docker-install-mysql.html">菜鸟教程</a><br>    <a href="https://www.cnblogs.com/linjiqin/p/11465804.html">博客园</a></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>PowerShell一次执行多条命令</title>
    <url>/2022/10/03/util/powershell-yi-ci-zhi-xing-duo-tiao-ming-ling/</url>
    <content><![CDATA[<p>参考文章 <a href="https://blog.csdn.net/u011215669/article/details/81086097">csdn</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add . | git commit -m <span class="string">&quot;edit&quot;</span> | git push</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
</search>
