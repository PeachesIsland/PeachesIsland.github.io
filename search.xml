<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2022 减重趋势</title>
    <url>/2022/12/10/shenghuo/weight/echart-2022-jian-chong-qu-shi/</url>
    <content><![CDATA[<script src="https://cdn.jsdelivr.net/npm/echarts@4.8.0/dist/echarts.min.js"></script>
<!-- 为 ECharts 准备一个具备大小（宽高）的 DOM -->
<div id="main" style="width: 800px;height:30px;"></div>
<script type="text/javascript">
  // 基于准备好的dom，初始化echarts实例
  var myChart = echarts.init(document.getElementById('main'));
  // 指定图表的配置项和数据
  var option = {
    ...
  };
  // 使用刚指定的配置项和数据显示图表。
  myChart.setOption(option);
  // 刷新调整
  window.onresize = function () {
    myChart.resize();
  }
</script>

<p>正数为增长值，负数为减重值</p>
<div id="echarts281" style="width: 90%;height: 800px;margin: 0 auto"></div>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts281'));

        // 指定图表的配置项和数据
        var option = option = {
  color: ['rgb(255, 153, 255,1)', 'rgb(204, 242, 255,0.5)'],
  title: {
    text: '减重趋势',
    textStyle: {
      //文字颜色
      color: '#999',
      //字体风格,'normal','italic','oblique'
      fontStyle: 'normal',
      //字体粗细 'normal','bold','bolder','lighter',100 | 200 | 300 | 400...
      fontWeight: 'bold',
      //字体系列
      fontFamily: 'sans-serif',
      //字体大小
      fontSize: 18
    }
  },
  tooltip: {
    trigger: 'axis',
    axisPointer: {
      type: 'cross',
      label: {
        backgroundColor: '#6a7985'
      }
    }
  },
  legend: {
    textStyle: {
      fontSize: 18, //字体大小
      color: '#999' //字体颜色
    },
    data: ['LXL', 'LJX']
  },
  dataZoom: [
    {
      type: 'slider',
      show: true, //flase直接隐藏图形
      xAxisIndex: [0],
      left: '6%', //滚动条靠左侧的百分比
      bottom: -5,
      start: 90, //滚动条的起始位置
      end: 100 //滚动条的截止位置（按比例分割你的柱状图x轴长度）
    }
  ],
  toolbox: {
    feature: {
      saveAsImage: {}
    }
  },
  grid: {
    left: '4%',
    right: '3%',
    bottom: '4%',
    containLabel: true
  },
  xAxis: [
    {
      type: 'category',
      boundaryGap: false,
      data: [
        '2019-08-01(周四)','2019-08-02(周五)','2019-08-03(周六)','2019-08-04(周日)','2019-08-05(周一)','2019-08-06(周二)','2019-08-07(周三)','2019-08-08(周四)','2019-08-09(周五)','2019-08-10(周六)','2019-08-11(周日)','2019-08-12(周一)','2019-08-13(周二)','2019-08-14(周三)','2019-08-15(周四)','2019-08-16(周五)','2019-08-17(周六)','2019-08-18(周日)','2019-08-19(周一)','2019-08-20(周二)','2019-08-21(周三)','2019-08-22(周四)','2019-08-23(周五)','2019-08-24(周六)','2019-08-25(周日)','2019-08-26(周一)','2019-08-27(周二)','2019-08-28(周三)','2019-08-29(周四)','2019-08-30(周五)','2019-08-31(周六)','2019-09-01(周日)','2019-09-02(周一)','2019-09-03(周二)','2019-09-04(周三)','2019-09-05(周四)','2019-09-06(周五)','2019-09-07(周六)','2019-09-08(周日)','2019-09-09(周一)','2019-09-10(周二)','2019-09-11(周三)','2019-09-12(周四)','2019-09-13(周五)','2019-09-14(周六)','2019-09-15(周日)','2019-09-16(周一)','2019-09-17(周二)','2019-09-18(周三)','2019-09-19(周四)','2019-09-20(周五)','2019-09-21(周六)','2019-09-22(周日)','2019-09-23(周一)','2019-09-24(周二)','2019-09-25(周三)','2019-09-26(周四)','2019-09-27(周五)','2019-09-28(周六)','2019-09-29(周日)','2019-09-30(周一)','2019-10-01(周二)','2019-10-02(周三)','2019-10-03(周四)','2019-10-04(周五)','2019-10-05(周六)','2019-10-06(周日)','2019-10-07(周一)','2019-10-08(周二)','2019-10-09(周三)','2019-10-10(周四)','2019-10-11(周五)','2019-10-12(周六)','2019-10-13(周日)','2019-10-14(周一)','2019-10-15(周二)','2019-10-16(周三)','2019-10-17(周四)','2019-10-18(周五)','2019-10-19(周六)','2019-10-20(周日)','2019-10-21(周一)','2019-10-22(周二)','2019-10-23(周三)','2019-10-24(周四)','2019-10-25(周五)','2019-10-26(周六)','2019-10-27(周日)','2019-10-28(周一)','2019-10-29(周二)','2019-10-30(周三)','2019-10-31(周四)','2019-11-01(周五)','2019-11-02(周六)','2019-11-03(周日)','2019-11-04(周一)','2019-11-05(周二)','2019-11-06(周三)','2019-11-07(周四)','2019-11-08(周五)','2019-11-09(周六)','2019-11-10(周日)','2019-11-11(周一)','2019-11-12(周二)','2019-11-13(周三)','2019-11-14(周四)','2019-11-15(周五)','2019-11-16(周六)','2019-11-17(周日)','2019-11-18(周一)','2019-11-19(周二)','2019-11-20(周三)','2019-11-21(周四)','2019-11-22(周五)','2019-11-23(周六)','2019-11-24(周日)','2019-11-25(周一)','2019-11-26(周二)','2019-11-27(周三)','2019-11-28(周四)','2019-11-29(周五)','2019-11-30(周六)','2019-12-01(周日)','2019-12-02(周一)','2019-12-03(周二)','2019-12-04(周三)','2019-12-05(周四)','2019-12-06(周五)','2019-12-07(周六)','2019-12-08(周日)','2019-12-09(周一)','2019-12-10(周二)','2019-12-11(周三)','2019-12-12(周四)','2019-12-13(周五)','2019-12-14(周六)','2019-12-15(周日)','2019-12-16(周一)','2019-12-17(周二)','2019-12-18(周三)','2019-12-19(周四)','2019-12-20(周五)','2019-12-21(周六)','2019-12-22(周日)','2019-12-23(周一)','2019-12-24(周二)','2019-12-25(周三)','2019-12-26(周四)','2019-12-27(周五)','2019-12-28(周六)','2019-12-29(周日)','2019-12-30(周一)','2019-12-31(周二)','2020-01-01(周三)','2020-01-02(周四)','2020-01-03(周五)','2020-01-04(周六)','2020-01-05(周日)','2020-01-06(周一)','2020-01-07(周二)','2020-01-08(周三)','2020-01-09(周四)','2020-01-10(周五)','2020-01-11(周六)','2020-01-12(周日)','2020-01-13(周一)','2020-01-14(周二)','2020-01-15(周三)','2020-01-16(周四)','2020-01-17(周五)','2020-01-18(周六)','2020-01-19(周日)','2020-01-20(周一)','2020-01-21(周二)','2020-01-22(周三)','2020-01-23(周四)','2020-01-24(周五)','2020-01-25(周六)','2020-01-26(周日)','2020-01-27(周一)','2020-01-28(周二)','2020-01-29(周三)','2020-01-30(周四)','2020-01-31(周五)','2020-02-01(周六)','2020-02-02(周日)','2020-02-03(周一)','2020-02-04(周二)','2020-02-05(周三)','2020-02-06(周四)','2020-02-07(周五)','2020-02-08(周六)','2020-02-09(周日)','2020-02-10(周一)','2020-02-11(周二)','2020-02-12(周三)','2020-02-13(周四)','2020-02-14(周五)','2020-02-15(周六)','2020-02-16(周日)','2020-02-17(周一)','2020-02-18(周二)','2020-02-19(周三)','2020-02-20(周四)','2020-02-21(周五)','2020-02-22(周六)','2020-02-23(周日)','2020-02-24(周一)','2020-02-25(周二)','2020-02-26(周三)','2020-02-27(周四)','2020-02-28(周五)','2020-02-29(周六)','2020-03-01(周日)','2020-03-02(周一)','2020-03-03(周二)','2020-03-04(周三)','2020-03-05(周四)','2020-03-06(周五)','2020-03-07(周六)','2020-03-08(周日)','2020-03-09(周一)','2020-03-10(周二)','2020-03-11(周三)','2020-03-12(周四)','2020-03-13(周五)','2020-03-14(周六)','2020-03-15(周日)','2020-03-16(周一)','2020-03-17(周二)','2020-03-18(周三)','2020-03-19(周四)','2020-03-20(周五)','2020-03-21(周六)','2020-03-22(周日)','2020-03-23(周一)','2020-03-24(周二)','2020-03-25(周三)','2020-03-26(周四)','2020-03-27(周五)','2020-03-28(周六)','2020-03-29(周日)','2020-03-30(周一)','2020-03-31(周二)','2020-04-01(周三)','2020-04-02(周四)','2020-04-03(周五)','2020-04-04(周六)','2020-04-05(周日)','2020-04-06(周一)','2020-04-07(周二)','2020-04-08(周三)','2020-04-09(周四)','2020-04-10(周五)','2020-04-11(周六)','2020-04-12(周日)','2020-04-13(周一)','2020-04-14(周二)','2020-04-15(周三)','2020-04-16(周四)','2020-04-17(周五)','2020-04-18(周六)','2020-04-19(周日)','2020-04-20(周一)','2020-04-21(周二)','2020-04-22(周三)','2020-04-23(周四)','2020-04-24(周五)','2020-04-25(周六)','2020-04-26(周日)','2020-04-27(周一)','2020-04-28(周二)','2020-04-29(周三)','2020-04-30(周四)','2020-05-01(周五)','2020-05-02(周六)','2020-05-03(周日)','2020-05-04(周一)','2020-05-05(周二)','2020-05-06(周三)','2020-05-07(周四)','2020-05-08(周五)','2020-05-09(周六)','2020-05-10(周日)','2020-05-11(周一)','2020-05-12(周二)','2020-05-13(周三)','2020-05-14(周四)','2020-05-15(周五)','2020-05-16(周六)','2020-05-17(周日)','2020-05-18(周一)','2020-05-19(周二)','2020-05-20(周三)','2020-05-21(周四)','2020-05-22(周五)','2020-05-23(周六)','2020-05-24(周日)','2020-05-25(周一)','2020-05-26(周二)','2020-05-27(周三)','2020-05-28(周四)','2020-05-29(周五)','2020-05-30(周六)','2020-05-31(周日)','2020-06-01(周一)','2020-06-02(周二)','2020-06-03(周三)','2020-06-04(周四)','2020-06-05(周五)','2020-06-06(周六)','2020-06-07(周日)','2020-06-08(周一)','2020-06-09(周二)','2020-06-10(周三)','2020-06-11(周四)','2020-06-12(周五)','2020-06-13(周六)','2020-06-14(周日)','2020-06-15(周一)','2020-06-16(周二)','2020-06-17(周三)','2020-06-18(周四)','2020-06-19(周五)','2020-06-20(周六)','2020-06-21(周日)','2020-06-22(周一)','2020-06-23(周二)','2020-06-24(周三)','2020-06-25(周四)','2020-06-26(周五)','2020-06-27(周六)','2020-06-28(周日)','2020-06-29(周一)','2020-06-30(周二)','2020-07-01(周三)','2020-07-02(周四)','2020-07-03(周五)','2020-07-04(周六)','2020-07-05(周日)','2020-07-06(周一)','2020-07-07(周二)','2020-07-08(周三)','2020-07-09(周四)','2020-07-10(周五)','2020-07-11(周六)','2020-07-12(周日)','2020-07-13(周一)','2020-07-14(周二)','2020-07-15(周三)','2020-07-16(周四)','2020-07-17(周五)','2020-07-18(周六)','2020-07-19(周日)','2020-07-20(周一)','2020-07-21(周二)','2020-07-22(周三)','2020-07-23(周四)','2020-07-24(周五)','2020-07-25(周六)','2020-07-26(周日)','2020-07-27(周一)','2020-07-28(周二)','2020-07-29(周三)','2020-07-30(周四)','2020-07-31(周五)','2020-08-01(周六)','2020-08-02(周日)','2020-08-03(周一)','2020-08-04(周二)','2020-08-05(周三)','2020-08-06(周四)','2020-08-07(周五)','2020-08-08(周六)','2020-08-09(周日)','2020-08-10(周一)','2020-08-11(周二)','2020-08-12(周三)','2020-08-13(周四)','2020-08-14(周五)','2020-08-15(周六)','2020-08-16(周日)','2020-08-17(周一)','2020-08-18(周二)','2020-08-19(周三)','2020-08-20(周四)','2020-08-21(周五)','2020-08-22(周六)','2020-08-23(周日)','2020-08-24(周一)','2020-08-25(周二)','2020-08-26(周三)','2020-08-27(周四)','2020-08-28(周五)','2020-08-29(周六)','2020-08-30(周日)','2020-08-31(周一)','2020-09-01(周二)','2020-09-02(周三)','2020-09-03(周四)','2020-09-04(周五)','2020-09-05(周六)','2020-09-06(周日)','2020-09-07(周一)','2020-09-08(周二)','2020-09-09(周三)','2020-09-10(周四)','2020-09-11(周五)','2020-09-12(周六)','2020-09-13(周日)','2020-09-14(周一)','2020-09-15(周二)','2020-09-16(周三)','2020-09-17(周四)','2020-09-18(周五)','2020-09-19(周六)','2020-09-20(周日)','2020-09-21(周一)','2020-09-22(周二)','2020-09-23(周三)','2020-09-24(周四)','2020-09-25(周五)','2020-09-26(周六)','2020-09-27(周日)','2020-09-28(周一)','2020-09-29(周二)','2020-09-30(周三)','2020-10-01(周四)','2020-10-02(周五)','2020-10-03(周六)','2020-10-04(周日)','2020-10-05(周一)','2020-10-06(周二)','2020-10-07(周三)','2020-10-08(周四)','2020-10-09(周五)','2020-10-10(周六)','2020-10-11(周日)','2020-10-12(周一)','2020-10-13(周二)','2020-10-14(周三)','2020-10-15(周四)','2020-10-16(周五)','2020-10-17(周六)','2020-10-18(周日)','2020-10-19(周一)','2020-10-20(周二)','2020-10-21(周三)','2020-10-22(周四)','2020-10-23(周五)','2020-10-24(周六)','2020-10-25(周日)','2020-10-26(周一)','2020-10-27(周二)','2020-10-28(周三)','2020-10-29(周四)','2020-10-30(周五)','2020-10-31(周六)','2020-11-01(周日)','2020-11-02(周一)','2020-11-03(周二)','2020-11-04(周三)','2020-11-05(周四)','2020-11-06(周五)','2020-11-07(周六)','2020-11-08(周日)','2020-11-09(周一)','2020-11-10(周二)','2020-11-11(周三)','2020-11-12(周四)','2020-11-13(周五)','2020-11-14(周六)','2020-11-15(周日)','2020-11-16(周一)','2020-11-17(周二)','2020-11-18(周三)','2020-11-19(周四)','2020-11-20(周五)','2020-11-21(周六)','2020-11-22(周日)','2020-11-23(周一)','2020-11-24(周二)','2020-11-25(周三)','2020-11-26(周四)','2020-11-27(周五)','2020-11-28(周六)','2020-11-29(周日)','2020-11-30(周一)','2020-12-01(周二)','2020-12-02(周三)','2020-12-03(周四)','2020-12-04(周五)','2020-12-05(周六)','2020-12-06(周日)','2020-12-07(周一)','2020-12-08(周二)','2020-12-09(周三)','2020-12-10(周四)','2020-12-11(周五)','2020-12-12(周六)','2020-12-13(周日)','2020-12-14(周一)','2020-12-15(周二)','2020-12-16(周三)','2020-12-17(周四)','2020-12-18(周五)','2020-12-19(周六)','2020-12-20(周日)','2020-12-21(周一)','2020-12-22(周二)','2020-12-23(周三)','2020-12-24(周四)','2020-12-25(周五)','2020-12-26(周六)','2020-12-27(周日)','2020-12-28(周一)','2020-12-29(周二)','2020-12-30(周三)','2020-12-31(周四)','2021-01-01(周五)','2021-01-02(周六)','2021-01-03(周日)','2021-01-04(周一)','2021-01-05(周二)','2021-01-06(周三)','2021-01-07(周四)','2021-01-08(周五)','2021-01-09(周六)','2021-01-10(周日)','2021-01-11(周一)','2021-01-12(周二)','2021-01-13(周三)','2021-01-14(周四)','2021-01-15(周五)','2021-01-16(周六)','2021-01-17(周日)','2021-01-18(周一)','2021-01-19(周二)','2021-01-20(周三)','2021-01-21(周四)','2021-01-22(周五)','2021-01-23(周六)','2021-01-24(周日)','2021-01-25(周一)','2021-01-26(周二)','2021-01-27(周三)','2021-01-28(周四)','2021-01-29(周五)','2021-01-30(周六)','2021-01-31(周日)','2021-02-01(周一)','2021-02-02(周二)','2021-02-03(周三)','2021-02-04(周四)','2021-02-05(周五)','2021-02-06(周六)','2021-02-07(周日)','2021-02-08(周一)','2021-02-09(周二)','2021-02-10(周三)','2021-02-11(周四)','2021-02-12(周五)','2021-02-13(周六)','2021-02-14(周日)','2021-02-15(周一)','2021-02-16(周二)','2021-02-17(周三)','2021-02-18(周四)','2021-02-19(周五)','2021-02-20(周六)','2021-02-21(周日)','2021-02-22(周一)','2021-02-23(周二)','2021-02-24(周三)','2021-02-25(周四)','2021-02-26(周五)','2021-02-27(周六)','2021-02-28(周日)','2021-03-01(周一)','2021-03-02(周二)','2021-03-03(周三)','2021-03-04(周四)','2021-03-05(周五)','2021-03-06(周六)','2021-03-07(周日)','2021-03-08(周一)','2021-03-09(周二)','2021-03-10(周三)','2021-03-11(周四)','2021-03-12(周五)','2021-03-13(周六)','2021-03-14(周日)','2021-03-15(周一)','2021-03-16(周二)','2021-03-17(周三)','2021-03-18(周四)','2021-03-19(周五)','2021-03-20(周六)','2021-03-21(周日)','2021-03-22(周一)','2021-03-23(周二)','2021-03-24(周三)','2021-03-25(周四)','2021-03-26(周五)','2021-03-27(周六)','2021-03-28(周日)','2021-03-29(周一)','2021-03-30(周二)','2021-03-31(周三)','2021-04-01(周四)','2021-04-02(周五)','2021-04-03(周六)','2021-04-04(周日)','2021-04-05(周一)','2021-04-06(周二)','2021-04-07(周三)','2021-04-08(周四)','2021-04-09(周五)','2021-04-10(周六)','2021-04-11(周日)','2021-04-12(周一)','2021-04-13(周二)','2021-04-14(周三)','2021-04-15(周四)','2021-04-16(周五)','2021-04-17(周六)','2021-04-18(周日)','2021-04-19(周一)','2021-04-20(周二)','2021-04-21(周三)','2021-04-22(周四)','2021-04-23(周五)','2021-04-24(周六)','2021-04-25(周日)','2021-04-26(周一)','2021-04-27(周二)','2021-04-28(周三)','2021-04-29(周四)','2021-04-30(周五)','2021-05-01(周六)','2021-05-02(周日)','2021-05-03(周一)','2021-05-04(周二)','2021-05-05(周三)','2021-05-06(周四)','2021-05-07(周五)','2021-05-08(周六)','2021-05-09(周日)','2021-05-10(周一)','2021-05-11(周二)','2021-05-12(周三)','2021-05-13(周四)','2021-05-14(周五)','2021-05-15(周六)','2021-05-16(周日)','2021-05-17(周一)','2021-05-18(周二)','2021-05-19(周三)','2021-05-20(周四)','2021-05-21(周五)','2021-05-22(周六)','2021-05-23(周日)','2021-05-24(周一)','2021-05-25(周二)','2021-05-26(周三)','2021-05-27(周四)','2021-05-28(周五)','2021-05-29(周六)','2021-05-30(周日)','2021-05-31(周一)','2021-06-01(周二)','2021-06-02(周三)','2021-06-03(周四)','2021-06-04(周五)','2021-06-05(周六)','2021-06-06(周日)','2021-06-07(周一)','2021-06-08(周二)','2021-06-09(周三)','2021-06-10(周四)','2021-06-11(周五)','2021-06-12(周六)','2021-06-13(周日)','2021-06-14(周一)','2021-06-15(周二)','2021-06-16(周三)','2021-06-17(周四)','2021-06-18(周五)','2021-06-19(周六)','2021-06-20(周日)','2021-06-21(周一)','2021-06-22(周二)','2021-06-23(周三)','2021-06-24(周四)','2021-06-25(周五)','2021-06-26(周六)','2021-06-27(周日)','2021-06-28(周一)','2021-06-29(周二)','2021-06-30(周三)','2021-07-01(周四)','2021-07-02(周五)','2021-07-03(周六)','2021-07-04(周日)','2021-07-05(周一)','2021-07-06(周二)','2021-07-07(周三)','2021-07-08(周四)','2021-07-09(周五)','2021-07-10(周六)','2021-07-11(周日)','2021-07-12(周一)','2021-07-13(周二)','2021-07-14(周三)','2021-07-15(周四)','2021-07-16(周五)','2021-07-17(周六)','2021-07-18(周日)','2021-07-19(周一)','2021-07-20(周二)','2021-07-21(周三)','2021-07-22(周四)','2021-07-23(周五)','2021-07-24(周六)','2021-07-25(周日)','2021-07-26(周一)','2021-07-27(周二)','2021-07-28(周三)','2021-07-29(周四)','2021-07-30(周五)','2021-07-31(周六)','2021-08-01(周日)','2021-08-02(周一)','2021-08-03(周二)','2021-08-04(周三)','2021-08-05(周四)','2021-08-06(周五)','2021-08-07(周六)','2021-08-08(周日)','2021-08-09(周一)','2021-08-10(周二)','2021-08-11(周三)','2021-08-12(周四)','2021-08-13(周五)','2021-08-14(周六)','2021-08-15(周日)','2021-08-16(周一)','2021-08-17(周二)','2021-08-18(周三)','2021-08-19(周四)','2021-08-20(周五)','2021-08-21(周六)','2021-08-22(周日)','2021-08-23(周一)','2021-08-24(周二)','2021-08-25(周三)','2021-08-26(周四)','2021-08-27(周五)','2021-08-28(周六)','2021-08-29(周日)','2021-08-30(周一)','2021-08-31(周二)','2021-09-01(周三)','2021-09-02(周四)','2021-09-03(周五)','2021-09-04(周六)','2021-09-05(周日)','2021-09-06(周一)','2021-09-07(周二)','2021-09-08(周三)','2021-09-09(周四)','2021-09-10(周五)','2021-09-11(周六)','2021-09-12(周日)','2021-09-13(周一)','2021-09-14(周二)','2021-09-15(周三)','2021-09-16(周四)','2021-09-17(周五)','2021-09-18(周六)','2021-09-19(周日)','2021-09-20(周一)','2021-09-21(周二)','2021-09-22(周三)','2021-09-23(周四)','2021-09-24(周五)','2021-09-25(周六)','2021-09-26(周日)','2021-09-27(周一)','2021-09-28(周二)','2021-09-29(周三)','2021-09-30(周四)','2021-10-01(周五)','2021-10-02(周六)','2021-10-03(周日)','2021-10-04(周一)','2021-10-05(周二)','2021-10-06(周三)','2021-10-07(周四)','2021-10-08(周五)','2021-10-09(周六)','2021-10-10(周日)','2021-10-11(周一)','2021-10-12(周二)','2021-10-13(周三)','2021-10-14(周四)','2021-10-15(周五)','2021-10-16(周六)','2021-10-17(周日)','2021-10-18(周一)','2021-10-19(周二)','2021-10-20(周三)','2021-10-21(周四)','2021-10-22(周五)','2021-10-23(周六)','2021-10-24(周日)','2021-10-25(周一)','2021-10-26(周二)','2021-10-27(周三)','2021-10-28(周四)','2021-10-29(周五)','2021-10-30(周六)','2021-10-31(周日)','2021-11-01(周一)','2021-11-02(周二)','2021-11-03(周三)','2021-11-04(周四)','2021-11-05(周五)','2021-11-06(周六)','2021-11-07(周日)','2021-11-08(周一)','2021-11-09(周二)','2021-11-10(周三)','2021-11-11(周四)','2021-11-12(周五)','2021-11-13(周六)','2021-11-14(周日)','2021-11-15(周一)','2021-11-16(周二)','2021-11-17(周三)','2021-11-18(周四)','2021-11-19(周五)','2021-11-20(周六)','2021-11-21(周日)','2021-11-22(周一)','2021-11-23(周二)','2021-11-24(周三)','2021-11-25(周四)','2021-11-26(周五)','2021-11-27(周六)','2021-11-28(周日)','2021-11-29(周一)','2021-11-30(周二)','2021-12-01(周三)','2021-12-02(周四)','2021-12-03(周五)','2021-12-04(周六)','2021-12-05(周日)','2021-12-06(周一)','2021-12-07(周二)','2021-12-08(周三)','2021-12-09(周四)','2021-12-10(周五)','2021-12-11(周六)','2021-12-12(周日)','2021-12-13(周一)','2021-12-14(周二)','2021-12-15(周三)','2021-12-16(周四)','2021-12-17(周五)','2021-12-18(周六)','2021-12-19(周日)','2021-12-20(周一)','2021-12-21(周二)','2021-12-22(周三)','2021-12-23(周四)','2021-12-24(周五)','2021-12-25(周六)','2021-12-26(周日)','2021-12-27(周一)','2021-12-28(周二)','2021-12-29(周三)','2021-12-30(周四)','2021-12-31(周五)','2022-01-01(周六)','2022-01-02(周日)','2022-01-03(周一)','2022-01-04(周二)','2022-01-05(周三)','2022-01-06(周四)','2022-01-07(周五)','2022-01-08(周六)','2022-01-09(周日)','2022-01-10(周一)','2022-01-11(周二)','2022-01-12(周三)','2022-01-13(周四)','2022-01-14(周五)','2022-01-15(周六)','2022-01-16(周日)','2022-01-17(周一)','2022-01-18(周二)','2022-01-19(周三)','2022-01-20(周四)','2022-01-21(周五)','2022-01-22(周六)','2022-01-23(周日)','2022-01-24(周一)','2022-01-25(周二)','2022-01-26(周三)','2022-01-27(周四)','2022-01-28(周五)','2022-01-29(周六)','2022-01-30(周日)','2022-01-31(周一)','2022-02-01(周二)','2022-02-02(周三)','2022-02-03(周四)','2022-02-04(周五)','2022-02-05(周六)','2022-02-06(周日)','2022-02-07(周一)','2022-02-08(周二)','2022-02-09(周三)','2022-02-10(周四)','2022-02-11(周五)','2022-02-12(周六)','2022-02-13(周日)','2022-02-14(周一)','2022-02-15(周二)','2022-02-16(周三)','2022-02-17(周四)','2022-02-18(周五)','2022-02-19(周六)','2022-02-20(周日)','2022-02-21(周一)','2022-02-22(周二)','2022-02-23(周三)','2022-02-24(周四)','2022-02-25(周五)','2022-02-26(周六)','2022-02-27(周日)','2022-02-28(周一)','2022-03-01(周二)','2022-03-02(周三)','2022-03-03(周四)','2022-03-04(周五)','2022-03-05(周六)','2022-03-06(周日)','2022-03-07(周一)','2022-03-08(周二)','2022-03-09(周三)','2022-03-10(周四)','2022-03-11(周五)','2022-03-12(周六)','2022-03-13(周日)','2022-03-14(周一)','2022-03-15(周二)','2022-03-16(周三)','2022-03-17(周四)','2022-03-18(周五)','2022-03-19(周六)','2022-03-20(周日)','2022-03-21(周一)','2022-03-22(周二)','2022-03-23(周三)','2022-03-24(周四)','2022-03-25(周五)','2022-03-26(周六)','2022-03-27(周日)','2022-03-28(周一)','2022-03-29(周二)','2022-03-30(周三)','2022-03-31(周四)','2022-04-01(周五)','2022-04-02(周六)','2022-04-03(周日)','2022-04-04(周一)','2022-04-05(周二)','2022-04-06(周三)','2022-04-07(周四)','2022-04-08(周五)','2022-04-09(周六)','2022-04-10(周日)','2022-04-11(周一)','2022-04-12(周二)','2022-04-13(周三)','2022-04-14(周四)','2022-04-15(周五)','2022-04-16(周六)','2022-04-17(周日)','2022-04-18(周一)','2022-04-19(周二)','2022-04-20(周三)','2022-04-21(周四)','2022-04-22(周五)','2022-04-23(周六)','2022-04-24(周日)','2022-04-25(周一)','2022-04-26(周二)','2022-04-27(周三)','2022-04-28(周四)','2022-04-29(周五)','2022-04-30(周六)','2022-05-01(周日)','2022-05-02(周一)','2022-05-03(周二)','2022-05-04(周三)','2022-05-05(周四)','2022-05-06(周五)','2022-05-07(周六)','2022-05-08(周日)','2022-05-09(周一)','2022-05-10(周二)','2022-05-11(周三)','2022-05-12(周四)','2022-05-13(周五)','2022-05-14(周六)','2022-05-15(周日)','2022-05-16(周一)','2022-05-17(周二)','2022-05-18(周三)','2022-05-19(周四)','2022-05-20(周五)','2022-05-21(周六)','2022-05-22(周日)','2022-05-23(周一)','2022-05-24(周二)','2022-05-25(周三)','2022-05-26(周四)','2022-05-27(周五)','2022-05-28(周六)','2022-05-29(周日)','2022-05-30(周一)','2022-05-31(周二)','2022-06-01(周三)','2022-06-02(周四)','2022-06-03(周五)','2022-06-04(周六)','2022-06-05(周日)','2022-06-06(周一)','2022-06-07(周二)','2022-06-08(周三)','2022-06-09(周四)','2022-06-10(周五)','2022-06-11(周六)','2022-06-12(周日)','2022-06-13(周一)','2022-06-14(周二)','2022-06-15(周三)','2022-06-16(周四)','2022-06-17(周五)','2022-06-18(周六)','2022-06-19(周日)','2022-06-20(周一)','2022-06-21(周二)','2022-06-22(周三)','2022-06-23(周四)','2022-06-24(周五)','2022-06-25(周六)','2022-06-26(周日)','2022-06-27(周一)','2022-06-28(周二)','2022-06-29(周三)','2022-06-30(周四)','2022-07-01(周五)','2022-07-02(周六)','2022-07-03(周日)','2022-07-04(周一)','2022-07-05(周二)','2022-07-06(周三)','2022-07-07(周四)','2022-07-08(周五)','2022-07-09(周六)','2022-07-10(周日)','2022-07-11(周一)','2022-07-12(周二)','2022-07-13(周三)','2022-07-14(周四)','2022-07-15(周五)','2022-07-16(周六)','2022-07-17(周日)','2022-07-18(周一)','2022-07-19(周二)','2022-07-20(周三)','2022-07-21(周四)','2022-07-22(周五)','2022-07-23(周六)','2022-07-24(周日)','2022-07-25(周一)','2022-07-26(周二)','2022-07-27(周三)','2022-07-28(周四)','2022-07-29(周五)','2022-07-30(周六)','2022-07-31(周日)','2022-08-01(周一)','2022-08-02(周二)','2022-08-03(周三)','2022-08-04(周四)','2022-08-05(周五)','2022-08-06(周六)','2022-08-07(周日)','2022-08-08(周一)','2022-08-09(周二)','2022-08-10(周三)','2022-08-11(周四)','2022-08-12(周五)','2022-08-13(周六)','2022-08-14(周日)','2022-08-15(周一)','2022-08-16(周二)','2022-08-17(周三)','2022-08-18(周四)','2022-08-19(周五)','2022-08-20(周六)','2022-08-21(周日)','2022-08-22(周一)','2022-08-23(周二)','2022-08-24(周三)','2022-08-25(周四)','2022-08-26(周五)','2022-08-27(周六)','2022-08-28(周日)','2022-08-29(周一)','2022-08-30(周二)','2022-08-31(周三)','2022-09-01(周四)','2022-09-02(周五)','2022-09-03(周六)','2022-09-04(周日)','2022-09-05(周一)','2022-09-06(周二)','2022-09-07(周三)','2022-09-08(周四)','2022-09-09(周五)','2022-09-10(周六)','2022-09-11(周日)','2022-09-12(周一)','2022-09-13(周二)','2022-09-14(周三)','2022-09-15(周四)','2022-09-16(周五)','2022-09-17(周六)','2022-09-18(周日)','2022-09-19(周一)','2022-09-20(周二)','2022-09-21(周三)','2022-09-22(周四)','2022-09-23(周五)','2022-09-24(周六)','2022-09-25(周日)','2022-09-26(周一)','2022-09-27(周二)','2022-09-28(周三)','2022-09-29(周四)','2022-09-30(周五)','2022-10-01(周六)','2022-10-02(周日)','2022-10-03(周一)','2022-10-04(周二)','2022-10-05(周三)','2022-10-06(周四)','2022-10-07(周五)','2022-10-08(周六)','2022-10-09(周日)','2022-10-10(周一)','2022-10-11(周二)','2022-10-12(周三)','2022-10-13(周四)','2022-10-14(周五)','2022-10-15(周六)','2022-10-16(周日)','2022-10-17(周一)','2022-10-18(周二)','2022-10-19(周三)','2022-10-20(周四)','2022-10-21(周五)','2022-10-22(周六)','2022-10-23(周日)','2022-10-24(周一)','2022-10-25(周二)','2022-10-26(周三)','2022-10-27(周四)','2022-10-28(周五)','2022-10-29(周六)','2022-10-30(周日)','2022-10-31(周一)','2022-11-01(周二)','2022-11-02(周三)','2022-11-03(周四)','2022-11-04(周五)','2022-11-05(周六)','2022-11-06(周日)','2022-11-07(周一)','2022-11-08(周二)','2022-11-09(周三)','2022-11-10(周四)','2022-11-11(周五)','2022-11-12(周六)','2022-11-13(周日)','2022-11-14(周一)','2022-11-15(周二)','2022-11-16(周三)','2022-11-17(周四)','2022-11-18(周五)','2022-11-19(周六)','2022-11-20(周日)','2022-11-21(周一)','2022-11-22(周二)','2022-11-23(周三)','2022-11-24(周四)','2022-11-25(周五)','2022-11-26(周六)','2022-11-27(周日)','2022-11-28(周一)','2022-11-29(周二)','2022-11-30(周三)','2022-12-01(周四)','2022-12-02(周五)','2022-12-03(周六)','2022-12-04(周日)','2022-12-05(周一)','2022-12-06(周二)','2022-12-07(周三)','2022-12-08(周四)','2022-12-09(周五)','2022-12-10(周六)','2022-12-11(周日)','2022-12-12(周一)','2022-12-13(周二)','2022-12-14(周三)','2022-12-15(周四)','2022-12-16(周五)','2022-12-17(周六)','2022-12-18(周日)','2022-12-19(周一)','2022-12-20(周二)','2022-12-21(周三)','2022-12-22(周四)','2022-12-23(周五)','2022-12-24(周六)','2022-12-25(周日)','2022-12-26(周一)','2022-12-27(周二)','2022-12-28(周三)','2022-12-29(周四)','2022-12-30(周五)','2022-12-31(周六)','2023-01-01(周日)','2023-01-02(周一)','2023-01-03(周二)','2023-01-04(周三)','2023-01-05(周四)','2023-01-06(周五)','2023-01-07(周六)','2023-01-08(周日)','2023-01-09(周一)','2023-01-10(周二)','2023-01-11(周三)','2023-01-12(周四)','2023-01-13(周五)','2023-01-14(周六)','2023-01-15(周日)','2023-01-16(周一)','2023-01-17(周二)','2023-01-18(周三)','2023-01-19(周四)','2023-01-20(周五)','2023-01-21(周六)','2023-01-22(周日)','2023-01-23(周一)','2023-01-24(周二)','2023-01-25(周三)','2023-01-26(周四)','2023-01-27(周五)','2023-01-28(周六)','2023-01-29(周日)','2023-01-30(周一)','2023-01-31(周二)',
      ]
    }
  ],
  yAxis: [
    {
      type: 'value',
      interval: 0.5, // 步长
      min: -2, // 起始
      max: 2 // 终止
    }
  ],
  series: [
    {
      name: 'LXL',
      type: 'line',
      connectNulls: true,
      areaStyle: {},
      emphasis: {
        focus: 'series'
      },
      smooth: true,
      itemStyle: {
        normal: {
          lineStyle: {
            color: 'rgb(255, 153, 255,1)'
          },
          label: {
            show: true,
            position: 'top',
            textStyle: {
              fontSize: 8,
              color: '#000'
            }
          }
        }
      },
      data: [
        0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.2,-0.0,-0.0,0.8,0.2,-1.0,0.6,-0.0,-0.0,-0.6,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.4,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-1.2,0.6,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.6,-0.0,-0.0,-0.0,-0.0,-0.0,0.2,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,0.2,-1.8,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.6,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,0.6,0.7,-0.9,-0.0,0.4,-1.4,0.3,1.2,0.4,-0.0,-0.4,-0.3,-0.6,-0.0,-0.6,0.2,-0.3,-0.6,-0.4,-0.1,-0.3,0.8,-0.0,-1.0,0.2,-0.0,1.0,-0.0,-0.9,0.2,-1.2,0.3,0.3,0.5,-0.9,-0.9,0.6,-1.1,0.9,-0.2,-0.3,-0.5,-0.8,-0.2,-0.2,0.1,-0.3,-0.7,-0.3,-0.5,-0.4,0.3,0.4,0.1,0.1,-0.3,-0.2,-0.4,0.2,-0.1,-0.0,-0.5,-0.7,-0.1,0.4,0.6,-0.7,-0.8,-0.7,-0.6,0.3,-0.8,-0.1,-0.4,-0.2,0.3,-0.7,-0.0,-0.0,0.1,0.1,-0.5,-0.2,-1.7,0.2,-0.6,-0.2,-0.1,-0.0,0.4,-0.8,-0.5,0.3,0.2,-0.2,-0.1,-0.5,-1.0,0.1,-0.3,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,
      ]
    },
    {
      name: 'LJX',
      type: 'line',
      connectNulls: true,
      areaStyle: {},
      emphasis: {
        focus: 'series'
      },
      smooth: true,
      itemStyle: {
        normal: {
          lineStyle: {
            color: 'rgb(128, 222, 255,1)'
          },
          label: {
            show: true,
            position: 'top',
            textStyle: {
              fontSize: 8,
              color: '#000'
            }
          }
        }
      },
      data: [
        0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-1.2,-0.0,-0.0,-0.0,-0.0,-0.0,-1.4,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-1.0,-0.1,-0.3,-0.2,-0.2,-0.2,-0.8,0.3,1.7,-0.9,-0.6,-1.0,-0.3,0.2,-0.8,-0.7,-0.8,0.6,-1.0,-0.1,-0.1,-0.4,-0.5,0.1,0.3,-0.7,1.0,-1.5,-0.8,0.9,-1.2,-0.3,-0.1,-0.3,-0.9,-0.3,0.1,-0.3,-0.6,0.2,-0.1,-1.3,-0.2,0.3,-0.0,-0.6,-0.0,-1.1,-1.3,0.6,0.5,-0.4,-0.5,-0.3,-0.1,-1.3,-0.5,0.6,-0.6,-0.3,-0.0,-0.8,-0.4,-0.3,1.2,-0.8,-0.3,-0.8,-0.9,-0.3,-0.6,0.8,-0.0,-0.5,-0.4,-0.2,-0.0,-0.7,-1.1,-0.0,-0.0,-0.0,-0.0,-0.0,-1.5,0.5,-0.5,-0.2,0.3,-0.5,-0.0,-0.0,0.8,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,
      ]
    }
  ]
};




        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>

]]></content>
      <categories>
        <category>体重</category>
      </categories>
      <tags>
        <tag>体重</tag>
      </tags>
  </entry>
  <entry>
    <title>2022 减肥减肥</title>
    <url>/2022/12/10/shenghuo/weight/echart-2022-jian-fei-jian-fei/</url>
    <content><![CDATA[<script src="https://cdn.jsdelivr.net/npm/echarts@4.8.0/dist/echarts.min.js"></script>
<!-- 为 ECharts 准备一个具备大小（宽高）的 DOM -->
<div id="main" style="width: 800px;height:30px;"></div>
<script type="text/javascript">
  // 基于准备好的dom，初始化echarts实例
  var myChart = echarts.init(document.getElementById('main'));
  // 指定图表的配置项和数据
  var option = {
    ...
  };
  // 使用刚指定的配置项和数据显示图表。
  myChart.setOption(option);
  // 刷新调整
  window.onresize = function () {
    myChart.resize();
  }
</script>

<div id="echarts7771" style="width: 90%;height: 800px;margin: 0 auto"></div>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts7771'));

        // 指定图表的配置项和数据
        var option = option = {
  color: [
    'rgb(255, 153, 255,1)',
    'rgb(255, 153, 255,1)',
    'rgb(204, 242, 255,0.5)',
    'rgb(204, 242, 255,0.5)'
  ],
  title: {
    text: '2022',
    textStyle: {
      //文字颜色
      color: '#999',
      //字体风格,'normal','italic','oblique'
      fontStyle: 'normal',
      //字体粗细 'normal','bold','bolder','lighter',100 | 200 | 300 | 400...
      fontWeight: 'bold',
      //字体系列
      fontFamily: 'sans-serif',
      //字体大小
      fontSize: 18
    }
  },
  tooltip: {
    trigger: 'axis',
    axisPointer: {
      type: 'cross',
      label: {
        backgroundColor: '#6a7985'
      }
    }
  },
  legend: {
    textStyle: {
      fontSize: 18, //字体大小
      color: '#999' //字体颜色
    },
    data: ['LXL', 'LJX', 'LXLBase', 'LJXBase']
  },
  dataZoom: [
    {
      type: 'slider',
      show: true, //flase直接隐藏图形
      xAxisIndex: [0],
      left: '6%', //滚动条靠左侧的百分比
      bottom: -5,
      start: 95, //滚动条的起始位置
      end: 100 //滚动条的截止位置（按比例分割你的柱状图x轴长度）
    }
  ],
  toolbox: {
    feature: {
      saveAsImage: {}
    }
  },
  grid: {
    left: '4%',
    right: '3%',
    bottom: '4%',
    containLabel: true
  },
  xAxis: [
    {
      type: 'category',
      boundaryGap: false,
      data: [
'2019-08-01','2019-08-02','2019-08-03','2019-08-04','2019-08-05','2019-08-06','2019-08-07','2019-08-08','2019-08-09','2019-08-10','2019-08-11','2019-08-12','2019-08-13','2019-08-14','2019-08-15','2019-08-16','2019-08-17','2019-08-18','2019-08-19','2019-08-20','2019-08-21','2019-08-22','2019-08-23','2019-08-24','2019-08-25','2019-08-26','2019-08-27','2019-08-28','2019-08-29','2019-08-30','2019-08-31','2019-09-01','2019-09-02','2019-09-03','2019-09-04','2019-09-05','2019-09-06','2019-09-07','2019-09-08','2019-09-09','2019-09-10','2019-09-11','2019-09-12','2019-09-13','2019-09-14','2019-09-15','2019-09-16','2019-09-17','2019-09-18','2019-09-19','2019-09-20','2019-09-21','2019-09-22','2019-09-23','2019-09-24','2019-09-25','2019-09-26','2019-09-27','2019-09-28','2019-09-29','2019-09-30','2019-10-01','2019-10-02','2019-10-03','2019-10-04','2019-10-05','2019-10-06','2019-10-07','2019-10-08','2019-10-09','2019-10-10','2019-10-11','2019-10-12','2019-10-13','2019-10-14','2019-10-15','2019-10-16','2019-10-17','2019-10-18','2019-10-19','2019-10-20','2019-10-21','2019-10-22','2019-10-23','2019-10-24','2019-10-25','2019-10-26','2019-10-27','2019-10-28','2019-10-29','2019-10-30','2019-10-31','2019-11-01','2019-11-02','2019-11-03','2019-11-04','2019-11-05','2019-11-06','2019-11-07','2019-11-08','2019-11-09','2019-11-10','2019-11-11','2019-11-12','2019-11-13','2019-11-14','2019-11-15','2019-11-16','2019-11-17','2019-11-18','2019-11-19','2019-11-20','2019-11-21','2019-11-22','2019-11-23','2019-11-24','2019-11-25','2019-11-26','2019-11-27','2019-11-28','2019-11-29','2019-11-30','2019-12-01','2019-12-02','2019-12-03','2019-12-04','2019-12-05','2019-12-06','2019-12-07','2019-12-08','2019-12-09','2019-12-10','2019-12-11','2019-12-12','2019-12-13','2019-12-14','2019-12-15','2019-12-16','2019-12-17','2019-12-18','2019-12-19','2019-12-20','2019-12-21','2019-12-22','2019-12-23','2019-12-24','2019-12-25','2019-12-26','2019-12-27','2019-12-28','2019-12-29','2019-12-30','2019-12-31','2020-01-01','2020-01-02','2020-01-03','2020-01-04','2020-01-05','2020-01-06','2020-01-07','2020-01-08','2020-01-09','2020-01-10','2020-01-11','2020-01-12','2020-01-13','2020-01-14','2020-01-15','2020-01-16','2020-01-17','2020-01-18','2020-01-19','2020-01-20','2020-01-21','2020-01-22','2020-01-23','2020-01-24','2020-01-25','2020-01-26','2020-01-27','2020-01-28','2020-01-29','2020-01-30','2020-01-31','2020-02-01','2020-02-02','2020-02-03','2020-02-04','2020-02-05','2020-02-06','2020-02-07','2020-02-08','2020-02-09','2020-02-10','2020-02-11','2020-02-12','2020-02-13','2020-02-14','2020-02-15','2020-02-16','2020-02-17','2020-02-18','2020-02-19','2020-02-20','2020-02-21','2020-02-22','2020-02-23','2020-02-24','2020-02-25','2020-02-26','2020-02-27','2020-02-28','2020-02-29','2020-03-01','2020-03-02','2020-03-03','2020-03-04','2020-03-05','2020-03-06','2020-03-07','2020-03-08','2020-03-09','2020-03-10','2020-03-11','2020-03-12','2020-03-13','2020-03-14','2020-03-15','2020-03-16','2020-03-17','2020-03-18','2020-03-19','2020-03-20','2020-03-21','2020-03-22','2020-03-23','2020-03-24','2020-03-25','2020-03-26','2020-03-27','2020-03-28','2020-03-29','2020-03-30','2020-03-31','2020-04-01','2020-04-02','2020-04-03','2020-04-04','2020-04-05','2020-04-06','2020-04-07','2020-04-08','2020-04-09','2020-04-10','2020-04-11','2020-04-12','2020-04-13','2020-04-14','2020-04-15','2020-04-16','2020-04-17','2020-04-18','2020-04-19','2020-04-20','2020-04-21','2020-04-22','2020-04-23','2020-04-24','2020-04-25','2020-04-26','2020-04-27','2020-04-28','2020-04-29','2020-04-30','2020-05-01','2020-05-02','2020-05-03','2020-05-04','2020-05-05','2020-05-06','2020-05-07','2020-05-08','2020-05-09','2020-05-10','2020-05-11','2020-05-12','2020-05-13','2020-05-14','2020-05-15','2020-05-16','2020-05-17','2020-05-18','2020-05-19','2020-05-20','2020-05-21','2020-05-22','2020-05-23','2020-05-24','2020-05-25','2020-05-26','2020-05-27','2020-05-28','2020-05-29','2020-05-30','2020-05-31','2020-06-01','2020-06-02','2020-06-03','2020-06-04','2020-06-05','2020-06-06','2020-06-07','2020-06-08','2020-06-09','2020-06-10','2020-06-11','2020-06-12','2020-06-13','2020-06-14','2020-06-15','2020-06-16','2020-06-17','2020-06-18','2020-06-19','2020-06-20','2020-06-21','2020-06-22','2020-06-23','2020-06-24','2020-06-25','2020-06-26','2020-06-27','2020-06-28','2020-06-29','2020-06-30','2020-07-01','2020-07-02','2020-07-03','2020-07-04','2020-07-05','2020-07-06','2020-07-07','2020-07-08','2020-07-09','2020-07-10','2020-07-11','2020-07-12','2020-07-13','2020-07-14','2020-07-15','2020-07-16','2020-07-17','2020-07-18','2020-07-19','2020-07-20','2020-07-21','2020-07-22','2020-07-23','2020-07-24','2020-07-25','2020-07-26','2020-07-27','2020-07-28','2020-07-29','2020-07-30','2020-07-31','2020-08-01','2020-08-02','2020-08-03','2020-08-04','2020-08-05','2020-08-06','2020-08-07','2020-08-08','2020-08-09','2020-08-10','2020-08-11','2020-08-12','2020-08-13','2020-08-14','2020-08-15','2020-08-16','2020-08-17','2020-08-18','2020-08-19','2020-08-20','2020-08-21','2020-08-22','2020-08-23','2020-08-24','2020-08-25','2020-08-26','2020-08-27','2020-08-28','2020-08-29','2020-08-30','2020-08-31','2020-09-01','2020-09-02','2020-09-03','2020-09-04','2020-09-05','2020-09-06','2020-09-07','2020-09-08','2020-09-09','2020-09-10','2020-09-11','2020-09-12','2020-09-13','2020-09-14','2020-09-15','2020-09-16','2020-09-17','2020-09-18','2020-09-19','2020-09-20','2020-09-21','2020-09-22','2020-09-23','2020-09-24','2020-09-25','2020-09-26','2020-09-27','2020-09-28','2020-09-29','2020-09-30','2020-10-01','2020-10-02','2020-10-03','2020-10-04','2020-10-05','2020-10-06','2020-10-07','2020-10-08','2020-10-09','2020-10-10','2020-10-11','2020-10-12','2020-10-13','2020-10-14','2020-10-15','2020-10-16','2020-10-17','2020-10-18','2020-10-19','2020-10-20','2020-10-21','2020-10-22','2020-10-23','2020-10-24','2020-10-25','2020-10-26','2020-10-27','2020-10-28','2020-10-29','2020-10-30','2020-10-31','2020-11-01','2020-11-02','2020-11-03','2020-11-04','2020-11-05','2020-11-06','2020-11-07','2020-11-08','2020-11-09','2020-11-10','2020-11-11','2020-11-12','2020-11-13','2020-11-14','2020-11-15','2020-11-16','2020-11-17','2020-11-18','2020-11-19','2020-11-20','2020-11-21','2020-11-22','2020-11-23','2020-11-24','2020-11-25','2020-11-26','2020-11-27','2020-11-28','2020-11-29','2020-11-30','2020-12-01','2020-12-02','2020-12-03','2020-12-04','2020-12-05','2020-12-06','2020-12-07','2020-12-08','2020-12-09','2020-12-10','2020-12-11','2020-12-12','2020-12-13','2020-12-14','2020-12-15','2020-12-16','2020-12-17','2020-12-18','2020-12-19','2020-12-20','2020-12-21','2020-12-22','2020-12-23','2020-12-24','2020-12-25','2020-12-26','2020-12-27','2020-12-28','2020-12-29','2020-12-30','2020-12-31','2021-01-01','2021-01-02','2021-01-03','2021-01-04','2021-01-05','2021-01-06','2021-01-07','2021-01-08','2021-01-09','2021-01-10','2021-01-11','2021-01-12','2021-01-13','2021-01-14','2021-01-15','2021-01-16','2021-01-17','2021-01-18','2021-01-19','2021-01-20','2021-01-21','2021-01-22','2021-01-23','2021-01-24','2021-01-25','2021-01-26','2021-01-27','2021-01-28','2021-01-29','2021-01-30','2021-01-31','2021-02-01','2021-02-02','2021-02-03','2021-02-04','2021-02-05','2021-02-06','2021-02-07','2021-02-08','2021-02-09','2021-02-10','2021-02-11','2021-02-12','2021-02-13','2021-02-14','2021-02-15','2021-02-16','2021-02-17','2021-02-18','2021-02-19','2021-02-20','2021-02-21','2021-02-22','2021-02-23','2021-02-24','2021-02-25','2021-02-26','2021-02-27','2021-02-28','2021-03-01','2021-03-02','2021-03-03','2021-03-04','2021-03-05','2021-03-06','2021-03-07','2021-03-08','2021-03-09','2021-03-10','2021-03-11','2021-03-12','2021-03-13','2021-03-14','2021-03-15','2021-03-16','2021-03-17','2021-03-18','2021-03-19','2021-03-20','2021-03-21','2021-03-22','2021-03-23','2021-03-24','2021-03-25','2021-03-26','2021-03-27','2021-03-28','2021-03-29','2021-03-30','2021-03-31','2021-04-01','2021-04-02','2021-04-03','2021-04-04','2021-04-05','2021-04-06','2021-04-07','2021-04-08','2021-04-09','2021-04-10','2021-04-11','2021-04-12','2021-04-13','2021-04-14','2021-04-15','2021-04-16','2021-04-17','2021-04-18','2021-04-19','2021-04-20','2021-04-21','2021-04-22','2021-04-23','2021-04-24','2021-04-25','2021-04-26','2021-04-27','2021-04-28','2021-04-29','2021-04-30','2021-05-01','2021-05-02','2021-05-03','2021-05-04','2021-05-05','2021-05-06','2021-05-07','2021-05-08','2021-05-09','2021-05-10','2021-05-11','2021-05-12','2021-05-13','2021-05-14','2021-05-15','2021-05-16','2021-05-17','2021-05-18','2021-05-19','2021-05-20','2021-05-21','2021-05-22','2021-05-23','2021-05-24','2021-05-25','2021-05-26','2021-05-27','2021-05-28','2021-05-29','2021-05-30','2021-05-31','2021-06-01','2021-06-02','2021-06-03','2021-06-04','2021-06-05','2021-06-06','2021-06-07','2021-06-08','2021-06-09','2021-06-10','2021-06-11','2021-06-12','2021-06-13','2021-06-14','2021-06-15','2021-06-16','2021-06-17','2021-06-18','2021-06-19','2021-06-20','2021-06-21','2021-06-22','2021-06-23','2021-06-24','2021-06-25','2021-06-26','2021-06-27','2021-06-28','2021-06-29','2021-06-30','2021-07-01','2021-07-02','2021-07-03','2021-07-04','2021-07-05','2021-07-06','2021-07-07','2021-07-08','2021-07-09','2021-07-10','2021-07-11','2021-07-12','2021-07-13','2021-07-14','2021-07-15','2021-07-16','2021-07-17','2021-07-18','2021-07-19','2021-07-20','2021-07-21','2021-07-22','2021-07-23','2021-07-24','2021-07-25','2021-07-26','2021-07-27','2021-07-28','2021-07-29','2021-07-30','2021-07-31','2021-08-01','2021-08-02','2021-08-03','2021-08-04','2021-08-05','2021-08-06','2021-08-07','2021-08-08','2021-08-09','2021-08-10','2021-08-11','2021-08-12','2021-08-13','2021-08-14','2021-08-15','2021-08-16','2021-08-17','2021-08-18','2021-08-19','2021-08-20','2021-08-21','2021-08-22','2021-08-23','2021-08-24','2021-08-25','2021-08-26','2021-08-27','2021-08-28','2021-08-29','2021-08-30','2021-08-31','2021-09-01','2021-09-02','2021-09-03','2021-09-04','2021-09-05','2021-09-06','2021-09-07','2021-09-08','2021-09-09','2021-09-10','2021-09-11','2021-09-12','2021-09-13','2021-09-14','2021-09-15','2021-09-16','2021-09-17','2021-09-18','2021-09-19','2021-09-20','2021-09-21','2021-09-22','2021-09-23','2021-09-24','2021-09-25','2021-09-26','2021-09-27','2021-09-28','2021-09-29','2021-09-30','2021-10-01','2021-10-02','2021-10-03','2021-10-04','2021-10-05','2021-10-06','2021-10-07','2021-10-08','2021-10-09','2021-10-10','2021-10-11','2021-10-12','2021-10-13','2021-10-14','2021-10-15','2021-10-16','2021-10-17','2021-10-18','2021-10-19','2021-10-20','2021-10-21','2021-10-22','2021-10-23','2021-10-24','2021-10-25','2021-10-26','2021-10-27','2021-10-28','2021-10-29','2021-10-30','2021-10-31','2021-11-01','2021-11-02','2021-11-03','2021-11-04','2021-11-05','2021-11-06','2021-11-07','2021-11-08','2021-11-09','2021-11-10','2021-11-11','2021-11-12','2021-11-13','2021-11-14','2021-11-15','2021-11-16','2021-11-17','2021-11-18','2021-11-19','2021-11-20','2021-11-21','2021-11-22','2021-11-23','2021-11-24','2021-11-25','2021-11-26','2021-11-27','2021-11-28','2021-11-29','2021-11-30','2021-12-01','2021-12-02','2021-12-03','2021-12-04','2021-12-05','2021-12-06','2021-12-07','2021-12-08','2021-12-09','2021-12-10','2021-12-11','2021-12-12','2021-12-13','2021-12-14','2021-12-15','2021-12-16','2021-12-17','2021-12-18','2021-12-19','2021-12-20','2021-12-21','2021-12-22','2021-12-23','2021-12-24','2021-12-25','2021-12-26','2021-12-27','2021-12-28','2021-12-29','2021-12-30','2021-12-31','2022-01-01','2022-01-02','2022-01-03','2022-01-04','2022-01-05','2022-01-06','2022-01-07','2022-01-08','2022-01-09','2022-01-10','2022-01-11','2022-01-12','2022-01-13','2022-01-14','2022-01-15','2022-01-16','2022-01-17','2022-01-18','2022-01-19','2022-01-20','2022-01-21','2022-01-22','2022-01-23','2022-01-24','2022-01-25','2022-01-26','2022-01-27','2022-01-28','2022-01-29','2022-01-30','2022-01-31','2022-02-01','2022-02-02','2022-02-03','2022-02-04','2022-02-05','2022-02-06','2022-02-07','2022-02-08','2022-02-09','2022-02-10','2022-02-11','2022-02-12','2022-02-13','2022-02-14','2022-02-15','2022-02-16','2022-02-17','2022-02-18','2022-02-19','2022-02-20','2022-02-21','2022-02-22','2022-02-23','2022-02-24','2022-02-25','2022-02-26','2022-02-27','2022-02-28','2022-03-01','2022-03-02','2022-03-03','2022-03-04','2022-03-05','2022-03-06','2022-03-07','2022-03-08','2022-03-09','2022-03-10','2022-03-11','2022-03-12','2022-03-13','2022-03-14','2022-03-15','2022-03-16','2022-03-17','2022-03-18','2022-03-19','2022-03-20','2022-03-21','2022-03-22','2022-03-23','2022-03-24','2022-03-25','2022-03-26','2022-03-27','2022-03-28','2022-03-29','2022-03-30','2022-03-31','2022-04-01','2022-04-02','2022-04-03','2022-04-04','2022-04-05','2022-04-06','2022-04-07','2022-04-08','2022-04-09','2022-04-10','2022-04-11','2022-04-12','2022-04-13','2022-04-14','2022-04-15','2022-04-16','2022-04-17','2022-04-18','2022-04-19','2022-04-20','2022-04-21','2022-04-22','2022-04-23','2022-04-24','2022-04-25','2022-04-26','2022-04-27','2022-04-28','2022-04-29','2022-04-30','2022-05-01','2022-05-02','2022-05-03','2022-05-04','2022-05-05','2022-05-06','2022-05-07','2022-05-08','2022-05-09','2022-05-10','2022-05-11','2022-05-12','2022-05-13','2022-05-14','2022-05-15','2022-05-16','2022-05-17','2022-05-18','2022-05-19','2022-05-20','2022-05-21','2022-05-22','2022-05-23','2022-05-24','2022-05-25','2022-05-26','2022-05-27','2022-05-28','2022-05-29','2022-05-30','2022-05-31','2022-06-01','2022-06-02','2022-06-03','2022-06-04','2022-06-05','2022-06-06','2022-06-07','2022-06-08','2022-06-09','2022-06-10','2022-06-11','2022-06-12','2022-06-13','2022-06-14','2022-06-15','2022-06-16','2022-06-17','2022-06-18','2022-06-19','2022-06-20','2022-06-21','2022-06-22','2022-06-23','2022-06-24','2022-06-25','2022-06-26','2022-06-27','2022-06-28','2022-06-29','2022-06-30','2022-07-01','2022-07-02','2022-07-03','2022-07-04','2022-07-05','2022-07-06','2022-07-07','2022-07-08','2022-07-09','2022-07-10','2022-07-11','2022-07-12','2022-07-13','2022-07-14','2022-07-15','2022-07-16','2022-07-17','2022-07-18','2022-07-19','2022-07-20','2022-07-21','2022-07-22','2022-07-23','2022-07-24','2022-07-25','2022-07-26','2022-07-27','2022-07-28','2022-07-29','2022-07-30','2022-07-31','2022-08-01','2022-08-02','2022-08-03','2022-08-04','2022-08-05','2022-08-06','2022-08-07','2022-08-08','2022-08-09','2022-08-10','2022-08-11','2022-08-12','2022-08-13','2022-08-14','2022-08-15','2022-08-16','2022-08-17','2022-08-18','2022-08-19','2022-08-20','2022-08-21','2022-08-22','2022-08-23','2022-08-24','2022-08-25','2022-08-26','2022-08-27','2022-08-28','2022-08-29','2022-08-30','2022-08-31','2022-09-01','2022-09-02','2022-09-03','2022-09-04','2022-09-05','2022-09-06','2022-09-07','2022-09-08','2022-09-09','2022-09-10','2022-09-11','2022-09-12','2022-09-13','2022-09-14','2022-09-15','2022-09-16','2022-09-17','2022-09-18','2022-09-19','2022-09-20','2022-09-21','2022-09-22','2022-09-23','2022-09-24','2022-09-25','2022-09-26','2022-09-27','2022-09-28','2022-09-29','2022-09-30','2022-10-01','2022-10-02','2022-10-03','2022-10-04','2022-10-05','2022-10-06','2022-10-07','2022-10-08','2022-10-09','2022-10-10','2022-10-11','2022-10-12','2022-10-13','2022-10-14','2022-10-15','2022-10-16','2022-10-17','2022-10-18','2022-10-19','2022-10-20','2022-10-21','2022-10-22','2022-10-23','2022-10-24','2022-10-25','2022-10-26','2022-10-27','2022-10-28','2022-10-29','2022-10-30','2022-10-31','2022-11-01','2022-11-02','2022-11-03','2022-11-04','2022-11-05','2022-11-06','2022-11-07','2022-11-08','2022-11-09','2022-11-10','2022-11-11','2022-11-12','2022-11-13','2022-11-14','2022-11-15','2022-11-16','2022-11-17','2022-11-18','2022-11-19','2022-11-20','2022-11-21','2022-11-22','2022-11-23','2022-11-24','2022-11-25','2022-11-26','2022-11-27','2022-11-28','2022-11-29','2022-11-30','2022-12-01','2022-12-02','2022-12-03','2022-12-04','2022-12-05','2022-12-06','2022-12-07','2022-12-08','2022-12-09','2022-12-10','2022-12-11','2022-12-12','2022-12-13','2022-12-14','2022-12-15','2022-12-16','2022-12-17','2022-12-18','2022-12-19','2022-12-20','2022-12-21','2022-12-22','2022-12-23','2022-12-24','2022-12-25','2022-12-26','2022-12-27','2022-12-28','2022-12-29','2022-12-30','2022-12-31','2023-01-01','2023-01-02','2023-01-03','2023-01-04','2023-01-05','2023-01-06','2023-01-07','2023-01-08','2023-01-09','2023-01-10','2023-01-11','2023-01-12','2023-01-13','2023-01-14','2023-01-15','2023-01-16','2023-01-17','2023-01-18','2023-01-19','2023-01-20','2023-01-21','2023-01-22','2023-01-23','2023-01-24','2023-01-25','2023-01-26','2023-01-27','2023-01-28','2023-01-29','2023-01-30','2023-01-31',
      ]
    }
  ],
  yAxis: [
    {
      type: 'value',
      interval: 5, // 步长
      min: 90, // 起始
      max: 160 // 终止
    }
  ],
  series: [
    {
      name: 'LXL',
      type: 'line',
      connectNulls: true,
      areaStyle: {},
      emphasis: {
        focus: 'series'
      },
      smooth: true,
      itemStyle: {
        normal: {
          lineStyle: {
            color: 'rgb(255, 153, 255,1)'
          },
          label: {
            show: true,
            position: 'top',
            textStyle: {
              fontSize: 8,
              color: '#000'
            }
          }
        }
      },
      data: [
        94.0,,,,,,,,,,,,,,,,,,,,,,,,,,,94.4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,96.6,,,,,,,,,98.0,,,,,,,,,,99.8,,,,,,96.6,,,,,,,,,98.6,,,,,,,,,97.4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,99.8,99.6,,99.0,99.8,100,99.0,99.6,,99.4,98.8,,99.4,,,,,99.6,99.2,,,,,100.2,,,,,,,,,,,,,,,,,,101.2,,,102.4,,101.2,,,,,102.4,101.2,101.8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,102.4,,,,,,,102.8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,102.8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,110.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,111.2,,,,,,,,,,,,,,,,109.8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,115.8,,,112.8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,114.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,115.4,114.8,,,114.2,,113.0,113.2,,,,,114.0,,,,,115.8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,117.2,,,,116.2,,115.6,,115.6,,,115.8,,115.6,115.8,114.0,,,,115.2,,,,,,,,,,,,114.2,113.6,,,,,114.0,,,,,,,114.6,,,,112.8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,120.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,122.4,,,,,,,120.8,,,,,,,,120.8,,,120.8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,120.6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,127.0,,127.0,127.6,128.3,127.4,127.4,127.8,126.4,126.7,127.9,128.3,128.3,127.9,127.6,127.0,127.0,126.4,126.6,126.3,125.7,125.3,125.2,124.9,125.7,125.7,124.7,124.9,124.9,125.9,125.9,125.0,125.2,124.0,124.3,124.6,125.1,124.2,123.3,123.9,122.8,123.7,123.5,123.2,122.7,121.9,121.7,121.5,121.6,121.3,120.6,120.3,119.8,119.4,119.7,120.1,120.2,120.3,120.0,119.8,119.4,119.6,119.5,119.5,119.0,118.3,118.2,118.6,119.2,118.5,117.7,117.0,116.4,116.7,115.9,115.8,115.4,115.2,115.5,114.8,114.8,114.8,114.9,115.0,114.5,114.3,112.6,112.8,112.2,112.0,111.9,111.9,112.3,111.5,111.0,111.3,111.5,111.3,111.2,110.7,109.7,109.8,109.5,,,,,109.8,,,,,,109.8,,,,,106.9,,,,,,,,,,107.9,,,,,,,,,108.8,,,,,,,107.7,
      ]
    },
    {
      name: 'LXLBase',
      type: 'line',
      connectNulls: true,
      areaStyle: {},
      emphasis: {
        focus: 'series'
      },
      smooth: true,
      itemStyle: {
        normal: {
          lineStyle: {
            color: 'rgb(255, 153, 255,1)'
          },
          label: {
            show: true,
            position: 'top',
            textStyle: {
              fontSize: 8,
              color: '#000'
            }
          }
        }
      },
      data: [

      ]
    },
    {
      name: 'LJX',
      type: 'line',
      connectNulls: true,
      areaStyle: {},
      emphasis: {
        focus: 'series'
      },
      smooth: true,
      itemStyle: {
        normal: {
          lineStyle: {
            color: 'rgb(128, 222, 255,1)'
          },
          label: {
            show: true,
            position: 'top',
            textStyle: {
              fontSize: 8,
              color: '#000'
            }
          }
        }
      },
      data: [
        ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,120,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,129,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,136.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,137.4,136.2,,,137.2,,136.6,135.2,,,,,135.8,,,,,136.4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,135.6,,,,137.6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,146.6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,149.6,,,,,,,146.6,,,,,,,,147.0,,,145.8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,145.8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,156.2,155.2,155.1,154.8,154.6,154.4,154.2,153.4,153.7,155.4,154.5,153.9,152.9,152.6,152.8,152.0,151.3,150.5,151.1,150.1,150.0,149.9,149.5,149.0,149.1,149.4,148.7,149.7,148.2,147.4,148.3,147.1,146.8,146.7,146.4,145.5,145.2,145.3,145.0,144.4,144.6,144.5,143.2,143.0,143.3,143.3,142.7,142.7,141.6,140.3,140.9,141.4,141.0,140.5,140.2,140.1,138.8,138.3,138.9,138.3,138.0,138.0,137.2,136.8,136.5,137.7,136.9,136.6,135.8,134.9,134.6,134.0,134.8,134.8,134.3,133.9,133.7,133.7,133.0,131.9,,,,,131.9,130.4,130.9,130.4,130.2,130.5,130.0,,128.6,129.4,,,,,127.2,,,,,,,,,,,127.2,,,,,,,,,,126.5,,,,,,,,,126.5,,,,,,,126.5,
      ]
    },
    {
      name: 'LJXBase',
      type: 'line',
      connectNulls: true,
      areaStyle: {},
      emphasis: {
        focus: 'series'
      },
      smooth: true,
      itemStyle: {
        normal: {
          lineStyle: {
            color: 'rgb(128, 222, 255,1)'
          },
          label: {
            show: true,
            position: 'top',
            textStyle: {
              fontSize: 8,
              color: '#000'
            }
          }
        }
      },
      data: [
        130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,
      ]
    }
  ]
};


        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>
<div style="width:800px;height:10px;"></div>
    
<pre><code>        总结：
            09月22号收到新的瑜伽垫正式开始减肥，今天第 133 天 
            希望元旦（2023年01月01）前能瘦到 110 以内 
            过年回家（2023年01月22）前能瘦到 105 以内 
            
            汇总：
                LXL 减重：20.6斤
                LJX 减重：29.7斤

            9月09号-9月30号：
                LXL 减重：3.0斤
                LJX 减重：3.3斤
            10月01号-10月31号：
                LXL 减重：5.5斤
                LJX 减重：9.9斤
            11月01号-11月30号：
                LXL 减重：4.8斤
                LJX 减重：8.2斤
            12月01号-01月31号：
                LXL 减重：7.2斤
                LJX 减重：8.3斤
</code></pre>
]]></content>
      <categories>
        <category>体重</category>
      </categories>
      <tags>
        <tag>体重</tag>
      </tags>
  </entry>
  <entry>
    <title>失业期间该做些什么？</title>
    <url>/2023/02/06/shenghuo/2023-nian-ji-lu/shi-ye-zhi-hou-gai-zuo-xie-shi-me/</url>
    <content><![CDATA[<h2 id="失业期间该做些什么？"><a href="#失业期间该做些什么？" class="headerlink" title="失业期间该做些什么？"></a>失业期间该做些什么？</h2><p>1.调整好心态，不要焦虑，不要觉得自己不行。</p>
<pre><code>失业并不完全是我能力不行。我不是因为工作做不好才被裁员的，是因为公司负债过高，发不出来工资才导致的我的失业。
</code></pre>
<p>2.好好吃饭，</p>
<pre><code>失业了吃饭页不要糊弄，可以吃自己喜欢吃的，尝试做一下一直想做的，说不定会很好吃，增加新的体验，我可以的。    
</code></pre>
<p>3.好好睡觉。</p>
<pre><code>失业了不要熬夜，在夜深人静的时候特别容易胡思乱想，陷入低落的情绪中。
睡太晚了，第二天起得晚，又感觉不是完整的一天，感觉这一天不完美，陷入内疚和自责当中。
尝试接受不完美的一天也可以做有意义的事情。
当然还要解决根本的问题，早睡早起，有规律的生活，就算是失业了，页不要让自己陷入混乱中。
</code></pre>
<p>3.好好运动。</p>
<pre><code>做一些简单的运动，可以让大脑不觉得自己那么废物。提升成就感。
排汗，有利于身心健康。
</code></pre>
<p>4.准备简历，投简历，保持学习。</p>
<pre><code>不要害怕面试，有约面试就说明我是可以的。
就算是面试没有通过页并不代表就是我的能力不行，可能是公司的预算没有那么高，可能是公司需要的技术栈不对。
没有人可以做到完美。没有人会掌握所有的技术，慢慢来，总会有合适的。
10天，20天，30天，一个月，两个月，哪怕半年都可以的。
上次经历了10个月还换了语言都找到了工作，这一次同样的，也可以的。加油！
</code></pre>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>工作</tag>
      </tags>
  </entry>
  <entry>
    <title>公司裁员原因</title>
    <url>/2023/02/03/shenghuo/2023-nian-ji-lu/gong-si-cai-yuan-yuan-yin/</url>
    <content><![CDATA[<h2 id="公司裁员的原因？"><a href="#公司裁员的原因？" class="headerlink" title="公司裁员的原因？"></a>公司裁员的原因？</h2><pre><code>部门负责的业务经营不善，整个公司经营不善，度过寒冬
</code></pre>
<h2 id="公司裁员的流程？"><a href="#公司裁员的流程？" class="headerlink" title="公司裁员的流程？"></a>公司裁员的流程？</h2><pre><code>一轮 两轮
</code></pre>
<h2 id="公司裁员需要考虑的因素？"><a href="#公司裁员需要考虑的因素？" class="headerlink" title="公司裁员需要考虑的因素？"></a>公司裁员需要考虑的因素？</h2><h2 id="员工的成长轨迹？"><a href="#员工的成长轨迹？" class="headerlink" title="员工的成长轨迹？"></a>员工的成长轨迹？</h2><pre><code>员工的升职速度越快就越安全
</code></pre>
<h2 id="员工在同一个level越久就会越危险？"><a href="#员工在同一个level越久就会越危险？" class="headerlink" title="员工在同一个level越久就会越危险？"></a>员工在同一个level越久就会越危险？</h2><pre><code>员工成长太慢。
</code></pre>
<h2 id="具体裁谁？"><a href="#具体裁谁？" class="headerlink" title="具体裁谁？"></a>具体裁谁？</h2><pre><code>一般会整个组裁掉
</code></pre>
<h2 id="被裁员后需要做什么？"><a href="#被裁员后需要做什么？" class="headerlink" title="被裁员后需要做什么？"></a>被裁员后需要做什么？</h2><pre><code>休息，锻炼
总结技能
修改简历
投简历
准备面试（不要觉得是自己被裁掉的，觉得自己不行）
</code></pre>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>工作</tag>
      </tags>
  </entry>
  <entry>
    <title>洪堡科技笔记整理</title>
    <url>/2023/02/02/bi-ji-zheng-li-2019-2022/hong-bao-ke-ji/</url>
    <content><![CDATA[<h2 id="资产管理系统"><a href="#资产管理系统" class="headerlink" title="资产管理系统"></a>资产管理系统</h2><pre><code>固定资产
    资产编码自动生成，小写字母自动转大写
    维保到期自动折旧。
    资产信息导入导出excel。
    资产信息一键复制功能。
    资产历史（领用，退还，维修）

资产分类
    递归方法，无限极分类

资产调拨
资产维修
固定资产报废
</code></pre>
<h2 id="广告系统"><a href="#广告系统" class="headerlink" title="广告系统"></a>广告系统</h2><pre><code>广告组,广告系列（广告计划），
否定关键字
</code></pre>
<h2 id="运营管理系统"><a href="#运营管理系统" class="headerlink" title="运营管理系统"></a>运营管理系统</h2><pre><code>发货指令管理
调拨单管理
自发货调拨单管理
调拨单据流转管理
</code></pre>
<h2 id="供应链系统"><a href="#供应链系统" class="headerlink" title="供应链系统"></a>供应链系统</h2><pre><code>发货指令管理B2B
调拨单管理B2B
组织间交易管理（采购订单，采购入库单，销售订单，销售出库单，商品列表）
</code></pre>
]]></content>
      <categories>
        <category>笔记记录</category>
      </categories>
      <tags>
        <tag>工作</tag>
      </tags>
  </entry>
  <entry>
    <title>2022总结</title>
    <url>/2023/02/02/shenghuo/2023-nian-ji-lu/2023-kai-shi-bu-mai-nian/</url>
    <content><![CDATA[<h2 id="2023年开始不买年"><a href="#2023年开始不买年" class="headerlink" title="2023年开始不买年"></a>2023年开始不买年</h2><p>不买的品类：<br>护肤品（水，乳液，身体乳，面膜，把现在的用完）<br>化妆品（眉笔，口红用完）<br>洗护类用品（洗衣液，年初35元买的超能3.5kg，应该可以用大半年，用完了再补）<br>衣服（冬天，春天，秋天的衣服确定不用再买了。夏天的衣服应该还有至少五套可以外出的，可以不买。）<br>鞋子（两双运动鞋加一双凉鞋，可能夏天会再加一双凉鞋，尽量不买）<br>帽子（没有习惯，不用买）<br>包包（买包的话可以把黑色的包丢掉然后买新包包）<br>家具用品（厨房用品）<br>本子（还有一个全新加一个剩很多页的本子没有用完，需要整理用完的本子然后扔掉，还有部分草稿纸今年够用）<br>首饰（没有佩戴习惯，不用买）</p>
<p>可以买什么品类<br>吃的（自己做饭或者外面堂食，少吃外卖）<br>消耗的日用品（纸巾，洗衣液，肥皂，内裤，袜子）<br>瑜伽垫（如果坏了的话可以买，用不坏不买新的）</p>
<p>是否具备不买年的条件？<br> 2022年已经开启了极简生活。<br> 而且盘算了去年买的东西：</p>
<pre><code>衣服类：
一条瑜伽裤（12月10号），五指袜（治疗脚气10月31号），鸿星尔克运动鞋2双，回力透气运动鞋（10月29号），靴下物袜子6双，
内裤三条（生日礼物），漫步者耳机（放在家里用），白色罗马凉鞋（黑色的坏了），加大码内裤（胖了，穿之前的不舒服），
内裤三条（周年礼物），猫与小黑内裤四条（4月，长胖不适合破的很快），买了两件连衣裙（酒心定制小铺，4月6号，穿了一个夏天），
优衣库内衣，（3月4号），安踏运动内衣2件（2月），安踏运动裤男（2月），拖鞋两双白色+蓝色（2月）

护肤品+化妆品：
护手霜两瓶，纯露三瓶（没怎么用，味道不是很喜欢，敷面膜麻烦），
面膜纸（使用纯露面膜，没怎么用，太懒了），

其他类：
手表维修（换表壳），手表电池，水龙头抬高（解决洗澡时无法接水问题），洗衣机进水，排水加长管，纸杯蛋糕托（对食物重量养成概念），
华为手机和苹果手机对应的电池两块（解决手机电池不耐用问题，苹果购买于2016年，华为购买于2019年），洗衣液洗衣粉肥皂各一，
烘干机（解决冬天衣服晒不干问题），强力挂钩（解决收纳问题），脚部取暖器（解决冬天坐着脚冷的问题），
瑜伽垫一只（减肥用，比较值，虽然质量不好，但是帮助我瘦了20+），
体重称（之前的坏了），动森金币+素材，刻章，迪卡侬雨伞（2022年7月，给我弟弟买的），洗衣液5袋，洗衣液2袋，
</code></pre>
<p>开启不买年的理由是什么？</p>
<p>不买年的目的是什么？<br>省钱</p>
<p>2023 购买东西预算：<br>书籍：100元<br>包：100元<br>洗衣液：100元<br>牙刷：500元<br>护肤+化妆品：500元<br>香水：0元<br>服饰类：1000元<br>文具：100元<br>厨具：200元<br>植物：100元<br>收纳：0元<br>玩偶：100元<br>首饰：0元<br>身体乳：0元<br>茶：0元<br>彩妆：0元<br>帽子：0元<br>器械：200元<br>内衣：200元<br>花费：700元</p>
<p>以上约3000元预算<br>再加2000杂类预算。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 展望</title>
    <url>/2023/01/31/shenghuo/2023-nian-ji-lu/2023-nian-zhan-wang/</url>
    <content><![CDATA[<h2 id="2023年要做的事情？"><a href="#2023年要做的事情？" class="headerlink" title="2023年要做的事情？"></a>2023年要做的事情？</h2><p>今天是2023年1月31日。一月份已经过去了。<br>可以说整个一月份都在休息。窝在出租房里面，没有出去溜达，没有回家过年，也没有为找工作做准备。</p>
<p>最近这一周也是心情很沮丧，常常失眠到夜里三四点，白天醒来快中午了。<br>害怕找工作失败。</p>
<p>明天开始就是 2 月份，明天开始恢复运动，尽量每天运动一个小时。</p>
<p>今天开始准备面试题，投简历。</p>
<ol>
<li>把生活作息改正，早起早睡。</li>
<li>运动,减肥塑形 。</li>
<li>烹饪，做自己一直想吃却没有吃到的。</li>
<li>出门散心，去公园看看。</li>
<li>追剧，看看想看的电视剧。</li>
</ol>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>2022总结</title>
    <url>/2023/01/23/shenghuo/2022-nian-ji-lu/2022-zong-jie/</url>
    <content><![CDATA[<h2 id="2022年成就？"><a href="#2022年成就？" class="headerlink" title="2022年成就？"></a>2022年成就？</h2><ol>
<li>减掉21+斤，从最高128斤，到现在107斤，达成元旦前减到110斤以内的目标。</li>
<li>入门 golang，5月开始学，7月12开始工作，从7月开始工作到12月吧，做了一个项目。实际写代码的实际也就8月、9月、10月。</li>
<li>预约上九价hpv疫苗了，这个周六去打(20230107打第一针)。</li>
</ol>
<h2 id="2022年的遗憾？"><a href="#2022年的遗憾？" class="headerlink" title="2022年的遗憾？"></a>2022年的遗憾？</h2><ol>
<li>体重方面没有遗憾了，就是遗憾在年前阳了，身体变得很虚弱，希望可以养回来。</li>
<li>12月21号新冠阳了，开始在家休息，一直到1月5号，也就是今天办理离职。公司拖欠了10月11月12月的工资没有发。发起劳动仲裁了，希望可以顺利拿到工资吧。</li>
<li>今年还是没能带男朋友回家，一方面是没钱，一方面是疫情，还有就是我自己也不想回去，太冷了。</li>
<li>没攒下钱</li>
</ol>
<h2 id="2023年要做的事情？"><a href="#2023年要做的事情？" class="headerlink" title="2023年要做的事情？"></a>2023年要做的事情？</h2><ol>
<li>身体健康一些，看看能不能逐渐恢复运动，如果不能运动的话就从吃饭饮食方面着手，希望可以减到100斤以内。按照之前的计划，3月4月为减肥月。</li>
<li>希望2月可以顺利找到合适的工作。1月就要努力学习了。</li>
<li>今年可以带男朋友回家见家长。5月或者10月的时候吧。</li>
<li>顺利拿到拖欠的工资。多攒点钱。</li>
</ol>
<p>印象中，好像每年冬天都不好过，裁员找工作循环往复。<br>这可能也是我不喜欢冷，不喜欢冬天的原因。<br>深圳大概是我能想到的既能找到工作，又气候不错的城市了。<br>虽然冬天也有些冷，但是多穿一点，忍一忍那两周就过去了。<br>讨厌那种漫长的冬天，裹成粽子一样，行动都受限。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 知识点总结</title>
    <url>/2023/01/23/mysql/mysql-zhi-shi-dian-zong-jie/mysql-mian-shi-ti/</url>
    <content><![CDATA[<p>mysql</p>
<h2 id="一-Mysql索引"><a href="#一-Mysql索引" class="headerlink" title="一 Mysql索引"></a>一 Mysql索引</h2><h3 id="001-Mysql如何实现的索引机制？"><a href="#001-Mysql如何实现的索引机制？" class="headerlink" title="001 Mysql如何实现的索引机制？"></a>001 Mysql如何实现的索引机制？</h3><p>MySQL中索引分三类：B+树索引、Hash索引、全文索引</p>
<h4 id="002-InnoDB索引与MyISAM索引实现的区别是什么？"><a href="#002-InnoDB索引与MyISAM索引实现的区别是什么？" class="headerlink" title="002 InnoDB索引与MyISAM索引实现的区别是什么？"></a>002 InnoDB索引与MyISAM索引实现的区别是什么？</h4><ul>
<li><p><code>MyISAM的索引方式都是非聚簇的，与InnoDB包含1个聚簇索引是不同的。</code></p>
<ul>
<li><p>在InnoDB存储引擎中，我们只需要根据主键值对聚簇索引进行一次查找就能找到对应的记录，而在MyISAM中却需要进行一次回表操作，意味着MyISAM中建立的索引相当于全部都是二级索引<br>。</p>
</li>
<li><p>InnoDB的数据文件本身就是索引文件，而MyISAM索引文件和数据文件是分离的 ，索引文件仅保存数据记录的地址。</p>
<ul>
<li>MyISAM的表在磁盘上存储在以下文件中：  <code>*.sdi（描述表结构）</code>、<code>*.MYD（数据）</code>，<code>*.MYI（索引）</code></li>
<li>InnoDB的表在磁盘上存储在以下文件中： <code>.ibd（表结构、索引和数据都存在一起）</code></li>
</ul>
</li>
<li><p>InnoDB的非聚簇索引data域存储相应记录主键的值 ，而MyISAM索引记录的是地址 。换句话说，InnoDB的所有非聚簇索引都引用主键作为data域。</p>
</li>
<li><p>MyISAM的回表操作是十分快速的，因为是拿着地址偏移量直接到文件中取数据的，反观InnoDB是通过获取主键之后再去聚簇索引里找记录，虽然说也不慢，但还是比不上直接用地址去访问。</p>
</li>
<li><p>InnoDB要求表必须有主键 （ MyISAM可以没有<br>）。如果没有显式指定，则MySQL系统会自动选择一个可以非空且唯一标识数据记录的列作为主键。如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键，这个字段长度为6个字节，类型为长整型。</p>
</li>
</ul>
</li>
</ul>
<h4 id="003-一个表中如果没有创建索引，那么还会创建B-树吗？"><a href="#003-一个表中如果没有创建索引，那么还会创建B-树吗？" class="headerlink" title="003 一个表中如果没有创建索引，那么还会创建B+树吗？"></a>003 一个表中如果没有创建索引，那么还会创建B+树吗？</h4><p>会</p>
<ul>
<li><p>如果有主键会创建聚簇索引</p>
</li>
<li><p>如果没有主键会生成rowid作为隐式主键</p>
</li>
</ul>
<h3 id="004-说一下B-树索引实现原理（数据结构）"><a href="#004-说一下B-树索引实现原理（数据结构）" class="headerlink" title="004 说一下B+树索引实现原理（数据结构）"></a>004 说一下B+树索引实现原理（数据结构）</h3><h4 id="讲义"><a href="#讲义" class="headerlink" title="讲义"></a>讲义</h4><p>假设有一个表index_demo，表中有2个INT类型的列，1个CHAR(1)类型的列，c1列为主键：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> index_demo</span><br><span class="line">(</span><br><span class="line">    c1 <span class="type">INT</span>,</span><br><span class="line">    c2 <span class="type">INT</span>,</span><br><span class="line">    c3 <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (c1)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>index_demo表的简化的行格式示意图如下：</p>
<p><img src="/image-20220709071051043.png" alt="image-20220709071051043"></p>
<p>我们只在示意图里展示记录的这几个部分：</p>
<ul>
<li><code>record_type：</code>表示记录的类型， 0是普通记录、 2是最小记录、 3 是最大记录、1是B+树非叶子节点记录。</li>
<li><code>next_record：</code>表示下一条记录的相对位置，我们用箭头来表明下一条记录。</li>
<li><code>各个列的值：</code>这里只记录在 index_demo 表中的三个列，分别是 c1 、 c2 和 c3 。</li>
<li><code>其他信息：</code>除了上述3种信息以外的所有信息，包括其他隐藏列的值以及记录的额外信息。</li>
</ul>
<p>将<code>其他信息</code>项暂时去掉并把它竖起来的效果就是这样：</p>
<p><img src="/image-20220709071958145.png" alt="image-20220709071958145"></p>
<p>把一些记录放到页里的示意图就是（这里一页就是一个磁盘块，代表一次IO）：</p>
<p><img src="/image-20220709072138395.png" alt="image-20220709072138395"></p>
<p>name age sex</p>
<p><code>MySQL InnoDB的默认的页大小是16KB</code><br>，因此数据存储在磁盘中，可能会占用多个数据页。如果各个页中的记录没有规律，我们就不得不依次遍历所有的数据页。<code>如果我们想快速的定位到需要查找的记录在哪些数据页中</code><br>，我们可以这样做 ：</p>
<ul>
<li>下一个数据页中用户记录的主键值必须大于上一个页中用户记录的主键值</li>
<li>给所有的页建立目录项</li>
</ul>
<p><img src="/image-20220709073749310.png" alt="image-20220709073749310"></p>
<p>以<code>页28</code>为例，它对应<code>目录项2</code> ，这个目录项中包含着该页的<code>页号28</code>以及该页中用户记录的<code>最小主键值 5</code><br>。我们只需要把几个目录项在物理存储器上连续存储（比如：数组），就可以实现根据主键值快速查找某条记录的功能了。<code>比如：查找主键值为 20 的记录，具体查找过程分两步：</code></p>
<ol>
<li>先从目录项中根据二分法快速确定出 <code>主键值为20的记录在目录项3中</code>（因为 12 ≤ 20 &lt; 209 ），<code>对应页9</code>。</li>
<li>再到页9中根据二分法快速定位到主键值为 20 的用户记录。</li>
</ol>
<p>至此，针对数据页做的简易目录就搞定了。这个目录有一个别名，称为 <code>索引</code> 。</p>
<h4 id="InnoDB中的索引方案"><a href="#InnoDB中的索引方案" class="headerlink" title="InnoDB中的索引方案"></a>InnoDB中的索引方案</h4><p>我们新分配一个编号为30的页来专门存储<code>目录项记录</code>，页10、28、9、20专门存储<code>用户记录</code>：</p>
<p><img src="/image-20220709074801215.png" alt="image-20220709073749310"></p>
<p><img src="/1557565-20220429110413866-1755798300.png" alt="img"></p>
<p><code>目录项记录和普通的用户记录的不同点：</code></p>
<ul>
<li>目录项记录 的 record_type 值是1，而 普通用户记录 的 record_type 值是0。</li>
<li>目录项记录只有主键值和页的编号两个列，而普通的用户记录的列是用户自己定义的，包含很多列，另外还有InnoDB自己添加的隐藏列。</li>
</ul>
<p><code>现在查找主键值为 20 的记录，具体查找过程分两步：</code></p>
<ol>
<li>先到页30中通过二分法快速定位到对应目录项，因为 12 ≤ 20 &lt; 209 ，就是页9。</li>
<li>再到页9中根据二分法快速定位到主键值为 20 的用户记录。</li>
</ol>
<p><strong>更复杂的情况如下：</strong></p>
<p>我们生成了一个存储更高级目录项的 页33 ，这个页中的两条记录分别代表页30和页32，如果用户记录的主键值在 <code>[1, 320)</code><br>之间，则到页30中查找更详细的目录项记录，如果主键值 不小于320 的话，就到页32中查找更详细的目录项记录。<strong>这个数据结构，它的名称是<br>B+树 。</strong></p>
<p><img src="/image-20220709080648851.png" alt="image-20220709080648851"></p>
<h4 id="005聚簇索引与非聚簇索引b-树实现有什么区别？"><a href="#005聚簇索引与非聚簇索引b-树实现有什么区别？" class="headerlink" title="005	聚簇索引与非聚簇索引b+树实现有什么区别？"></a>005	聚簇索引与非聚簇索引b+树实现有什么区别？</h4><h5 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h5><p><strong>特点：</strong></p>
<ul>
<li><p><code>索引和数据保存在同一个B+树中</code></p>
</li>
<li><p><code>页内的记录</code>是按照<code>主键</code>的大小顺序排成一个<code>单向链表</code> 。</p>
</li>
<li><p><code>页和页之间</code>也是根据页中记录的<code>主键</code>的大小顺序排成一个<code>双向链表</code> 。</p>
</li>
<li><p>非叶子节点存储的是记录的<code>主键+页号</code>。</p>
</li>
<li><p>叶子节点存储的是<code>完整的用户记录</code>。</p>
</li>
</ul>
<p><strong>优点：</strong></p>
<ul>
<li>数据访问更快 ，因为<code>索引和数据保存在同一个B+树中</code>，因此从聚簇索引中获取数据比非聚簇索引更快。</li>
<li>聚簇索引对于主键的<code>排序查找</code>和<code>范围查找</code>速度非常快。</li>
<li>按照聚簇索引排列顺序，查询显示一定范围数据的时候，由于<code>数据都是紧密相连</code><br>，数据库可以从更少的数据块中提取数据，<code>节省了大量的IO操作</code> 。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>插入速度严重依赖于插入顺序<br>，按照主键的顺序插入是最快的方式，否则将会出现页分裂，严重影响性能。因此，对于InnoDB表，我们一般都会定义一个<code>自增的ID列为主键</code><br>。</li>
<li>更新主键的代价很高 ，因为将会导致被更新的行移动。因此，对于InnoDB表，我们一般定义<code>主键为不可更新</code>。</li>
</ul>
<p><strong>限制：</strong></p>
<ul>
<li>只有InnoDB引擎支持聚簇索引，<code>MyISAM不支持聚簇索引</code>。</li>
<li>由于数据的物理存储排序方式只能有一种，所以<code>每个MySQL的表只能有一个聚簇索引</code>。</li>
<li>如果没有为表定义主键，InnoDB会选择<code>非空的唯一索引列代替</code>。如果没有这样的列，InnoDB会<code>隐式的定义一个主键</code>作为聚簇索引。</li>
<li>为了充分利用聚簇索引的聚簇特性，InnoDB中表的<code>主键应选择有序的id</code>，不建议使用无序的id，比如UUID、MD5、HASH、字符串作为主键，无法保证数据的顺序增长。</li>
</ul>
<h5 id="非聚簇索引"><a href="#非聚簇索引" class="headerlink" title="非聚簇索引"></a>非聚簇索引</h5><p><strong>（二级索引、辅助索引）</strong></p>
<p><code>聚簇索引</code>，只能在搜索条件是<code>主键值</code><br>时才发挥作用，因为B+树中的数据都是按照主键进行排序的，如果我们想以别的列作为搜索条件，那么需要创建<code>非聚簇索引</code>。</p>
<p><strong>例如，</strong><code>以c2列作为搜索条件</code>，那么需要使<code>用c2列创建一棵B+树</code>，如下所示：</p>
<p><img src="/image-20220709130937991.png" alt="image-20220709130937991"></p>
<p><strong>这个B+树与聚簇索引有几处不同：</strong></p>
<ul>
<li><p><code>页内的记录</code>是按照从<code>c2列</code>的大小顺序排成一个<code>单向链表</code> 。</p>
</li>
<li><p><code>页和页之间</code>也是根据页中记录的<code>c2列</code>的大小顺序排成一个<code>双向链表</code> 。</p>
</li>
<li><p>非叶子节点存储的是记录的<code>c2列+页号</code>。</p>
</li>
<li><p>叶子节点存储的并不是完整的用户记录，而只是<code>c2列+主键</code>这两个列的值。</p>
</li>
</ul>
<p><strong>一张表可以有多个非聚簇索引：</strong></p>
<p><img src="/image-20220709134109900-16668534893372.png" alt="image-20220709134109900"></p>
<h4 id="006说一下B-树中聚簇索引的查找（匹配）逻辑"><a href="#006说一下B-树中聚簇索引的查找（匹配）逻辑" class="headerlink" title="006	说一下B+树中聚簇索引的查找（匹配）逻辑"></a>006	说一下B+树中聚簇索引的查找（匹配）逻辑</h4><p><img src="/image-20220709080648851.png" alt="image-20220709080648851"></p>
<h4 id="007说一下B-树中非聚簇索引的查找（匹配）逻辑"><a href="#007说一下B-树中非聚簇索引的查找（匹配）逻辑" class="headerlink" title="007	说一下B+树中非聚簇索引的查找（匹配）逻辑"></a>007	说一下B+树中非聚簇索引的查找（匹配）逻辑</h4><p><strong>例如：</strong>根据c2列的值查找c2&#x3D;4的记录，查找过程如下：</p>
<ol>
<li>根据<code>根页面44</code>定位到<code>页42</code>（因为<code>2 ≤ 4 &lt; 9</code>）</li>
<li>由于<code>c2列没有唯一性约束</code>，所以c2&#x3D;4的记录可能分布在多个数据页中，又因为 <code>2 ≤ 4 ≤ 4</code><br>，所以确定实际存储用户记录的页在<code>页34和页35</code>中。</li>
<li>在页34和35中<code>定位到具体的记录</code>。</li>
<li>但是这个B+树的叶子节点<code>只存储了c2和c1（主键）</code>两个列，所以我们必须<code>再根据主键值去聚簇索引中再查找</code>一遍完整的用户记录。</li>
<li>like 张%</li>
</ol>
<p><img src="/image-20220709130937991.png" alt="image-20220709130937991"></p>
<h4 id="008平衡二叉树，红黑树，B树和B-树的区别是什么？都有哪些应用场景？"><a href="#008平衡二叉树，红黑树，B树和B-树的区别是什么？都有哪些应用场景？" class="headerlink" title="008	平衡二叉树，红黑树，B树和B+树的区别是什么？都有哪些应用场景？"></a>008	平衡二叉树，红黑树，B树和B+树的区别是什么？都有哪些应用场景？</h4><p>平衡二叉树</p>
<ul>
<li>基础数据结构</li>
<li>左右平衡</li>
<li>高度差大于1会自旋</li>
<li>每个节点记录一个数据</li>
</ul>
<p><strong>平衡二叉树（AVL）</strong></p>
<p>AVL树全称G.M. Adelson-Velsky和E.M. Landis，这是两个人的人名。</p>
<p>平衡二叉树也叫平衡二叉搜索树（Self-balancing binary search tree）又被称为AVL树， 可以保证查询效率较高。</p>
<p><code>具有以下特点：</code></p>
<ul>
<li>它是一棵空树或它的左右两个子树的高度差的绝对值不超过1</li>
<li>并且左右两个子树都是一棵平衡二叉树。</li>
</ul>
<p><img src="/image-20220708235509010.png" alt="image-20220708235509010"></p>
<p>AVL的生成演示：<a href="https://www.cs.usfca.edu/~galles/visualization/AVLtree.html">https://www.cs.usfca.edu/~galles/visualization/AVLtree.html</a></p>
<p><strong>AVL的问题</strong></p>
<p>众所周知，IO操作的效率很低，在大量数据存储中，查询时我们不能一下子将所有数据加载到内存中，只能逐节点加载（一个节点一次IO）。如果我们利用二叉树作为索引结构，<code>那么磁盘的IO次数和索引树的高度是相关的</code><br>。平衡二叉树由于树深度过大而造成磁盘IO读写过于频繁，进而导致效率低下。</p>
<p><img src="/image-20220708233351509.png" alt="image-20220708233351509"></p>
<p>为了提高查询效率，就需要 减少磁盘IO数 。<code>为了减少磁盘IO的次数，就需要尽量降低树的高度</code><br>，需要把原来“瘦高”的树结构变的“矮胖”，树的每层的分叉越多越好。针对同样的数据，如果我们把二叉树改成 三叉树：</p>
<p><img src="/image-20220708235725124.png" alt="image-20220708235725124"></p>
<p>上面的例子中，我们将二叉树变成了三叉树，降低了树的高度。如果能够在一个节点中存放更多的数据，我们还可以进一步减少节点的数量，从而进一步降低树的高度。这就是<code>多叉树</code><br>。</p>
<p><strong>普通树的问题</strong></p>
<ul>
<li>左子树全部为空，从形式上看，更像一个单链表，不能发挥BST的优势。</li>
<li><code>解决方案：平衡二叉树(AVL)</code></li>
</ul>
<p><img src="/image-20220708231622916.png" alt="image-20220708231622916"></p>
<p>红黑树</p>
<ul>
<li>hashmap存储</li>
<li>两次旋转达到平衡</li>
<li>分为红黑节点</li>
</ul>
<p>在这个棵严格的平台树上又进化为“红黑树”{是一个非严格的平衡树 左子树与右子树的高度差不能超过1}，红黑树的长子树只要不超过短子树的两倍即可！</p>
<p><img src="/image-20221027154142690.png" alt="image-20221027154142690"></p>
<p>当再次插入7的时候，这棵树就会发生旋转</p>
<p><img src="/image-20221027154120483.png" alt="image-20221027154120483"></p>
<p><strong>B+</strong> <strong>树和</strong> <strong>B</strong> <strong>树的差异：</strong></p>
<ul>
<li>B+树中非叶子节点的关键字也会同时存在在子节点中，并且是在子节点中所有关键字的最大值（或最小）。</li>
<li>B+树中非叶子节点仅用于索引，不保存数据记录，跟记录有关的信息都放在叶子节点中。而B树中， 非叶子节点既保存索引，也保存数据记录<br>。</li>
<li>B+树中所有关键字都在叶子节点出现，叶子节点构成一个有序链表，而且叶子节点本身按照关键字的大小从小到大顺序链接。</li>
</ul>
<h4 id="009一个b-树中大概能存放多少条索引记录？"><a href="#009一个b-树中大概能存放多少条索引记录？" class="headerlink" title="009	一个b+树中大概能存放多少条索引记录？"></a>009	一个b+树中大概能存放多少条索引记录？</h4><ul>
<li><code>真实环境</code>中一个页存放的记录数量是非常大的（默认16KB），假设指针与键值忽略不计（或看做10个字节），数据占 1 kb 的空间：</li>
<li>如果B+树只有1层，也就是只有1个用于存放用户记录的节点，最多能存放 16 条记录。</li>
<li>如果B+树有2层，最多能存放 <code>1600×16=25600</code> 条记录。</li>
<li>如果B+树有3层，最多能存放 <code>1600×1600×16=40960000</code> 条记录。</li>
<li>如果存储千万级别的数据，只需要三层就够了</li>
</ul>
<p><code>B+树的非叶子节点不存储用户记录，只存储目录记录，相对B树每个节点可以存储更多的记录，树的高度会更矮胖，IO次数也会更少。</code></p>
<h4 id="010使用B-树存储的索引crud执行效率如何？"><a href="#010使用B-树存储的索引crud执行效率如何？" class="headerlink" title="010	使用B+树存储的索引crud执行效率如何？"></a>010	使用B+树存储的索引crud执行效率如何？</h4><p>c 新增</p>
<p>O(lognN)</p>
<p>N &#x3D; 高度</p>
<h4 id="011什么是自适应哈希索引？"><a href="#011什么是自适应哈希索引？" class="headerlink" title="011	什么是自适应哈希索引？"></a>011	什么是自适应哈希索引？</h4><p>自适应哈希索引是Innodb引擎的一个特殊功能，当它注意到某些索引值被使用的非常频繁时，会在内存中基于B-Tree所有之上再创建一个哈希索引，这就让B-Tree索引也具有哈希索引的一些优点，比如快速哈希查找。这是一个完全自动的内部行为，用户无法控制或配置</p>
<p>使用命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW ENGINE INNODB STATUS \G ;</span><br></pre></td></tr></table></figure>

<p>查看INSERT BUFFER AND ADAPTIVE HASH INDEX</p>
<h4 id="012什么是2-3树-2-3-4树？"><a href="#012什么是2-3树-2-3-4树？" class="headerlink" title="012	什么是2-3树 2-3-4树？"></a>012	什么是2-3树 2-3-4树？</h4><p>多叉树（multiway tree）允许<code>每个节点可以有更多的数据项和更多的子节点</code><br>。2-3树，2-3-4树就是多叉树，多叉树通过<code>重新组织节点，减少节点数量，增加分叉，减少树的高度</code>，能对二叉树进行优化。</p>
<p><strong>2-3树</strong></p>
<p>下面2-3树就是一颗多叉树</p>
<p><img src="/image-20220709002223882.png" alt="image-20220709002223882"></p>
<p>2-3树具有如下特点：</p>
<ul>
<li>2-3树的所有叶子节点都在同一层。</li>
<li>有两个子节点的节点叫二节点，二节点要么没有子节点，要么有两个子节点。</li>
<li>有三个子节点的节点叫三节点，三节点要么没有子节点，要么有三个子节点。</li>
<li>2-3树是由二节点和三节点构成的树。</li>
<li>对于三节点的子树的值大小仍然遵守 BST 二叉排序树的规则。</li>
</ul>
<p><img src="/image-20220709002554341.png" alt="image-20220709002554341"></p>
<p><strong>2-3-4树</strong></p>
<p><img src="/image-20220709004531952.png" alt="image-20220709004531952"></p>
<h3 id="013-为什么官方建议使用自增长主键作为索引？（说一下自增主键和字符串类型主键的区别和影响）"><a href="#013-为什么官方建议使用自增长主键作为索引？（说一下自增主键和字符串类型主键的区别和影响）" class="headerlink" title="013 为什么官方建议使用自增长主键作为索引？（说一下自增主键和字符串类型主键的区别和影响）"></a>013 为什么官方建议使用自增长主键作为索引？（说一下自增主键和字符串类型主键的区别和影响）</h3><ul>
<li>自增主键能够维持底层数据顺序写入</li>
<li>读取可以由b+树的二分查找定位</li>
<li>支持范围查找，范围数据自带顺序</li>
</ul>
<p>字符串无法完成以上操作</p>
<h4 id="014-使用int自增主键后-最大id是10，删除id-10和9，再添加一条记录，最后添加的id是几？删除后重启mysql然后添加一条记录最后id是几？"><a href="#014-使用int自增主键后-最大id是10，删除id-10和9，再添加一条记录，最后添加的id是几？删除后重启mysql然后添加一条记录最后id是几？" class="headerlink" title="014 使用int自增主键后 最大id是10，删除id 10和9，再添加一条记录，最后添加的id是几？删除后重启mysql然后添加一条记录最后id是几？"></a>014 使用int自增主键后 最大id是10，删除id 10和9，再添加一条记录，最后添加的id是几？删除后重启mysql然后添加一条记录最后id是几？</h4><p>删除之后</p>
<ul>
<li>如果重启，会从最大的id开始递增</li>
<li>如果没重启，会延续删除之前最大的id开始递增</li>
</ul>
<h3 id="015-索引的优缺点是什么？"><a href="#015-索引的优缺点是什么？" class="headerlink" title="015 索引的优缺点是什么？"></a>015 索引的优缺点是什么？</h3><p><strong>优点</strong></p>
<p>聚簇（主键）索引：</p>
<ul>
<li>顺序读写</li>
<li>范围快速查找</li>
<li>范围查找自带顺序</li>
</ul>
<p>非聚簇索引：</p>
<ul>
<li>条件查询避免全表扫描scan</li>
<li>范围，排序，分组查询返回行id，排序分组后，再回表查询完整数据，有可能利用顺序读写</li>
<li>覆盖索引不需要回表操作</li>
</ul>
<p><strong>索引的代价</strong></p>
<p>索引是个好东西，可不能乱建，它在空间和时间上都会有消耗：</p>
<ul>
<li><strong>空间上的代价</strong></li>
</ul>
<p>每建立一个索引都要为它建立一棵B+树，<code>每一棵B+树的每一个节点都是一个数据页，一个页默认会占用 16KB 的存储空间</code><br>，一棵很大的B+树由许多数据页组成，那就是很大的一片存储空间。</p>
<ul>
<li><strong>时间上的代价</strong></li>
</ul>
<p><code>每次对表中的数据进行 增、删、改 操作时，都需要去修改各个B+树索引</code><br>。而增、删、改操作可能会对节点和记录的排序造成破坏<code>，所以存储引擎需要额外的时间进行一些记录移位、页面分裂、页面回收等操作来维护好节点和记录的排序。</code><br>如果我们建了许多索引，每个索引对应的B+树都要进行相关的维护操作，会给性能拖后腿。</p>
<p>B 树和 B+ 树都可以作为索引的数据结构，<strong>在 MySQL 中采用的是 B+ 树。</strong></p>
<p>但B树和B+树各有自己的应用场景，不能说B+树完全比B树好，反之亦然。</p>
<h4 id="016使用索引一定能提升效率吗？"><a href="#016使用索引一定能提升效率吗？" class="headerlink" title="016	使用索引一定能提升效率吗？"></a>016	使用索引一定能提升效率吗？</h4><p>不一定</p>
<ul>
<li>少量数据全表扫描也很快，可以直接获取到全量数据</li>
<li>唯一索引会影响插入速度，但建议使用</li>
<li>索引过多会影响更新，插入，删除数据速度</li>
</ul>
<h4 id="017如果是大段文本内容，如何创建（优化）索引？"><a href="#017如果是大段文本内容，如何创建（优化）索引？" class="headerlink" title="017	如果是大段文本内容，如何创建（优化）索引？"></a>017	如果是大段文本内容，如何创建（优化）索引？</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">B 树和 B+ 树都可以作为     索引的数据结构，**在 MySQL 中采用的是 B+ 树。**</span><br></pre></td></tr></table></figure>

<p>第一种方式是分表存储，然后创建索引</p>
<p>第二是使用es为大文本创建索引</p>
<h3 id="018-什么是聚簇索引？"><a href="#018-什么是聚簇索引？" class="headerlink" title="018 什么是聚簇索引？"></a>018 什么是聚簇索引？</h3><p>聚簇索引数据和索引存放在一起组成一个b+树</p>
<p>参考005题</p>
<h4 id="019一个表中可以有多个（非）聚簇索引吗？"><a href="#019一个表中可以有多个（非）聚簇索引吗？" class="headerlink" title="019	一个表中可以有多个（非）聚簇索引吗？"></a>019	一个表中可以有多个（非）聚簇索引吗？</h4><p>聚簇索引只能有一个</p>
<p>非聚簇索引可以有多个</p>
<h4 id="020聚簇索引与非聚集索引的特点是什么？"><a href="#020聚簇索引与非聚集索引的特点是什么？" class="headerlink" title="020	聚簇索引与非聚集索引的特点是什么？"></a>020	聚簇索引与非聚集索引的特点是什么？</h4><p>参考005题</p>
<h4 id="021CRUD时聚簇索引与非聚簇索引的区别是什么？"><a href="#021CRUD时聚簇索引与非聚簇索引的区别是什么？" class="headerlink" title="021	CRUD时聚簇索引与非聚簇索引的区别是什么？"></a>021	CRUD时聚簇索引与非聚簇索引的区别是什么？</h4><ul>
<li>聚簇索引插入新值比采用非聚簇索引插入新值的速度要慢很多，因为插入要保证主键不能重复</li>
<li>聚簇索引范围，排序查找效率高，因为是有序的</li>
<li>非聚簇索引访问需要两次索引查找，第一次找到主键值，第二次根据主键值找到行数据</li>
</ul>
<h4 id="022-非聚簇索引为什么不存数据地址值而存储主键？"><a href="#022-非聚簇索引为什么不存数据地址值而存储主键？" class="headerlink" title="022 非聚簇索引为什么不存数据地址值而存储主键？"></a>022 非聚簇索引为什么不存数据地址值而存储主键？</h4><p>因为聚簇索引中有时会引发分页操作、重排操作数据有可能会移动</p>
<h3 id="023-什么是回表操作？"><a href="#023-什么是回表操作？" class="headerlink" title="023 什么是回表操作？"></a>023 什么是回表操作？</h3><p>id age name sex</p>
<p>age -&gt; index</p>
<p>select * from user where age &gt;20 ;</p>
<p>第一次 取回id，第二次（回表）根据id拿到完整数据</p>
<p>select * from user where age &gt;20 ;</p>
<h4 id="024什么是覆盖索引？"><a href="#024什么是覆盖索引？" class="headerlink" title="024	什么是覆盖索引？"></a>024	什么是覆盖索引？</h4><p>id age name sex</p>
<p>age -&gt; index</p>
<p>select * from user where age &gt;20 ;</p>
<p>第一次 取回id，第二次（回表）根据id拿到完整数据</p>
<p>age,name -&gt; index</p>
<p>select age from user where age &gt;20 and name like”张%” ;</p>
<p>覆盖索引不会回表查询，查询效率也是比较高的</p>
<h4 id="025非聚集索引一定回表查询吗"><a href="#025非聚集索引一定回表查询吗" class="headerlink" title="025	非聚集索引一定回表查询吗?"></a>025	非聚集索引一定回表查询吗?</h4><p>不一定，只要b+树中包含的字段（创建索引的字段），覆盖（包含）想要select 的字段，那么就不会回表查询了。</p>
<h4 id="026为什么要回表查询？直接存储数据不可以吗？"><a href="#026为什么要回表查询？直接存储数据不可以吗？" class="headerlink" title="026	为什么要回表查询？直接存储数据不可以吗？"></a>026	为什么要回表查询？直接存储数据不可以吗？</h4><p>为了控制非聚簇索引的大小</p>
<h4 id="027如果把一个-InnoDB-表的主键删掉，是不是就没有主键，就没办法进行回表查询了？"><a href="#027如果把一个-InnoDB-表的主键删掉，是不是就没有主键，就没办法进行回表查询了？" class="headerlink" title="027	如果把一个 InnoDB 表的主键删掉，是不是就没有主键，就没办法进行回表查询了？"></a>027	如果把一个 InnoDB 表的主键删掉，是不是就没有主键，就没办法进行回表查询了？</h4><p>不是，InnoDB会生成rowid辅助回表查询</p>
<h3 id="028-什么是联合索引，组合索引，复合索引？"><a href="#028-什么是联合索引，组合索引，复合索引？" class="headerlink" title="028 什么是联合索引，组合索引，复合索引？"></a>028 什么是联合索引，组合索引，复合索引？</h3><p><code>为c2和c3列建立联合索引，</code>如下所示：</p>
<p>c2，c3 - &gt; index</p>
<p>c3,c2 -&gt; index</p>
<p>where c3&#x3D;?</p>
<p>全职匹配</p>
<p>最左前缀</p>
<p><img src="/image-20220712002627554.png" alt="image-20220712002627554"></p>
<h4 id="029-复合索引创建时字段顺序不一样使用效果一样吗？"><a href="#029-复合索引创建时字段顺序不一样使用效果一样吗？" class="headerlink" title="029 复合索引创建时字段顺序不一样使用效果一样吗？"></a>029 复合索引创建时字段顺序不一样使用效果一样吗？</h4><p>我们也可以同时以多个列的大小作为排序规则，也就是同时为多个列建立索引，比方说我们想让B+树按照 <code>c2和c3列</code> 的大小进行排序，这个包含两层含义：</p>
<ul>
<li>先把各个记录和页按照<code>c2</code>列进行排序。</li>
<li>在记录的<code>c2</code>列相同的情况下，采用<code>c3</code>列进行排序</li>
<li>B+树叶子节点处的记录由<code>c2列、c3列和主键c1列组成</code></li>
<li>本质上也是二级索引</li>
</ul>
<p><code>create index idx_c2_c3 on user (c2,c3); </code></p>
<h3 id="030-什么是唯一索引？"><a href="#030-什么是唯一索引？" class="headerlink" title="030 什么是唯一索引？"></a>030 什么是唯一索引？</h3><ul>
<li>随表一起创建索引：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customer</span><br><span class="line">(</span><br><span class="line"></span><br><span class="line">    id            <span class="type">INT</span> UNSIGNED AUTO_INCREMENT,</span><br><span class="line">    customer_no   <span class="type">VARCHAR</span>(<span class="number">200</span>),</span><br><span class="line">    customer_name <span class="type">VARCHAR</span>(<span class="number">200</span>),</span><br><span class="line"></span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id),                            <span class="comment">-- 主键索引：列设定为主键后会自动建立索引，唯一且不能为空。</span></span><br><span class="line">    <span class="keyword">UNIQUE</span> INDEX uk_no (customer_no),            <span class="comment">-- 唯一索引：索引列值必须唯一，允许有NULL值，且NULL可能会出现多次。</span></span><br><span class="line">    KEY idx_name (customer_name),                <span class="comment">-- 普通索引：既不是主键，列值也不需要唯一，单纯的为了提高查询速度而创建。</span></span><br><span class="line">    KEY idx_no_name (customer_no, customer_name) <span class="comment">-- 复合索引：即一个索引包含多个列。</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>单独建创索引：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customer1</span><br><span class="line">(</span><br><span class="line">    id            <span class="type">INT</span> UNSIGNED,</span><br><span class="line">    customer_no   <span class="type">VARCHAR</span>(<span class="number">200</span>),</span><br><span class="line">    customer_name <span class="type">VARCHAR</span>(<span class="number">200</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> customer1</span><br><span class="line">    <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY customer1 (id); <span class="comment">-- 主键索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX uk_no <span class="keyword">ON</span> customer1 (customer_no); <span class="comment">-- 唯一索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_name <span class="keyword">ON</span> customer1 (customer_name); <span class="comment">-- 普通索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_no_name <span class="keyword">ON</span> customer1 (customer_no, customer_name); <span class="comment">-- 复合索引</span></span><br></pre></td></tr></table></figure>

<h4 id="031-唯一索引是否影响性能？"><a href="#031-唯一索引是否影响性能？" class="headerlink" title="031 唯一索引是否影响性能？"></a>031 唯一索引是否影响性能？</h4><p>是</p>
<h4 id="032-什么时候使用唯一索引？"><a href="#032-什么时候使用唯一索引？" class="headerlink" title="032 什么时候使用唯一索引？"></a>032 什么时候使用唯一索引？</h4><p>业务需求唯一字段的时候，一般不考虑性能问题</p>
<p>. 【强制】业务上具有唯一特性的字段，即使是多个字段的组合，也必须建成唯一索引。 说明：不要以为唯一索引影响了 insert<br>速度，这个速度损耗可以忽略，但提高查找速度是明 显的；另外，即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必<br>然有脏数据产生。</p>
<h3 id="033-什么时候适合创建索引，什么时候不适合创建索引？"><a href="#033-什么时候适合创建索引，什么时候不适合创建索引？" class="headerlink" title="033 什么时候适合创建索引，什么时候不适合创建索引？"></a>033 什么时候适合创建索引，什么时候不适合创建索引？</h3><p>适合创建索引</p>
<ul>
<li><p>频繁作为where条件语句查询字段</p>
</li>
<li><p>关联字段需要建立索引</p>
</li>
<li><p>排序字段可以建立索引</p>
</li>
<li><p>分组字段可以建立索引(因为分组前提是排序)</p>
</li>
<li><p>统计字段可以建立索引（如.count(),max()）</p>
</li>
</ul>
<p>不适合创建索引</p>
<ul>
<li><p>频繁更新的字段不适合建立索引</p>
</li>
<li><p>where，分组，排序中用不到的字段不必要建立索引</p>
</li>
<li><p>可以确定表数据非常少不需要建立索引</p>
</li>
<li><p>参与mysql函数计算的列不适合建索引</p>
</li>
</ul>
<p>创建索引时避免有如下极端误解：</p>
<p>1）宁滥勿缺。认为一个查询就需要建一个索引。</p>
<p>2）宁缺勿滥。认为索引会消耗空间、严重拖慢更新和新增速度。</p>
<p>3）抵制惟一索引。认为业务的惟一性一律需要在应用层通过“先查后插”方式解决。</p>
<h3 id="034-什么是索引下推？"><a href="#034-什么是索引下推？" class="headerlink" title="034 什么是索引下推？"></a>034 什么是索引下推？</h3><p>5.6之前的版本是没有索引下推这个优化的</p>
<p><strong>Using index condition：</strong>叫作  <code>Index Condition Pushdown Optimization （索引下推优化）</code></p>
<ul>
<li><code>如果没有索引下推（ICP）</code>，那么MySQL在存储引擎层找到满足<code>content1 &gt; &#39;z&#39;</code>条件的第一条二级索引记录。<code>主键值进行回表</code><br>，返回完整的记录给server层，server层再判断其他的搜索条件是否成立。如果成立则保留该记录，否则跳过该记录，然后向存储引擎层要下一条记录。</li>
<li><code>如果使用了索引下推（ICP</code>），那么MySQL在存储引擎层找到满足<code>content1 &gt; &#39;z&#39;</code>条件的第一条二级索引记录。<code>不着急执行回表</code><br>，而是在这条记录上先判断一下所有关于<code>idx_content1</code><br>索引中包含的条件是否成立，也就是<code>content1 &gt; &#39;z&#39; AND content1 LIKE &#39;%a&#39;</code><br>是否成立。如果这些条件不成立，则直接跳过该二级索引记录，去找下一条二级索引记录；如果这些条件成立，则执行回表操作，返回完整的记录给server层。</li>
</ul>
<p>总结：</p>
<p>未开启索引下推：</p>
<ul>
<li>根据筛选条件在索引树中筛选第一个条件</li>
<li>获得结果集后回表操作</li>
<li>进行其他条件筛选</li>
<li>再次回表查询</li>
</ul>
<p>开启索引下推：在条件查询时，当前索引树如果满足全部筛选条件，可以在当前树中完成全部筛选过滤，得到比较小的结果集再进行回表操作</p>
<h3 id="035-有哪些情况会导致索引失效？"><a href="#035-有哪些情况会导致索引失效？" class="headerlink" title="035 有哪些情况会导致索引失效？"></a>035 有哪些情况会导致索引失效？</h3><ul>
<li>计算、函数导致索引失效</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 显示查询分析</span><br><span class="line">EXPLAIN SELECT * FROM emp WHERE emp.name  LIKE &#x27;abc%&#x27;;</span><br><span class="line">EXPLAIN SELECT * FROM emp WHERE LEFT(emp.name,3) = &#x27;abc&#x27;; --索引失效</span><br></pre></td></tr></table></figure>

<ul>
<li>LIKE以%，_ 开头索引失效</li>
</ul>
<blockquote>
<p><strong>拓展：Alibaba《Java开发手册》</strong></p>
<p>【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM emp WHERE name LIKE &#x27;%ab%&#x27;; --索引失效</span><br></pre></td></tr></table></figure>

<ul>
<li>不等于(!&#x3D; 或者&lt;&gt;)索引失效</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT SQL_NO_CACHE * FROM emp WHERE emp.name = &#x27;abc&#x27; ;</span><br><span class="line">EXPLAIN SELECT SQL_NO_CACHE * FROM emp WHERE emp.name &lt;&gt; &#x27;abc&#x27; ; --索引失效</span><br></pre></td></tr></table></figure>

<ul>
<li>IS NOT NULL 失效 和 IS NULL</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM emp WHERE emp.name IS NULL;</span><br><span class="line">EXPLAIN SELECT * FROM emp WHERE emp.name IS NOT NULL; --索引失效</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>当数据库中的数据的索引列的<code>NULL值达到比较高的比例的时候</code>，即使在IS NOT NULL 的情况下<br>MySQL的查询优化器会选择使用索引，<code>此时type的值是range（范围查询）</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 将 id&gt;20000 的数据的 name 值改为 NULL</span></span><br><span class="line"><span class="keyword">UPDATE</span> emp</span><br><span class="line"><span class="keyword">SET</span> `name` <span class="operator">=</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">WHERE</span> `id` <span class="operator">&gt;</span> <span class="number">20000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 执行查询分析，可以发现 IS NOT NULL 使用了索引</span></span><br><span class="line"><span class="comment">-- 具体多少条记录的值为NULL可以使索引在IS NOT NULL的情况下生效，由查询优化器的算法决定</span></span><br><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> emp.name <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure>

<ul>
<li>类型转换导致索引失效</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line"><span class="comment">--索引失效</span></span><br></pre></td></tr></table></figure>

<ul>
<li>复合索引未用左列字段失效</li>
<li>如果mysql觉得全表扫描更快时（数据少）;</li>
</ul>
<h4 id="036-为什么LIKE以-开头索引会失效？"><a href="#036-为什么LIKE以-开头索引会失效？" class="headerlink" title="036  为什么LIKE以%开头索引会失效？"></a>036  为什么LIKE以%开头索引会失效？</h4><p>id,name,age</p>
<p>name 创建索引</p>
<p>select * from user where name like ‘%明’</p>
<p>type&#x3D;all</p>
<p>select name,id from user where name like ‘%明’</p>
<p>type&#x3D;index</p>
<p>张明</p>
<p>(name,age)</p>
<p>其实并不会完全失效，覆盖索引下会出现type&#x3D;index，表示遍历了索引树，再回表查询，</p>
<p>覆盖索引没有生效的时会直接type&#x3D;all</p>
<p>没有高效使用索引是因为字符串索引会逐个转换成accii码，生成b+树时按首个字符串顺序排序，类似复合索引未用左列字段失效一样，跳过开始部分也就无法使用生成的b+树了</p>
<h3 id="037-一个表有多个索引的时候，能否手动选择使用哪个索引？"><a href="#037-一个表有多个索引的时候，能否手动选择使用哪个索引？" class="headerlink" title="037  一个表有多个索引的时候，能否手动选择使用哪个索引？"></a>037  一个表有多个索引的时候，能否手动选择使用哪个索引？</h3><p>不可用手动直接干预，只能通过mysql优化器自动选择</p>
<h4 id="038-如何查看一个表的索引？"><a href="#038-如何查看一个表的索引？" class="headerlink" title="038  	如何查看一个表的索引？"></a>038  	如何查看一个表的索引？</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show index from t_emp; // 显示表上的索引</span><br><span class="line">explain select * from t_emp where id=1; // 显示可能会用到的索引及最终使用的索引</span><br></pre></td></tr></table></figure>

<h4 id="039-能否查看到索引选择的逻辑？是否使用过optimizer-trace？"><a href="#039-能否查看到索引选择的逻辑？是否使用过optimizer-trace？" class="headerlink" title="039  	能否查看到索引选择的逻辑？是否使用过optimizer_trace？"></a>039  	能否查看到索引选择的逻辑？是否使用过optimizer_trace？</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set session optimizer_trace=&quot;enabled=on&quot;,end_markers_in_json=on;</span><br><span class="line">SELECT * FROM information_schema.OPTIMIZER_TRACE;</span><br><span class="line">set session optimizer_trace=&quot;enabled=off&quot;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="040-多个索引优先级是如何匹配的？"><a href="#040-多个索引优先级是如何匹配的？" class="headerlink" title="040  	多个索引优先级是如何匹配的？"></a>040  	多个索引优先级是如何匹配的？</h4><ol>
<li>主键（唯一索引）匹配</li>
<li>全值匹配（单值匹配）</li>
<li>最左前缀匹配</li>
<li>范围匹配</li>
<li>索引扫描</li>
<li>全表扫描</li>
</ol>
<p>一般性建议</p>
<p>Ø 对于单键索引，尽量选择过滤性更好的索引（例如：手机号，邮件，身份证）</p>
<p>Ø 在选择组合索引的时候，过滤性最好的字段在索引字段顺序中，位置越靠前越好。</p>
<p>Ø 选择组合索引时，尽量包含where中更多字段的索引</p>
<p>Ø 组合索引出现范围查询时，尽量把这个字段放在索引次序的最后面</p>
<p>Ø 尽量避免造成索引失效的情况</p>
<h3 id="041-使用Order-By时能否通过索引排序？"><a href="#041-使用Order-By时能否通过索引排序？" class="headerlink" title="041  	使用Order By时能否通过索引排序？"></a>041  	使用Order By时能否通过索引排序？</h3><p>没有过滤条件不走索引</p>
<h4 id="042-通过索引排序内部流程是什么？"><a href="#042-通过索引排序内部流程是什么？" class="headerlink" title="042  		通过索引排序内部流程是什么？"></a>042  		通过索引排序内部流程是什么？</h4><p>select name,id from user where name like ‘%明’ order by name；</p>
<p>select name,id，age from user where name like ‘%明’</p>
<p>关键配置：</p>
<ul>
<li>sort_buffer可供排序的内存缓冲区大小</li>
<li>max_length_for_sort_data 单行所有字段总和限制，超过这个大小启动双路排序</li>
</ul>
<ol>
<li>通过索引检过滤筛选条件索到需要排序的字段+其他字段（如果是符合索引）</li>
<li>判断索引内容是否覆盖select的字段<ol>
<li>如果覆盖索引，select的字段和排序都在索引上，那么在内存中进行排序，排序后输出结果</li>
<li>如果索引没有覆盖查询字段，接下来计算select的字段是否超过max_length_for_sort_data限制，如果超过，启动双路排序，否则使用单路</li>
</ol>
</li>
</ol>
<h4 id="043-什么是双路排序和单路排序"><a href="#043-什么是双路排序和单路排序" class="headerlink" title="043  		什么是双路排序和单路排序"></a>043  		什么是双路排序和单路排序</h4><p>单路排序：一次取出所有字段进行排序，内存不够用的时候会使用磁盘</p>
<p>双路排序：取出排序字段进行排序，排序完成后再次回表查询所需要的其他字段</p>
<p>如果不在索引列上，filesort有两种算法： mysql就要启动双路排序和单路排序</p>
<p><strong>双路排序（慢）</strong></p>
<p>Select id,age,name from stu order by name;</p>
<p>Ø MySQL 4.1之前是使用双路排序，字面意思就是两次扫描磁盘，最终得到数据， 读取行指针和order<br>by列，对他们进行排序，然后扫描已经排序好的列表，按照列表中的值重新从列表中读取对应的数据输出</p>
<p>Ø 从磁盘取排序字段，在buffer进行排序，再从磁盘取其他字段。</p>
<p>Ø 取一批数据，要对磁盘进行两次扫描，众所周知，I\O是很耗时的，所以在mysql4.1之后，出现了第二种改进的算法，就是单路排序。</p>
<p><strong>单路排序（快）</strong></p>
<p>从磁盘读取查询需要的所有列，按照order by列在buffer对它们进行排序，然后扫描排序后的列表进行输出，<br>它的效率更快一些，避免了第二次读取数据。并且把随机IO变成了顺序IO，但是它会使用更多的空间， 因为它把每一行都保存在内存中了。</p>
<p><strong>结论及引申出的问题</strong></p>
<p>但是用单路有问题</p>
<p>在sort_buffer中，单路比多路要多占用很多空间，因为单路是把所有字段都取出,<br>所以有可能取出的数据的总大小超出了sort_buffer的容量，导致每次只能取sort_buffer容量大小的数据，进行排序（创建tmp文件，多路合并），排完再取sort_buffer容量大小，再排……从而多次I&#x2F;O。</p>
<p>单路本来想省一次I&#x2F;O操作，反而导致了大量的I&#x2F;O操作，反而得不偿失。</p>
<p><strong>优化策略</strong></p>
<p>Ø 增大sort_buffer_size参数的设置</p>
<p>Ø 增大max_length_for_sort_data参数的设置</p>
<p>Ø 减少select 后面的查询的字段。 禁止使用select *</p>
<p><strong>提高Order By的速度</strong></p>
<p>\1. Order by时select * 是一个大忌。只Query需要的字段， 这点非常重要。在这里的影响是：</p>
<p>l 当Query的字段大小总和小于max_length_for_sort_data 而且排序字段不是 TEXT|BLOB 类型时，会用改进后的算法——单路排序，<br>否则用老算法——多路排序。</p>
<p>l 两种算法的数据都有可能超出sort_buffer的容量，超出之后，会创建tmp文件进行合并排序，导致多次I&#x2F;O，但是用单路排序算法的风险会更大一些，所以要提高sort_buffer_size。</p>
<p>\2. 尝试提高 sort_buffer_size</p>
<p>l 不管用哪种算法，提高这个参数都会提高效率，当然，要根据系统的能力去提高，因为这个参数是针对每个进程（connection）的<br>1M-8M之间调整。 MySQL5.7和8.0，InnoDB存储引擎默认值是1048576字节，1MB。</p>
<p>SHOW VARIABLES LIKE ‘%sort_buffer_size%’;</p>
<p>​</p>
<p>\3. 尝试提高 max_length_for_sort_data</p>
<p>l 提高这个参数， 会增加用改进算法的概率。</p>
<p>SHOW VARIABLES LIKE ‘%max_length_for_sort_data%’;</p>
<p>#5.7默认1024字节</p>
<p>#8.0默认4096字节</p>
<p>l<br>但是如果设的太高，数据总容量超出sort_buffer_size的概率就增大，明显症状是高的磁盘I&#x2F;O活动和低的处理器使用率。如果需要返回的列的总长度大于max_length_for_sort_data，使用双路算法，否则使用单路算法。1024-8192字节之间调整</p>
<h4 id><a href="#" class="headerlink" title></a></h4><h4 id="044-group-by-分组和order-by在索引使用上有什么区别？"><a href="#044-group-by-分组和order-by在索引使用上有什么区别？" class="headerlink" title="044  		group by 分组和order by在索引使用上有什么区别？"></a>044  		group by 分组和order by在索引使用上有什么区别？</h4><p>group by 使用索引的原则几乎跟order by一致 ，唯一区别：</p>
<ul>
<li>group by 先排序再分组，遵照索引建的最佳左前缀法则</li>
<li>group by没有过滤条件，也可以用上索引。Order By 必须有过滤条件才能使用上索引。</li>
</ul>
<h3 id="045-如果表中有字段为null，又被经常查询该不该给这个字段创建索引？"><a href="#045-如果表中有字段为null，又被经常查询该不该给这个字段创建索引？" class="headerlink" title="045  	如果表中有字段为null，又被经常查询该不该给这个字段创建索引？"></a>045  	如果表中有字段为null，又被经常查询该不该给这个字段创建索引？</h3><p>应该创建索引，使用的时候尽量使用is null判断。</p>
<ul>
<li>IS NOT NULL 失效 和 IS NULL</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM emp WHERE emp.name IS NULL;</span><br><span class="line">EXPLAIN SELECT * FROM emp WHERE emp.name IS NOT NULL; --索引失效</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>当数据库中的数据的索引列的<code>NULL值达到比较高的比例的时候</code>，即使在IS NOT NULL 的情况下<br>MySQL的查询优化器会选择使用索引，<code>此时type的值是range（范围查询）</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 将 id&gt;20000 的数据的 name 值改为 NULL</span></span><br><span class="line"><span class="keyword">UPDATE</span> emp</span><br><span class="line"><span class="keyword">SET</span> `name` <span class="operator">=</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">WHERE</span> `id` <span class="operator">&gt;</span> <span class="number">20000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 执行查询分析，可以发现 IS NOT NULL 使用了索引</span></span><br><span class="line"><span class="comment">-- 具体多少条记录的值为NULL可以使索引在IS NOT NULL的情况下生效，由查询优化器的算法决定</span></span><br><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> emp.name <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure>

<h4 id="046-有字段为null索引是否会失效？"><a href="#046-有字段为null索引是否会失效？" class="headerlink" title="046  		有字段为null索引是否会失效？"></a>046  		有字段为null索引是否会失效？</h4><p>不一定会失效，每一条sql具体有没有使用索引 可以通过trace追踪一下</p>
<p>最好还是给上默认值</p>
<p>数字类型的给0，字符串给个空串“”，</p>
<p>参考上一题</p>
<h2 id="二-MySQL-内部技术架构"><a href="#二-MySQL-内部技术架构" class="headerlink" title="二 MySQL 内部技术架构"></a>二 MySQL 内部技术架构</h2><p><img src="/image-20221028155608009.png" alt="image-20221028155608009"></p>
<h3 id="047-Mysql内部支持缓存查询吗？"><a href="#047-Mysql内部支持缓存查询吗？" class="headerlink" title="047 Mysql内部支持缓存查询吗？"></a><img src="/29f7e85dea17e100b38b450d9949a330.png" alt="img">047 Mysql内部支持缓存查询吗？</h3><p>当MySQL接收到客户端的查询SQL之后，仅仅只需要对其进行相应的权限验证之后，就会通过Query<br>Cache来查找结果，甚至都不需要经过Optimizer模块进行执行计划的分析优化，更不需要发生任何存储引擎的交互</p>
<p>mysql5.7支持内部缓存，8.0之后就废弃掉了</p>
<h4 id="048-mysql8为何废弃掉查询缓存？"><a href="#048-mysql8为何废弃掉查询缓存？" class="headerlink" title="048 	mysql8为何废弃掉查询缓存？"></a>048 	mysql8为何废弃掉查询缓存？</h4><p>缓存的意义在于快速查询提升系统性能，可以灵活控制缓存的一致性</p>
<p>mysql缓存的限制</p>
<ol>
<li>mysql基本没有手段灵活的管理缓存失效和生效，尤其对于频繁更新的表</li>
<li>SQL必须完全一致才会导致cache命中</li>
<li>为了节省内存空间，太大的result set不会被cache (&lt; query_cache_limit)；</li>
<li>MySQL缓存在分库分表环境下是不起作用的；</li>
<li>执行SQL里有触发器,自定义函数时，MySQL缓存也是不起作用的；</li>
<li>在表的结构或数据发生改变时，基于该表相关cache立即全部失效。</li>
</ol>
<h4 id="049-替代方案是什么？"><a href="#049-替代方案是什么？" class="headerlink" title="049 	替代方案是什么？"></a>049 	替代方案是什么？</h4><p>应用层组织缓存，最简单的是使用redis，ehcached等</p>
<h3 id="050-Mysql内部有哪些核心模块组成，作用是什么？"><a href="#050-Mysql内部有哪些核心模块组成，作用是什么？" class="headerlink" title="050 Mysql内部有哪些核心模块组成，作用是什么？"></a>050 Mysql内部有哪些核心模块组成，作用是什么？</h3><p><img src="/image-20220627113443003.png" alt="image-20220627113443003"></p>
<p><strong>Connectors（客户端）</strong></p>
<p>MySQL服务器之外的客户端程序，与具体的语言相关，例如Java中的JDBC，图形用户界面SQLyog等。<code>本质上都是在TCP连接上通过MySQL协议和MySQL服务器进行通信。</code></p>
<p><strong>MySQL Server（服务器）</strong></p>
<p><strong>第1层：连接层</strong></p>
<ul>
<li>系统（客户端）访问 MySQL 服务器前，做的<code>第一件事就是建立 TCP 连接</code>。</li>
<li>经过三次握手建立连接成功后， MySQL 服务器对 TCP 传输过来的账号密码做<code>身份认证、权限获取</code>。<ul>
<li>用户名或密码不对<code>，会收到一个</code>Access denied for user<code>错误，客户端程序结束执行</code></li>
<li><code>用户名密码认证通过</code>，会从权限表<code>查出账号拥有的权限</code>与连接关联，之后的权限判断逻辑，都将依赖于此时读到的权限</li>
</ul>
</li>
<li>TCP 连接收到请求后，必须要分配给一个线程专门与这个客户端的交互。所以还会有个线程池，去走后面的流程。每一个连接从线程池中获取线程，省去了创建和销毁线程的开销。</li>
</ul>
<p><strong>第2层：服务层</strong></p>
<p><strong>Management Serveices &amp; Utilities： 系统管理和控制工具</strong></p>
<p><strong>SQL Interface：SQL接口：</strong></p>
<ul>
<li><code>接收用户的SQL命令，并且返回用户需要查询的结果。</code>比如SELECT … FROM就是调用SQL Interface</li>
<li>MySQL支持DML（数据操作语言）、DDL（数据定义语言）、存储过程、视图、触发器、自定义函数等多种SQL语言接口</li>
</ul>
<p><strong>Parser：解析器：</strong></p>
<ul>
<li>在SQL命令传递到解析器的时候会被解析器验证和解析。解析器中SQL 语句进行<code>语法分析、语法解析</code>，并为其创建<code>语法树</code>。</li>
<li></li>
</ul>
<p><strong>语法分析</strong></p>
<p>语法分析主要是把输入转化成若干个tokens，包含key和非key。</p>
<p>在分析之后，会得到4个Token，其中有2个key，它们分别是SELECT、FROM。</p>
<table>
<thead>
<tr>
<th>key</th>
<th>非key</th>
<th>key</th>
<th>非key</th>
</tr>
</thead>
<tbody><tr>
<td>SELECT</td>
<td>age</td>
<td>FROM</td>
<td>user</td>
</tr>
</tbody></table>
<ul>
<li>典型的解析树如下：</li>
</ul>
<p><img src="/image-20220702002430362.png" alt="image-20220702002430362"></p>
<p><strong>Optimizer：查询优化器：</strong></p>
<ul>
<li>SQL语句在语法解析后、查询前会使用查询优化器对查询进行优化，<code>确定SQL语句的执行路径，生成一个执行计划</code>。</li>
</ul>
<p><strong>Caches &amp; Buffers： 查询缓存组件：</strong></p>
<ul>
<li>MySQL内部维持着一些Cache和Buffer，比如Query<br>Cache用来缓存一条SELECT语句的执行结果，如果能够在其中找到对应的查询结果，那么就不必再进行查询解析、查询优化和执行的整个过程了，直接将结果反馈给客户端。</li>
<li>这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，key缓存，权限缓存等 。</li>
<li>这个查询缓存可以在不同客户端之间共享 。</li>
</ul>
<p><strong>第3层：引擎层</strong></p>
<p>插件式存储引擎层（ Storage<br>Engines），<code>负责MySQL中数据的存储和提取，对物理服务器级别维护的底层数据执行操作，服务器通过API与存储引擎进行通信</code><br>。不同的存储引擎具有的功能不同，管理的表有不同的存储结构，采用的存取算法也不同，这样我们可以根据自己的实际需要进行选取。例如MyISAM引擎和InnoDB引擎。</p>
<p><strong>存储层</strong></p>
<p>所有的数据、数据库、表的定义、表的每一行的内容、索引，都是存在<code>文件系统</code> 上，以文件的方式存在，并完成与存储引擎的交互。</p>
<h3 id="051-一条sql发送给mysql后，内部是如何执行的？（说一下-MySQL-执行一条查询语句的内部执行过程？）"><a href="#051-一条sql发送给mysql后，内部是如何执行的？（说一下-MySQL-执行一条查询语句的内部执行过程？）" class="headerlink" title="051 一条sql发送给mysql后，内部是如何执行的？（说一下 MySQL 执行一条查询语句的内部执行过程？）"></a>051 一条sql发送给mysql后，内部是如何执行的？（说一下 MySQL 执行一条查询语句的内部执行过程？）</h3><p>1.5、查询流程说明</p>
<p><img src="/%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="image-20220627141453944"></p>
<p>**<br>首先，**<code>MySQL客户端通过协议与MySQL服务器建连接，通过SQL接口发送SQL语句，先检查查询缓存，如果命中，直接返回结果，否则进行语句解析。</code><br>也就是说，在解析查询之前，服务器会先访问查询缓存，如果某个查询结果已经位于缓存中，服务器就不会再对查询进行解析、优化、以及执行。它仅仅将缓存中的结果返回给用户即可，这将大大提高系统的性能。</p>
<p><strong>接下来，</strong><code>MySQL解析器通过关键字将SQL语句进行解析，并生成一棵对应的解析树，</code><br>解析器使用MySQL语法规则验证和解析SQL语句。例如，它将验证是否使用了错误的关键字，或者使用关键字的顺序是否正确，引号能否前后匹配等；<code>预处理器则根据MySQL规则进一步检查解析树是否合法，</code><br>例如，这里将检查数据表和数据列是否存在，还会解析名字和别名，看是否有歧义等。<code>然后预处理器会进行查询重写，生成一棵新解析树。</code></p>
<p><strong>接下来，</strong><code>查询优化器将解析树转化成执行计划。</code><br>MySQL优化程序会对我们的语句做一些优化，如子查询转换为连接、表达式简化等等。优化的结果就是生成一个执行计划，这个执行计划表明了应该使用哪些索引执行查询，以及表之间的连接顺序是啥样，等等。我们可以使用EXPLAIN语句来查看某个语句的执行计划。</p>
<p><strong>最后，</strong><code>进入执行器阶段。</code>完成查询优化后，<code>查询执行引擎</code><br>会按照生成的执行计划调用存储引擎提供的接口执行SQL查询并将结果返回给客户端。在MySQL8以下的版本，如果设置了查询缓存，这时会将查询结果进行缓存，再返回给客户端。</p>
<img src="/PeachesIsland/PeachesIsland.github.io/2023/01/23/mysql/mysql-zhi-shi-dian-zong-jie/mysql-mian-shi-ti/b44f857a9bdedcd6a2d53a3971fae7db.png" alt="img">

<h4 id="052-MySQL-提示“不存在此列”是执行到哪个节点报出的？"><a href="#052-MySQL-提示“不存在此列”是执行到哪个节点报出的？" class="headerlink" title="052 MySQL 提示“不存在此列”是执行到哪个节点报出的？"></a>052 MySQL 提示“不存在此列”是执行到哪个节点报出的？</h4><p>是在Parser：解析器 分析sql语法的时候检查的列。</p>
<h3 id="053-如果一张表创建了多个索引，在哪个阶段或模块进行的索引选择？"><a href="#053-如果一张表创建了多个索引，在哪个阶段或模块进行的索引选择？" class="headerlink" title="053 如果一张表创建了多个索引，在哪个阶段或模块进行的索引选择？"></a>053 如果一张表创建了多个索引，在哪个阶段或模块进行的索引选择？</h3><p>在优化器阶段<strong>Optimizer：查询优化器：</strong></p>
<h3 id="054-MySQL-支持哪些存储引擎？默认使用哪个？"><a href="#054-MySQL-支持哪些存储引擎？默认使用哪个？" class="headerlink" title="054 MySQL 支持哪些存储引擎？默认使用哪个？"></a>054 MySQL 支持哪些存储引擎？默认使用哪个？</h3><p>查看MySQL提供什么存储引擎</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> ENGINES;</span><br></pre></td></tr></table></figure>

<p>下面的结果表示MySQL中默认使用的存储引擎是InnoDB，支持事务，行锁，外键，支持分布式事务(XA)，支持保存点(回滚)</p>
<p><img src="/image-20220703164220030.png" alt="image-20220703164220030"></p>
<p>也可以通过以下语句查看默认的存储引擎：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%default_storage_engine%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220703170334348.png" alt="image-20220703170334348"></p>
<h3 id="055-Mysql8-0自带哪些存储引擎？分别是做什么的？"><a href="#055-Mysql8-0自带哪些存储引擎？分别是做什么的？" class="headerlink" title="055 Mysql8.0自带哪些存储引擎？分别是做什么的？"></a>055 Mysql8.0自带哪些存储引擎？分别是做什么的？</h3><p><code>1. InnoDB存储引擎</code></p>
<ul>
<li><p>InnoDB是MySQL的默认事务型引擎，它被设计用来<code>处理大量的短期(short-lived)事务</code>。可以确保事务的完整提交(Commit)和回滚(<br>Rollback)。</p>
</li>
<li><p>除非有非常特别的原因需要使用其他的存储引擎，否则<code>应该优先考虑InnoDB引擎</code>。</p>
</li>
<li><p>数据文件结构：</p>
<ul>
<li>表名.frm 存储表结构（MySQL8.0时，合并在表名.ibd中）</li>
</ul>
</li>
<li><p>表名.ibd 存储数据和索引</p>
</li>
<li><p>InnoDB不仅缓存索引还要缓存真实数据， 对内存要求较 高 ，而且内存大小对性能有决定性的影响。</p>
</li>
</ul>
<p><code>2. MyISAM存储引擎</code></p>
<ul>
<li><p>MyISAM提供了大量的特性，包括全文索引、压缩、空间函数(GIS)等，但<code>MyISAM不支持事务和行级锁</code>，有一个毫无疑问的缺陷就是崩溃后无法安全恢复。</p>
</li>
<li><p>优势是访问的 速度快 ，对事务完整性没有要求或者以SELECT、INSERT为主的应用。</p>
</li>
<li><p>数据文件结构：</p>
<ul>
<li>表名.frm 存储表结构</li>
</ul>
</li>
<li><p>表名.MYD 存储数据</p>
</li>
<li><p>表名.MYI 存储索引</p>
</li>
<li><p>MyISAM只缓存索引，不缓存真实数据。</p>
</li>
</ul>
<p><code>3. Archive引擎</code></p>
<ul>
<li><code>Archive档案存储引擎只支持INSERT和SELECT操作</code>。</li>
<li>Archive表适合日志和数据采集（档案）类应用。</li>
<li>根据英文的测试结论来看，Archive表比MyISAM表要小大约75%，比支持事务处理的InnoDB表小大约83%。</li>
</ul>
<p><code>4. Blackhole引擎</code></p>
<ul>
<li><code>Blackhole引擎没有实现任何存储机制，它会丢弃所有插入的数据，不做任何保存</code>。</li>
<li>但服务器会记录Blackhole表的日志，所以可以用于复制数据到备库，或者简单地记录到日志。但这种应用方式会碰到很多问题，因此并不推荐。</li>
</ul>
<p><code>5. CSV引擎</code></p>
<ul>
<li><code>CSV引擎可以将普通的CSV文件作为MySQL的表来处理，但不支持索引</code>。</li>
<li>CSV引擎可以作为一种数据交换的机制，非常有用。</li>
<li>CSV存储的数据直接可以在操作系统里，用文本编辑器，或者excel读取。</li>
</ul>
<p><code>6. Memory引擎</code></p>
<ul>
<li>如果需要快速地访问数据，并且这些数据不会被修改，重启以后丢失也没有关系，那么使用Memory表是非常有用。</li>
<li>Memory表至少比MyISAM表要快一个数量级。</li>
</ul>
<p><code>7. Federated引擎</code></p>
<ul>
<li><code>Federated引擎是访问其他MySQL服务器的一个代理（跨库关联查询）</code>，尽管该引擎看起来提供了一种很好的跨服务器的灵活性，但也经常带来问题，因此默认是禁用的。</li>
</ul>
<h3 id="056-MySQL-存储引擎架构了解吗？"><a href="#056-MySQL-存储引擎架构了解吗？" class="headerlink" title="056 MySQL 存储引擎架构了解吗？"></a>056 MySQL 存储引擎架构了解吗？</h3><p><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-architecture.html">https://dev.mysql.com/doc/refman/5.7/en/innodb-architecture.html</a></p>
<p>下面是官方的InnoDB引擎结构图，主要分为内存结构和磁盘结构两大部分。</p>
<p><img src="/16701032-f8547d110ba34135.png" alt="img"></p>
<p><strong>内存区域</strong></p>
<p><strong>Buffer Pool</strong>:在InnoDB访问表记录和索引时会在Buffer Pool的页中缓存，以后使用可以减少磁盘IO操作，提升效率。主要用来缓存热的数据页和索引页。</p>
<p><strong>Log Buffer</strong>：用来缓存redolog</p>
<p><strong>Adaptive Hash Index</strong>：自适应哈希索引</p>
<p><strong>Change Buffer</strong>:它是一种应用在非唯一普通索引页（non-unique secondary index<br>page）不在缓冲池中，对页进行了写操作，并不会立刻将磁盘页加载到缓冲池，而仅仅记录缓冲变更（Buffer<br>Changes），等未来数据被读取时，再将数据合并（Merge）恢复到缓冲池中的技术。写缓冲的目的是降低写操作的磁盘IO，提升数据库性能。</p>
<p><strong>磁盘区域</strong></p>
<p>磁盘中的结构分为两大类：表空间和重做日志。</p>
<ul>
<li>表空间：分为系统表空间(MySQL 目录的 ibdata1 文件)，临时表空间，常规表空间，Undo 表空间以及 file-per-table 表空间(<br>MySQL5.7默认打开file_per_table 配置）。系统表空间又包括了InnoDB数据字典，双写缓冲区(Doublewrite Buffer)，修改缓存(Change<br>Buffer），Undo日志等。</li>
<li>Redo日志：存储的就是 Log Buffer 刷到磁盘的数据。</li>
</ul>
<p>官方文档：</p>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-storage-engine.html">https://dev.mysql.com/doc/refman/8.0/en/innodb-storage-engine.html</a></p>
<h4 id="057-能否单独为一张表设置存储引擎？"><a href="#057-能否单独为一张表设置存储引擎？" class="headerlink" title="057 	能否单独为一张表设置存储引擎？"></a>057 	能否单独为一张表设置存储引擎？</h4><h3 id="-1"><a href="#-1" class="headerlink" title></a></h3><p><code>方法1：</code></p>
<p>设置默认存储引擎：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> DEFAULT_STORAGE_ENGINE <span class="operator">=</span> MyISAM;</span><br></pre></td></tr></table></figure>

<p><code>方法2：</code></p>
<p>或者修改 my.cnf 文件：vim &#x2F;etc&#x2F;my.cnf<br>新增一行：default-storage-engine&#x3D;MyISAM<br>重启MySQL：systemctl restart mysqld</p>
<p><code>方法3：</code></p>
<p>我们可以为 不同的表设置不同的存储引擎</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名</span><br><span class="line">(</span><br><span class="line">    建表语句;</span><br><span class="line">) ENGINE <span class="operator">=</span> 存储引擎名称;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名</span><br><span class="line">    ENGINE <span class="operator">=</span> 存储引擎名称;</span><br></pre></td></tr></table></figure>

<h4 id="058-阿里、京东等大厂都有自研的存储引擎，如何开发一套自己的？"><a href="#058-阿里、京东等大厂都有自研的存储引擎，如何开发一套自己的？" class="headerlink" title="058 	阿里、京东等大厂都有自研的存储引擎，如何开发一套自己的？"></a>058 	阿里、京东等大厂都有自研的存储引擎，如何开发一套自己的？</h4><p>开发存储引擎并不难，难的是开发出来高效的有意义的存储引擎。</p>
<p>简单例子可以看一下官方源码中的示例，可以实现一个什么也没做的存储引擎。</p>
<p>有兴趣可以参考官方文档：<a href="https://dev.mysql.com/doc/dev/mysql-server/latest/">https://dev.mysql.com/doc/dev/mysql-server/latest/</a></p>
<h3 id="059-MyISAM-和-InnoDB-的区别是什么？"><a href="#059-MyISAM-和-InnoDB-的区别是什么？" class="headerlink" title="059 MyISAM 和 InnoDB 的区别是什么？"></a>059 MyISAM 和 InnoDB 的区别是什么？</h3><p>外键 事务 锁</p>
<table>
<thead>
<tr>
<th><strong>对比项</strong></th>
<th><strong>MyISAM</strong></th>
<th><strong>InnoDB</strong></th>
</tr>
</thead>
<tbody><tr>
<td>外键</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>事务</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>行表锁</td>
<td>表锁，即使操作一条记录也会锁住整个表，不适合高并发的操作</td>
<td>行锁，操作时只锁某一行，不对其它行有影响，适合高并发的操作</td>
</tr>
<tr>
<td>缓存</td>
<td>只缓存索引，不缓存真实数据</td>
<td>不仅缓存索引还要缓存真实数据，对内存要求较高，而且内存大小对性能有决定性的影响</td>
</tr>
<tr>
<td>关注点</td>
<td>并发查询，节省资源、消耗少、简单业务</td>
<td>并发写、事务、多表关系、更大资源</td>
</tr>
<tr>
<td>默认安装</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>默认使用</td>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td>自带系统表使用</td>
<td>Y</td>
<td>N</td>
</tr>
</tbody></table>
<h4 id="060-具体说一下如何做技术选型"><a href="#060-具体说一下如何做技术选型" class="headerlink" title="060 	具体说一下如何做技术选型"></a>060 	具体说一下如何做技术选型</h4><p>除非几乎没有写操作全部都是高频的读操作可以选择MyISAM作为表的存储引擎，其他业务可以一律使用InnoDB。</p>
<h2 id="三-mysql-事务"><a href="#三-mysql-事务" class="headerlink" title="三 mysql 事务"></a>三 mysql 事务</h2><h3 id="061-什么是数据库事务？事务的特性是什么？"><a href="#061-什么是数据库事务？事务的特性是什么？" class="headerlink" title="061 什么是数据库事务？事务的特性是什么？"></a>061 什么是数据库事务？事务的特性是什么？</h3><p><strong>事务</strong>：</p>
<ul>
<li><p>是数据库操作的最小工作单元，是作为单个逻辑工作单元执行的一系列操作；</p>
</li>
<li><p>这些操作作为一个整体一起向系统提交，要么都执行、要么都不执行；</p>
</li>
<li><p>事务是一组不可再分割的操作集合（工作逻辑单元）</p>
</li>
</ul>
<p>事务都有 <strong>ACID</strong> 特性</p>
<h4 id="062-什么是ACID？"><a href="#062-什么是ACID？" class="headerlink" title="062 	什么是ACID？"></a>062 	什么是ACID？</h4><p><strong>1 、原子性</strong>  atomicity</p>
<p>过程的保证</p>
<p><strong>只做一个步骤</strong></p>
<p>1 给钱</p>
<p>2 去买</p>
<p>3 交回来</p>
<p>事务是数据库的逻辑工作单位，事务中包含的各操作<strong>要么都做，要么都不做</strong></p>
<p><strong>2 、一致性</strong>  consistency</p>
<p>结果的保证</p>
<p><strong>保证要吃完</strong> 刚张嘴挂了，失去一致性</p>
<p>事 务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。因此当数据库只包含成功事务提交的结果时，就说数据库处于一致性状态。如果数据库系统<br>运行中发生故障，有些事务尚未完成就被迫中断，这些未完成事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态，或者说是<br>不一致的状态。<br><strong>3 、隔离性</strong> isolation</p>
<p>并发事务互相干扰</p>
<p><strong>不被干扰</strong> 刚张嘴别人塞了东西</p>
<p>一个事务的执行不能其它事务干扰。即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰。<br><strong>4 、持续性</strong> <strong>永久性</strong> durability</p>
<p><strong>保存</strong> 吃到肚子里</p>
<p>也称永久性，指一个事务一旦提交，它对数据库中的数据的改变就应该是永久性的。接下来的其它操作或故障不应该对其执行结果有任何影响。</p>
<h3 id="063-并发事务会有哪些问题？"><a href="#063-并发事务会有哪些问题？" class="headerlink" title="063 并发事务会有哪些问题？"></a>063 并发事务会有哪些问题？</h3><p>多个事务并发执行一定会产生相互争夺资源的问题</p>
<h4 id="064什么是脏读-065丢失修改-066不可重复读-067幻读"><a href="#064什么是脏读-065丢失修改-066不可重复读-067幻读" class="headerlink" title="064	什么是脏读    065	丢失修改    066	不可重复读 067	幻读"></a>064	什么是脏读    065	丢失修改    066	不可重复读 067	幻读</h4><h4 id="-2"><a href="#-2" class="headerlink" title></a></h4><p><strong>脏读（Dirty read）</strong></p>
<p>是一个事务在处理过程中读取了另外一个事务未提交的数据</p>
<p>当一个事务正在访问数据并且对其进行了修改，但是还没提交事务，这时另外一个事务也访问了这个数据，然后使用了这个数据，因为这个数据的修改还没提交到数据库，所以另外一个事务读取的数据就是“**<br>脏数据<strong>”，这种行为就是“</strong>脏读<strong>”，依据“</strong>脏数据**”所做的操作可能是会出现问题的。</p>
<p><strong>修改丢失（Lost of modify）</strong></p>
<ul>
<li>是指一个事务读取一个数据时，另外一个数据也访问了该数据，那么在第一个事务修改了这个数据之后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，这种情况就被称为**<br>修改丢失</li>
</ul>
<p><strong>不可重复读（Unrepeatableread）</strong></p>
<p>*<em>指在一个事务内多<strong>次读取同一数据</strong>，在这个事务还没结束时，另外一个事务也访问了这个数据并*<em>对这个数据进行了修改</em></em><br>，那么就可能造成第一个事务两次读取的数据不一致，这种情况就被称为**不可重复读。</p>
<p><strong>幻读（Phantom read）</strong></p>
<p>是指同一个事务内多次查询返回的结果集总数不一样（比如增加了或者减少了行记录）。</p>
<p>幻读与不可重复读类似，幻读是指一个事务<strong>读取了几行数据</strong>，这个事务还没结束，接着另外一个事务<strong>插入了一些数据</strong><br>，在随后的查询中，第一个事务读取到的数据就会<strong>比原本读取到的多</strong>，就好像发生了幻觉一样，所以称为**幻读**。</p>
<h4 id="-3"><a href="#-3" class="headerlink" title></a></h4><h4 id="068-不可重复读和幻读有什么区别？"><a href="#068-不可重复读和幻读有什么区别？" class="headerlink" title="068 不可重复读和幻读有什么区别？"></a>068 不可重复读和幻读有什么区别？</h4><p>不可重复读 针对的是一份数据的修改</p>
<p>幻读 针对的是行数修改</p>
<h3 id="069-Mysql是如何避免事务并发问题的？"><a href="#069-Mysql是如何避免事务并发问题的？" class="headerlink" title="069 Mysql是如何避免事务并发问题的？"></a>069 Mysql是如何避免事务并发问题的？</h3><p>避免事务并发问题是需要付出性能代价的，此时和分布式系统设计一样（CAP定理及base理论），为了保证一致性就一定会牺牲性能，要做取舍</p>
<p>在mysql内部通过加锁的方式实现好了解决方案可供选择，就是配置事务隔离级别</p>
<h4 id="070什么是事务隔离级别？"><a href="#070什么是事务隔离级别？" class="headerlink" title="070	什么是事务隔离级别？"></a>070	什么是事务隔离级别？</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">事务隔离级别                    脏读     不可重复读(被修改)    幻读（删减）</span><br><span class="line">读未提交（<span class="keyword">read</span>-<span class="keyword">uncommitted</span>）    是        是            是</span><br><span class="line">不可重复读（<span class="keyword">read</span>-<span class="keyword">committed</span>）    否        是            是</span><br><span class="line">可重复读（<span class="keyword">repeatable</span>-<span class="keyword">read</span>）     否        否            是</span><br><span class="line">串行化（<span class="keyword">serializable</span>）          否        否            否</span><br></pre></td></tr></table></figure>

<h4 id="071默认的级别是什么？"><a href="#071默认的级别是什么？" class="headerlink" title="071	默认的级别是什么？"></a>071	默认的级别是什么？</h4><p><code>MySQL InnoDB</code>存储引擎默认的事务隔离级别是<strong>可重复读（REPEATABLE-READ）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL 5.7 SELECT @@tx_isolation;</span><br><span class="line">MySQL 8.0 SELECT @@transaction_isolation;</span><br></pre></td></tr></table></figure>

<h4 id="072如何选择事务隔离级别？"><a href="#072如何选择事务隔离级别？" class="headerlink" title="072	如何选择事务隔离级别？"></a>072	如何选择事务隔离级别？</h4><p>隔离级别越低，事务请求的锁越少相应性能也就越高，如没有特殊要求或有错误发生，使用默认的隔离级别即可，如果系统中有高频读写并且对一致性要求高那么就需要比较高的事务隔离级别甚至串行化。</p>
<h4 id="073-靠缓存可以提升高事务隔离级别的性能吗？"><a href="#073-靠缓存可以提升高事务隔离级别的性能吗？" class="headerlink" title="073 靠缓存可以提升高事务隔离级别的性能吗？"></a>073 靠缓存可以提升高事务隔离级别的性能吗？</h4><p>提升事务级别的目的本质是提供更高的数据一致性，如果前置有缓存，那么缓存只能提供高效读并不能保证数据及时一致性，相反的我们还需要对缓存管理有额外的开销。</p>
<h3 id="074-Mysql事务隔离是如何实现的？"><a href="#074-Mysql事务隔离是如何实现的？" class="headerlink" title="074 Mysql事务隔离是如何实现的？"></a>074 Mysql事务隔离是如何实现的？</h3><p>隔离的实现主要是读写锁和MVCC</p>
<h4 id="075什么是一致性非锁定读和锁定读？"><a href="#075什么是一致性非锁定读和锁定读？" class="headerlink" title="075	什么是一致性非锁定读和锁定读？"></a>075	什么是一致性非锁定读和锁定读？</h4><p><strong>锁定读</strong></p>
<p>使用到了读写锁</p>
<p>读写锁是最简单直接的的事务隔离实现方式</p>
<ul>
<li>每次读操作需要获取一个共享(读)锁，每次写操作需要获取一个写锁。</li>
<li>共享锁之间不会产生互斥，共享锁和写锁之间、以及写锁与写锁之间会产生互斥。</li>
<li>当产生锁竞争时，需要等待其中一个操作释放锁后，另一个操作才能获取到锁。</li>
</ul>
<p>锁机制，解决的就是<strong>多个事务同时更新数据</strong>，此时必须要有一个加锁的机制</p>
<ul>
<li>行锁（记录锁）：解决的就是<strong>多个事务同时更新一行数据</strong></li>
<li>间隙锁：解决的就是<strong>多个事务同时更新多行数据</strong></li>
</ul>
<p>下列操作属于锁定读</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select ... lock in share mode</span><br><span class="line">select ... for update</span><br><span class="line">insert、update、delete</span><br></pre></td></tr></table></figure>

<p><strong>非锁定读</strong></p>
<p>v10 -&gt; age&#x3D;18</p>
<p>v11 -&gt;age&#x3D;19</p>
<p>v12 -&gt;age&#x3D;15</p>
<p>使用mvcc 多版本控制实现</p>
<h4 id="076说一下MVCC内部细节"><a href="#076说一下MVCC内部细节" class="headerlink" title="076	说一下MVCC内部细节"></a>076	说一下MVCC内部细节</h4><p><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-multi-versioning.html">https://dev.mysql.com/doc/refman/5.7/en/innodb-multi-versioning.html</a></p>
<p>Multi-Version Concurrency Control 多版本并发控制，<em>MVCC</em> 是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问</p>
<p>InnoDB是一个多版本的存储引擎。它保存有关已更改行的旧版本的信息，以支持并发和回滚等事务特性。这些信息存储在一个称为回滚段的数据结构中的系统表空间或undo表空间中。参见第14.6.3.4节“撤消表空间”。InnoDB使用回滚段中的信息来执行事务回滚所需的撤消操作。它还使用这些信息构建行的早期版本，以实现一致的读取</p>
<p>MVCC 的实现依赖于：隐藏字段、Read View、undo log</p>
<p><strong>隐藏字段</strong></p>
<ul>
<li>A 6-byte <code>DB_TRX_ID</code> 用来标识最近一次对本行记录做修改 (insert 、update) 的事务的标识符 ，即最后一次修改本行记录的事务<br>id。 如果是 delete 操作， 在 InnoDB 存储引擎内部也属于一次 update 操作，即更新行中的一个特殊位 ，将行标识为己删除，并非真正删除。</li>
<li>A 7-byte <code>DB_ROLL_PTR</code> 回滚指针，指向该行的 undo log 。如果该行未被更新，则为空.</li>
<li>A 6-byte <code>DB_ROW_ID</code> 如果没有设置主键且该表没有唯一非空索引时，<code>InnoDB</code> 会使用该 id 来生成聚簇索引.</li>
</ul>
<p><strong>Read View</strong></p>
<p>不同的事务隔离级别中，当有事物在执行过程中修改了数据（更新版本号），在并发事务时需要判断一下版本链中的哪个版本是当前事务可见的。为此InnoDB有了ReadView的概念，使用ReadView来记录和隔离不同事务并发时此记录的哪些版本是对当前访问事物可见的。</p>
<p><strong>undo log</strong></p>
<p>除了用来回滚数据，还可以读取可见版本的数据。以此实现非锁定读</p>
<h4 id="077Mysql事务一致性，原子性是如何实现的？"><a href="#077Mysql事务一致性，原子性是如何实现的？" class="headerlink" title="077Mysql事务一致性，原子性是如何实现的？"></a>077Mysql事务一致性，原子性是如何实现的？</h4><p>首先是通过锁和mvcc实现了执行过程中的一致性和原子性</p>
<p>其次是在灾备方面通过Redo log实现，Redo log会把事务在执行过程中对数据库所做的所有修改都记录下来，在之后系统崩溃重启后可以把事务所做的任何修改都恢复出来。</p>
<h4 id="078Mysql事务的持久性是如何实现的？"><a href="#078Mysql事务的持久性是如何实现的？" class="headerlink" title="078Mysql事务的持久性是如何实现的？"></a>078Mysql事务的持久性是如何实现的？</h4><p>使用Redo log保证了事务的持久性。当事务提交时，必须先将事务的所有日志写入日志文件进行持久化，就是我们常说的WAL(write ahead<br>log)机制，如果出现断电重启便可以从redolog中恢复，如果redolog写入失败那么也就意味着修改失败整个事务也就直接回滚了。</p>
<h4 id="079-表级锁和行级锁有什么区别？"><a href="#079-表级锁和行级锁有什么区别？" class="headerlink" title="079  表级锁和行级锁有什么区别？"></a>079  表级锁和行级锁有什么区别？</h4><p>表级锁：串行化（serializable）时，整表加锁，事务访问表数据时需要申请锁，虽然可分为读锁和写锁，但毕竟是锁住整张表，会导致并发能力下降，一般是做ddl处理时使用</p>
<p>行级锁：除了串行化（serializable）时 InnoDB使用的都是行级锁，只锁一行数据，其他行数据不影响，并发能力强。</p>
<h4 id="080什么是行级锁？Mysql如何完成的？"><a href="#080什么是行级锁？Mysql如何完成的？" class="headerlink" title="080	什么是行级锁？Mysql如何完成的？"></a>080	什么是行级锁？Mysql如何完成的？</h4><p>行级锁实现比较复杂不是单纯锁住一行数据，是由mvcc完成的。</p>
<h4 id="081什么是共享锁（读锁）？"><a href="#081什么是共享锁（读锁）？" class="headerlink" title="081	什么是共享锁（读锁）？"></a>081	什么是共享锁（读锁）？</h4><p>共享锁或S锁，其它事务可以继续加共享锁，但不能加排它锁</p>
<h4 id="082什么是排它锁（写锁-x2F-独占锁）？"><a href="#082什么是排它锁（写锁-x2F-独占锁）？" class="headerlink" title="082	什么是排它锁（写锁&#x2F;独占锁）？"></a>082	什么是排它锁（写锁&#x2F;独占锁）？</h4><p>排它锁或X锁，在进行写操作之前要申请并获得，其它事务不能再获得任何锁。</p>
<h4 id="083什么是意向锁？"><a href="#083什么是意向锁？" class="headerlink" title="083	什么是意向锁？"></a>083	什么是意向锁？</h4><p>它分为意向共享锁（IS）和意向排他锁（IX）</p>
<p>一个事务对一张表的某行添加共享锁前，必须获得对该表一个IS锁或者优先级更高的锁。<br>一个事务对一张表的某行添加排他锁之前，它必须对该表获取一个IX锁。</p>
<p>意向锁属于表锁，它不与innodb中的行锁冲突，任意两个意向锁之间也不会产生冲突，但是会与表锁（S锁和X锁）产生冲突</p>
<h4 id="084InnoDB支持哪几种锁？"><a href="#084InnoDB支持哪几种锁？" class="headerlink" title="084	InnoDB支持哪几种锁？"></a>084	InnoDB支持哪几种锁？</h4><p>表锁，行锁，间隙锁，Next-Key锁等</p>
<p>在Serializable中读加共享锁，写加排他锁，读写互斥</p>
<p>两段锁协议，将事务分成两个阶段，加锁阶段和解锁阶段（所以叫两段锁）</p>
<h4 id="085当前读和快照读分别是什么？"><a href="#085当前读和快照读分别是什么？" class="headerlink" title="085	当前读和快照读分别是什么？"></a>085	当前读和快照读分别是什么？</h4><p>当前读 ：在锁定读（使用锁隔离事物）的时候读到的是最新版本的数据</p>
<p>快照读：可重复读（repeatable-read）下 mvcc生效读取的是数据的快照，并不是最新版本的数据（未提交事物的数据）</p>
<h3 id="086-什么是XA协议？"><a href="#086-什么是XA协议？" class="headerlink" title="086 什么是XA协议？"></a>086 什么是XA协议？</h3><p><a href="https://dev.mysql.com/doc/refman/8.0/en/xa.html">https://dev.mysql.com/doc/refman/8.0/en/xa.html</a></p>
<p><img src="/2021110810071449.png" alt="在这里插入图片描述"></p>
<ul>
<li><p>AP（Application Program）：应用程序，定义事务边界（定义事务开始和结束）并访问事务边界内的资源。</p>
</li>
<li><p>RM（Resource Manger）资源管理器: 管理共享资源并提供外部访问接口。供外部程序来访问数据库等共享资源。此外，RM还具有事务的回滚能力。</p>
</li>
<li><p>TM（Transaction Manager）事务管理器：TM是分布式事务的协调者，TM与每个RM进行通信，负责管理全局事务，分配事务唯一标识，监控事务的执行进度，并负责事务的提交、回滚、失败恢复等。</p>
</li>
<li><p>应用程序AP向事务管理器TM发起事务请求</p>
</li>
<li><p>TM调用xa_open()建立同资源管理器的会话</p>
</li>
<li><p>TM调用xa_start()标记一个事务分支的开头</p>
</li>
<li><p>AP访问资源管理器RM并定义操作，比如插入记录操作</p>
</li>
<li><p>TM调用xa_end()标记事务分支的结束</p>
</li>
<li><p>TM调用xa_prepare()通知RM做好事务分支的提交准备工作。其实就是二阶段提交的提交请求阶段。</p>
</li>
<li><p>TM调用xa_commit()通知RM提交事务分支，也就是二阶段提交的提交执行阶段。</p>
</li>
<li><p>TM调用xa_close管理与RM的会话。</p>
<ul>
<li>这些接口一定要按顺序执行，比如xa_start接口一定要在xa_end之前。此外，这里千万要注意的是事务管理器只是标记事务分支并不执行事务，事务操作最终是由应用程序通知资源管理器完成的。另外，我们来总结下XA的接口</li>
</ul>
</li>
<li><p>xa_start:负责开启或者恢复一个事务分支，并且管理XID到调用线程</p>
</li>
<li><p>xa_end:负责取消当前线程与事务分支的关系</p>
</li>
<li><p>xa_prepare:负责询问RM 是否准备好了提交事务分支 xa_commit:通知RM提交事务分支</p>
</li>
<li><p>xa_rollback:通知RM回滚事务分支</p>
</li>
</ul>
<h4 id="087-什么是mysql-xa事务？"><a href="#087-什么是mysql-xa事务？" class="headerlink" title="087 	什么是mysql xa事务？"></a>087 	什么是mysql xa事务？</h4><p>mysql的xa事务分为两部分：</p>
<ol>
<li>InnoDB内部本地普通事务操作协调数据写入与log写入两阶段提交</li>
<li>外部分布式事务</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5.7 SHOW VARIABLES LIKE &#x27;%innodb_support_xa%&#x27;;</span><br><span class="line">8.0 默认开启无法关闭</span><br></pre></td></tr></table></figure>

<p>XA 事务语法示例如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">XA START &#x27;自定义事务id&#x27;;</span><br><span class="line"></span><br><span class="line">SQL语句...</span><br><span class="line"></span><br><span class="line">XA END &#x27;自定义事务id&#x27;;</span><br><span class="line">XA PREPARE &#x27;自定义事务id&#x27;;</span><br><span class="line">XA COMMIT\ROLLBACK &#x27;自定义事务id&#x27;;</span><br></pre></td></tr></table></figure>

<p>XA PREPARE 执行成功后，事务信息将被持久化。即使会话终止甚至应用服务宕机，只要我们将【自定义事务id】记录下来，后续仍然可以使用它对事务进行<br>rollback 或者 commit。</p>
<h4 id="088-xa事务与普通事务区别是什么？"><a href="#088-xa事务与普通事务区别是什么？" class="headerlink" title="088 	xa事务与普通事务区别是什么？"></a>088 	xa事务与普通事务区别是什么？</h4><p>xa事务可以跨库或跨服务器，属于分布式事务，同时xa事务还支撑了InnoDB内部日志两阶段记录</p>
<p>普通事务只能在单库中执行</p>
<h4 id="089-什么是2pc-3pc？"><a href="#089-什么是2pc-3pc？" class="headerlink" title="089 	什么是2pc 3pc？"></a>089 	什么是2pc 3pc？</h4><p>两阶段提交协议与3阶段提交协议，额外增加了参与的角色保证分布式事务完成更完善</p>
<h3 id="090-是否使用过select-for-update？会产生哪些操作？"><a href="#090-是否使用过select-for-update？会产生哪些操作？" class="headerlink" title="090 是否使用过select for update？会产生哪些操作？"></a>090 是否使用过select for update？会产生哪些操作？</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">查询库存 = 100  0 扣减库存  = -1 99</span><br><span class="line">记录日志 = log</span><br><span class="line">提交  commit</span><br></pre></td></tr></table></figure>

<p>select本身是一个查询语句，查询语句是不会产生冲突的一种行为，一般情况下是没有锁的，用select for update<br>会让select语句产生一个排它锁(X), 这个锁和update的效果一样，会使两个事务无法同时更新一条记录。</p>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-locks-set.html">https://dev.mysql.com/doc/refman/8.0/en/innodb-locks-set.html</a></p>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/select.html">https://dev.mysql.com/doc/refman/8.0/en/select.html</a></p>
<ul>
<li><p>for update仅适用于InnoDB，且必须在事务块(BEGIN&#x2F;COMMIT)中才能生效。</p>
</li>
<li><p>在进行事务操作时，通过“for update”语句，MySQL会对查询结果集中每行数据都添加排他锁，其他线程对该记录的更新与删除操作都会阻塞。排他锁包含行锁、表锁。</p>
</li>
<li><p><strong>InnoDB默认是行级别的锁，在筛选条件中当有明确指定主键或唯一索引列的时候，是行级锁。否则是表级别。</strong></p>
</li>
</ul>
<p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT … FOR UPDATE [OF column_list][WAIT n|NOWAIT][SKIP LOCKED];</span><br><span class="line">select * from t for update 会等待行锁释放之后，返回查询结果。</span><br><span class="line">select * from t for update nowait 不等待行锁释放，提示锁冲突，不返回结果</span><br><span class="line">select * from t for update wait 5 等待5秒，若行锁仍未释放，则提示锁冲突，不返回结果</span><br><span class="line">select * from t for update skip locked 查询返回查询结果，但忽略有行锁的记录</span><br></pre></td></tr></table></figure>

<h3 id="091说一下mysql死锁的原因和处理方法"><a href="#091说一下mysql死锁的原因和处理方法" class="headerlink" title="091说一下mysql死锁的原因和处理方法"></a>091说一下mysql死锁的原因和处理方法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">事务 a</span><br><span class="line"></span><br><span class="line">表 t  id=100 更新  加行锁</span><br><span class="line">表 t  id=200 更新  已加锁</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">事务 b</span><br><span class="line"></span><br><span class="line">表 t  id=200 更新 加行锁</span><br><span class="line">表 t  id=100 更新 已加锁</span><br></pre></td></tr></table></figure>

<ul>
<li>死锁与锁等待是两个概念<ul>
<li>如未开启事务，多个客户端执行的insert操作</li>
</ul>
</li>
<li>当多个事务同时持有和请求同一资源上的锁而产生循环依赖的时候就产生了死锁。</li>
</ul>
<p>排查：</p>
<ul>
<li>正在运行的任务<ul>
<li>show full processlist; 找到卡主的进程</li>
</ul>
</li>
<li>解开死锁<ul>
<li>UNLOCK TABLES ；</li>
</ul>
</li>
<li>查看当前运行的事务<ul>
<li>SELECT * FROM information_schema.INNODB_TRX;</li>
</ul>
</li>
<li>当前出现的锁<ul>
<li>SELECT * FROM information_schema.INNODB_LOCKS;</li>
</ul>
</li>
<li>观察错误日志</li>
<li>查看InnoDB锁状态<ul>
<li><code>show status like &quot;innodb_row_lock%&quot;;</code></li>
</ul>
</li>
</ul>
<p>lnnodb_row_lock_current_waits:当前正在等待锁定的数量;<br>lnnodb_row_lock_time :从系统启动到现在锁定的总时间长度，单位ms;<br>Innodb_row_lock_time_avg :每次等待所花平均时间;<br>Innodb_row_lock_time_max:从系统启动到现在等待最长的一次所花的时间;<br>lnnodb_row_lock_waits :从系统启动到现在总共等待的次数。</p>
<ul>
<li>kill id 杀死进程</li>
</ul>
<p>解决：</p>
<ul>
<li><p>死锁无法避免，上线前要进行严格的压力测试</p>
</li>
<li><p>快速失败</p>
<ul>
<li>innodb_lock_wait_timeout 行锁超时时间</li>
</ul>
</li>
<li><p>拆分sql，严禁大事务</p>
</li>
<li><p>充分利用索引，优化索引，尽量把有风险的事务sql使用上覆盖索，优化where条件前缀匹配，提升查询速度，引减少表锁</p>
</li>
<li><p>无法避免时：</p>
<ul>
<li>操作多张表时，尽量以相同的顺序来访问避免形成等待环路</li>
<li>单张表时先排序再操作</li>
<li>使用排它锁 比如 for update</li>
</ul>
</li>
</ul>
<h3 id="092-Mysql会产生几种日志？"><a href="#092-Mysql会产生几种日志？" class="headerlink" title="092 Mysql会产生几种日志？"></a>092 Mysql会产生几种日志？</h3><ul>
<li><strong>错误日志（error log）</strong></li>
</ul>
<p>error log主要记录MySQL在启动、关闭或者运行过程中的错误信息，在MySQL的配置文件my.cnf中，可以通过log-error&#x3D;&#x2F;var&#x2F;log&#x2F;mysqld.log<br>执行mysql错误日志的位置。</p>
<ul>
<li><strong>慢查询日志（slow query log）</strong></li>
</ul>
<p>0.1秒</p>
<p>Ø MySQL的慢查询日志是MySQL提供的一种日志记录，它用来记录在MySQL中响应时间超过阀值的语句，具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中。</p>
<p>Ø long_query_time的默认值为10，意思是运行10秒以上的语句。</p>
<p>Ø 由他来查看哪些SQL超出了我们的最大忍耐时间值，比如一条sql执行超过5秒钟，我们就算慢SQL，希望能收集超过5秒的sql，结合之前explain进行全面分析。</p>
<p>Ø 默认情况下，MySQL数据库没有开启慢查询日志，需要我们手动来设置这个参数。</p>
<p>Ø 当然，如果不是调优需要的话，一般不建议启动该参数，因为开启慢查询日志会或多或少带来一定的性能影响。慢查询**<br>日志支持将日志记录写入文件**。</p>
<p>在生产环境中，如果要手工分析日志，查找、分析SQL，显然是个体力活，MySQL提供了日志分析工具mysqldumpslow。</p>
<ul>
<li><strong>一般查询日志（general log）</strong></li>
</ul>
<p>general log 记录了客户端连接信息以及执行的SQL语句信息，通过MySQL的命令</p>
<ul>
<li><p><strong>重写日志（redo log）</strong></p>
</li>
<li><p><strong>回滚日志（undo log）</strong></p>
</li>
<li><p><strong>二进制日志（bin log）</strong></p>
</li>
</ul>
<h4 id="093-bin-log作用是什么？"><a href="#093-bin-log作用是什么？" class="headerlink" title="093 	bin log作用是什么？"></a>093 	bin log作用是什么？</h4><p>MySQL的bin log日志是用来记录MySQL中增删改时的记录日志。</p>
<p>当你的一条sql操作对数据库中的内容进行了更新，就会增加一条bin log日志。查询操作不会记录到bin log中。</p>
<p>bin log最大的用处就是进行<strong>主从复制，以及数据库的恢复。</strong></p>
<h4 id="094redo-log作用是什么？"><a href="#094redo-log作用是什么？" class="headerlink" title="094	redo log作用是什么？"></a>094	redo log作用是什么？</h4><p>redo log是一种基于磁盘的数据结构，用来在MySQL宕机情况下将不完整的事务执行数据纠正，redo日志记录事务执行后的状态。</p>
<p>当事务开始后，redo log就开始产生，并且随着事务的执行不断写入redo log file中。redo log<br>file中记录了xxx页做了xx修改的信息，我们都知道数据库的更新操作会在内存中先执行，最后刷入磁盘。</p>
<p>redo log就是为了恢复更新了内存但是由于宕机等原因没有刷入磁盘中的那部分数据。</p>
<h4 id="095-undo-log作用是什么？"><a href="#095-undo-log作用是什么？" class="headerlink" title="095 	undo log作用是什么？"></a>095 	undo log作用是什么？</h4><p>undo log主要用来回滚到某一个版本，是一种逻辑日志。</p>
<p>undo log记录的是修改之前的数据，比如：当delete一条记录时，undolog中会记录一条对应的insert记录，从而保证能恢复到数据修改之前。在执行事务回滚的时候，就可以通过undo<br>log中的记录内容并以此进行回滚。</p>
<p>undo log还可以提供多版本并发控制下的读取（MVCC）。</p>
<h3 id="096-Mysql日志是否实时写入磁盘？-097-bin-log刷盘机制是如何实现的？098-redo-log刷盘机制是如何实现的？-099-undo-log刷盘机制是如何实现的？"><a href="#096-Mysql日志是否实时写入磁盘？-097-bin-log刷盘机制是如何实现的？098-redo-log刷盘机制是如何实现的？-099-undo-log刷盘机制是如何实现的？" class="headerlink" title="096 	Mysql日志是否实时写入磁盘？ 097 		bin log刷盘机制是如何实现的？098 		redo log刷盘机制是如何实现的？ 099 		undo log刷盘机制是如何实现的？"></a>096 	Mysql日志是否实时写入磁盘？ 097 		bin log刷盘机制是如何实现的？098 		redo log刷盘机制是如何实现的？ 099 		undo log刷盘机制是如何实现的？</h3><p>磁盘写入固然是比较慢的。</p>
<p>参数：sync_binlog</p>
<p>binlog 写入策略：</p>
<p><strong>1、sync_binlog&#x3D;0</strong> 的时候，表示每次提交事务binlog不会马上写入到磁盘，而是先写到page cache,相对于磁盘写入来说写page<br>cache要快得多,不过在Mysql 崩溃的时候会有丢失日志的风险。</p>
<p><strong>2、sync_binlog&#x3D;1</strong> 的时候，表示每次提交事务都会执行 fsync 写入到磁盘 ；</p>
<p><strong>3、sync_binlog的值大于1</strong> 的时候，表示每次提交事务都 先写到page cach，只有等到积累了N个事务之后才fsync 写入到磁盘，同样在此设置下Mysql<br>崩溃的时候会有丢失N个事务日志的风险。</p>
<p>很显然三种模式下，sync_binlog&#x3D;1 是强一致的选择，选择0或者N的情况下在极端情况下就会有丢失日志的风险，具体选择什么模式还是得看系统对于一致性的要求。</p>
<p><img src="/16701032-f8547d110ba34135.png" alt="img"></p>
<p><strong>innodb_flush_log_at_trx_commit</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">取值0：每秒（一秒钟内提交的事务）写入磁盘  每秒触发一次缓存日志回写磁盘操作，并调用操作系统fsync刷新IO缓存。</span><br><span class="line">取值1：有事务提交就立即刷盘     每次提交事务都立即调用操作系统fsync刷新IO缓存。</span><br><span class="line">取值2：每次事务提交 都写给操作系统 由系统接管什么时候写入磁盘   每次都把redo log写到系统的page cache中，由系统接管什么时候写入磁盘</span><br></pre></td></tr></table></figure>

<p>时机顺序：</p>
<ul>
<li><p>1 开启事务</p>
</li>
<li><p>2 查询数据库中需要更新的字段，加载到内存中 形成数据<strong>脏页</strong></p>
</li>
<li><p>3 记录undo log到内存缓冲区（用于回滚和mvcc）并关联redo log -&gt; 可刷盘</p>
</li>
<li><p>4 记录 redo log到内存缓冲区 （用于失败重放）准备提交事务 -&gt; 可刷盘</p>
</li>
<li><p>5 修改内存中的脏页数据</p>
</li>
<li><p>6 提交事务触发redolog刷盘</p>
</li>
<li><p>7 undo log 和脏页 刷盘</p>
</li>
<li><p>8 事务成功</p>
</li>
</ul>
<p><strong>redo log 与 binlog 的两阶段提交</strong></p>
<p>redo log 的写入拆成了两个步骤：prepare 和 commit</p>
<ul>
<li><p><strong>prepare</strong>：redolog写入log buffer，并fsync持久化到磁盘，在redolog事务中记录2PC的XID，在redolog事务打上prepare标识</p>
</li>
<li><p><strong>commit</strong>：binlog写入log buffer，并fsync持久化到磁盘，在binlog事务中记录2PC的XID，同时在redolog事务打上commit标识</p>
</li>
</ul>
<p><img src="/v2-a48d01fd3478ba4d68207fc7ce757658_r.jpg" alt="img"></p>
<h3 id="100-MySQL的binlog有有几种录入格式？分别有什么区别？"><a href="#100-MySQL的binlog有有几种录入格式？分别有什么区别？" class="headerlink" title="100 MySQL的binlog有有几种录入格式？分别有什么区别？"></a>100 MySQL的binlog有有几种录入格式？分别有什么区别？</h3><p>logbin格式：</p>
<ul>
<li>binlog_format&#x3D;STATEMENT（默认）：数据操作的时间，同步时不一致 每一条会修改数据的sql语句会记录到binlog中。优点是并不需要记录每一<br>条sql语句和每一行的 数据变化，减少了binlog日志量，节约IO，提高性能。缺点是在某些情况下会导致 master-slave 中的数据不一致(<br>如sleep()函数， last_insert_id()，以及user-defined functions(udf)等会 出 现 问题)</li>
<li>binlog_format&#x3D;ROW：批量数据操作时，效率低 不记录每条sql语句的上下文信息，仅需记录哪条数据被修改了，修改成什么样 了。而且不会出<br>现某些特定情况下的存储过程、或function、或trigger的调用和触发无法被正确复制的 问题。缺 点是会产生大量的日志，尤其是alter<br>table的时候会让日志暴涨。</li>
<li>binlog_format&#x3D;MIXED：是以上两种level的混合使用，有函数用ROW，没函数用STATEMENT，但是无法识别系统变量</li>
</ul>
<h3 id="101-Mysql集群同步时为什么使用binlog？优缺点是什么？"><a href="#101-Mysql集群同步时为什么使用binlog？优缺点是什么？" class="headerlink" title="101 Mysql集群同步时为什么使用binlog？优缺点是什么？"></a>101 Mysql集群同步时为什么使用binlog？优缺点是什么？</h3><ul>
<li>binlog是mysql提供的日志，所有存储引擎都可用。</li>
<li>支持增量同步</li>
<li>binlog还可以供其他中间件读取，比如同步到hdfs中</li>
<li>如果复制表数据：<ul>
<li>不支持某个阶段回放</li>
<li>直接复制数据过程中一旦中断复制（比如断网），很难确定复制的offset</li>
</ul>
</li>
</ul>
<h2 id="四-Mysql开发"><a href="#四-Mysql开发" class="headerlink" title="四 Mysql开发"></a>四 Mysql开发</h2><h3 id="102-可以使用MySQL直接存储文件吗？"><a href="#102-可以使用MySQL直接存储文件吗？" class="headerlink" title="102 可以使用MySQL直接存储文件吗？"></a>102 可以使用MySQL直接存储文件吗？</h3><p>可以使用 BLOB (binary large object)，用来存储二进制大对象的字段类型。</p>
<p>TinyBlob 255 值的长度加上用于记录长度的1个字节(8位)<br>Blob 65K值的长度加上用于记录长度的2个字节(16位)<br>MediumBlob 16M值的长度加上用于记录长度的3个字节(24位)<br>LongBlob 4G 值的长度加上用于记录长度的4个字节(32位)。</p>
<h4 id="103什么时候存，什么时候不存？"><a href="#103什么时候存，什么时候不存？" class="headerlink" title="103	什么时候存，什么时候不存？"></a>103	什么时候存，什么时候不存？</h4><p>存：需要高效查询并且文件很小的时候</p>
<p>不存：文件比较大，数据量多或变更频繁的时候</p>
<h4 id="104存储的时候有遇到过什么问题吗？"><a href="#104存储的时候有遇到过什么问题吗？" class="headerlink" title="104	存储的时候有遇到过什么问题吗？"></a>104	存储的时候有遇到过什么问题吗？</h4><ol>
<li>上传数据过大sql执行失败 调整max_allowed_packet</li>
<li>主从同步数据时比较慢</li>
<li>应用线程阻塞</li>
<li>占用网络带宽</li>
<li>高频访问的图片无法使用浏览器缓存</li>
</ol>
<h4 id="105Emoji乱码怎么办？"><a href="#105Emoji乱码怎么办？" class="headerlink" title="105	Emoji乱码怎么办？"></a>105	Emoji乱码怎么办？</h4><p>使用utf8mb4</p>
<p>MySQL在5.5.3之后增加了这个utf8mb4的编码，mb4就是most bytes<br>4的意思，专门用来兼容四字节的unicode。好在utf8mb4是utf8的超集，除了将编码改为utf8mb4外不需要做其他转换。当然，一般情况下使用utf8也就够了。</p>
<h3 id="106-如何存储ip地址？"><a href="#106-如何存储ip地址？" class="headerlink" title="106 如何存储ip地址？"></a>106 如何存储ip地址？</h3><ol>
<li>使用字符串</li>
<li>使用无符号整型</li>
</ol>
<ul>
<li>4个字节即解决问题</li>
<li>可以支持范围查询</li>
<li><strong>INET_ATON()</strong> 和 <strong>INET_NTOA()</strong> ipv6 使用 <strong>INET6_ATON()</strong> 和 <strong>INET6_NTOA()</strong></li>
</ul>
<h3 id="107-长文本如何存储？"><a href="#107-长文本如何存储？" class="headerlink" title="107 长文本如何存储？"></a>107 长文本如何存储？</h3><p>可以使用Text存储</p>
<p><strong>TINYTEXT(255长度)</strong></p>
<p><strong>TEXT(65535)</strong></p>
<p><strong>MEDIUMTEXT（int最大值16M）</strong></p>
<p><strong>LONGTEXT(long最大值4G)</strong></p>
<h4 id="108大段文本如何设计表结构？"><a href="#108大段文本如何设计表结构？" class="headerlink" title="108	大段文本如何设计表结构？"></a>108	大段文本如何设计表结构？</h4><ol>
<li>或将大段文本同时存储到搜索引擎</li>
<li>分表存储</li>
<li>分表后多段存储</li>
</ol>
<h4 id="109大段文本查找时如何建立索引？"><a href="#109大段文本查找时如何建立索引？" class="headerlink" title="109	大段文本查找时如何建立索引？"></a>109	大段文本查找时如何建立索引？</h4><ol>
<li>全文检索，模糊匹配最好存储到搜索引擎中</li>
<li>指定索引长度</li>
<li>分段存储后创建索引</li>
</ol>
<h4 id="110有没有在开发中使用过TEXT-BLOB-数据类型"><a href="#110有没有在开发中使用过TEXT-BLOB-数据类型" class="headerlink" title="110	有没有在开发中使用过TEXT,BLOB 数据类型"></a>110	有没有在开发中使用过TEXT,BLOB 数据类型</h4><p>BLOB 之前做ERP的时候使用过，互联网项目一般不用BLOB</p>
<p>TEXT 文献，文章，小说类，新闻，会议内容 等</p>
<h3 id="111-日期，时间如何存取？"><a href="#111-日期，时间如何存取？" class="headerlink" title="111  日期，时间如何存取？"></a>111  日期，时间如何存取？</h3><ol>
<li>使用 TIMESTAMP，DATETIME</li>
<li>使用字符串</li>
</ol>
<h4 id="112TIMESTAMP，DATETIME-的区别是什么？"><a href="#112TIMESTAMP，DATETIME-的区别是什么？" class="headerlink" title="112	TIMESTAMP，DATETIME 的区别是什么？"></a>112	TIMESTAMP，DATETIME 的区别是什么？</h4><p>跨时区的业务使用 TIMESTAMP，TIMESTAMP会有时区转换</p>
<p>1、两者的存储方式不一样:<br>对于TIMESTAMP，它把客户端插入的时间从当前时区转化为UTC（世界标准时间）进行存储。查询时，将其又转化为客户端当前时区进行返回。<br>而对于DATETIME，不做任何改变，基本上是原样输入和输出。</p>
<p>2、存储字节大小不同</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>MySQL 5.6.4之前需要存储</th>
<th>MySQL 5.6.4之后需要存储</th>
</tr>
</thead>
<tbody><tr>
<td>DATETIME</td>
<td>8 bytes</td>
<td>5 bytes + 小数秒存储</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td>4 bytes</td>
<td>4 bytes + 小数秒存储</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>分秒数精度</th>
<th>存储字节大小</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0 bytes</td>
</tr>
<tr>
<td>1,2</td>
<td>1 bytes</td>
</tr>
<tr>
<td>3,4</td>
<td>2 bytes</td>
</tr>
<tr>
<td>5,6</td>
<td>3 bytes</td>
</tr>
</tbody></table>
<p>3、两者所能存储的时间范围不一样:<br>timestamp所能存储的时间范围为：’1970-01-01 00:00:01.000000’ 到 ‘2038-01-19 03:14:07.999999’。<br>datetime所能存储的时间范围为：’1000-01-01 00:00:00.000000’ 到 ‘9999-12-31 23:59:59.999999’。</p>
<h4 id="113为什么不使用字符串存储日期？"><a href="#113为什么不使用字符串存储日期？" class="headerlink" title="113	为什么不使用字符串存储日期？"></a>113	为什么不使用字符串存储日期？</h4><p>字符串无法完成数据库内部的范围筛选</p>
<p>在大数据量存储优化索引时，查询必须加上时间范围</p>
<h4 id="114如果需要使用时间戳-timestamp和int该如何选择？"><a href="#114如果需要使用时间戳-timestamp和int该如何选择？" class="headerlink" title="114	如果需要使用时间戳 timestamp和int该如何选择？"></a>114	如果需要使用时间戳 timestamp和int该如何选择？</h4><p><strong>int</strong> 存储空间小，运算查询效率高，不受时区影响，精度低</p>
<p><strong>timestamp</strong> 存储空间小，可以使用数据库内部时间函数比如更新，精度高，需要注意时区转换，timestamp更易读</p>
<p>一般选择timestamp，两者性能差异不明显，本质上存储都是使用的int</p>
<h3 id="115char与varchar的区别？如何选择？"><a href="#115char与varchar的区别？如何选择？" class="headerlink" title="115	char与varchar的区别？如何选择？"></a>115	char与varchar的区别？如何选择？</h3><p>1.char的优点是存储空间固定（最大255），没有碎片，尤其更新比较频繁的时候，方便数据文件指针的操作，所以存储读取速度快。缺点是空间冗余，对于数据量大的表，非固定长度属性使用char字段，空间浪费。</p>
<p>2.varchar字段，存储的空间根据存储的内容变化，空间长度为L+size，存储内容长度加描述存储内容长度信息，优点就是空间节约，缺点就是读取和存储时候，需要读取信息计算下标，才能获取完整内容。</p>
<h3 id="116财务计算有没有出现过错乱？"><a href="#116财务计算有没有出现过错乱？" class="headerlink" title="116	财务计算有没有出现过错乱？"></a>116	财务计算有没有出现过错乱？</h3><p>第一类：锁包括多线程，数据库，UI展示后超时提交等</p>
<p>第二类：应用与数据库浮点运算精度丢失</p>
<ol>
<li>应用开发问题：多线程共享数据读写，</li>
<li>之前有过丢失精度的问题，使用decimal解决</li>
<li>使用乘法替换除法</li>
<li>使用事务保证acid特性</li>
<li>更新时使用悲观锁 SELECT … FOR UPDATE</li>
<li>数据只有标记删除</li>
<li>记录详细日志方便溯源</li>
</ol>
<h4 id="117decimal与float-double的区别是什么？"><a href="#117decimal与float-double的区别是什么？" class="headerlink" title="117		decimal与float,double的区别是什么？"></a>117		decimal与float,double的区别是什么？</h4><p>float：浮点型，4字节，32bit。</p>
<p>double：双精度实型，8字节，64位</p>
<p>decimal：数字型，128bit，不存在精度损失</p>
<p>对于声明语法DECIMAL(M,D)，自变量的值范围如下：</p>
<ul>
<li>M是最大位数（精度），范围是1到65。可不指定，默认值是10。</li>
<li>D是小数点右边的位数（小数位）。范围是0到30，并且不能大于M，可不指定，默认值是0。</li>
</ul>
<p>例如字段 salary DECIMAL(5,2)，能够存储具有五位数字和两位小数的任何值，因此可以存储在salary列中的值的范围是从-999.99到999.99。</p>
<h4 id="118浮点类型如何选型？为什么？"><a href="#118浮点类型如何选型？为什么？" class="headerlink" title="118		浮点类型如何选型？为什么？"></a>118		浮点类型如何选型？为什么？</h4><ul>
<li><p>需要不丢失精度的计算使用DECIMAL</p>
</li>
<li><p>仅用于展示没有计算的小数存储可以使用字符串存储</p>
</li>
<li><p>低价值数据允许计算后丢失精度可以使用float double</p>
</li>
<li><p>整型记录不会出现小数的不要使用浮点类型</p>
</li>
</ul>
<h3 id="119-预编译sql是什么？"><a href="#119-预编译sql是什么？" class="headerlink" title="119   预编译sql是什么？"></a>119   预编译sql是什么？</h3><p>完整解释：</p>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/prepare.html">https://dev.mysql.com/doc/refman/8.0/en/prepare.html</a></p>
<p>PreparedStatement</p>
<h4 id="120预编译sql有什么好处？"><a href="#120预编译sql有什么好处？" class="headerlink" title="120		预编译sql有什么好处？"></a>120		预编译sql有什么好处？</h4><ul>
<li>预编译sql会被mysql缓存下来</li>
<li>作用域是每个session，对其他session无效，重新连接也会失效</li>
<li>提高安全性防止sql注入<ul>
<li>select * from user where id &#x3D;?</li>
<li>“1;delete from user where id &#x3D; 1”;</li>
</ul>
</li>
<li>编译语句有可能被重复调用，也就是说sql相同参数不同在同一session中重复查询执行效率明显比较高</li>
<li>mysql 5,8 支持服务器端的预编译</li>
</ul>
<h3 id="121子查询与join哪个效率高？"><a href="#121子查询与join哪个效率高？" class="headerlink" title="121	子查询与join哪个效率高？"></a>121	子查询与join哪个效率高？</h3><p>子查询虽然很灵活，但是执行效率并不高。</p>
<h4 id="122为什么子查询效率低？"><a href="#122为什么子查询效率低？" class="headerlink" title="122		为什么子查询效率低？"></a>122		为什么子查询效率低？</h4><p>在执行子查询的时候，MYSQL创建了临时表，查询完毕后再删除这些临时表</p>
<p>子查询的速度慢的原因是多了一个创建和销毁临时表的过程。<br>而join 则不需要创建临时表 所以会比子查询快一点</p>
<h4 id="123join查询可以无限叠加吗？Mysql对join查询有什么限制吗？"><a href="#123join查询可以无限叠加吗？Mysql对join查询有什么限制吗？" class="headerlink" title="123		join查询可以无限叠加吗？Mysql对join查询有什么限制吗？"></a>123		join查询可以无限叠加吗？Mysql对join查询有什么限制吗？</h4><p>建议join不超过3张表关联，mysql对内存敏感，关联过多会占用更多内存空间，使性能下降</p>
<p>Too many tables; MySQL can only use 61 tables in a join；</p>
<p>系统限制最多关联61个表</p>
<h4 id="124-join-查询算法了解吗？"><a href="#124-join-查询算法了解吗？" class="headerlink" title="124  join 查询算法了解吗？"></a>124  join 查询算法了解吗？</h4><ul>
<li>Simple Nested-Loop Join：SNLJ，简单嵌套循环连接</li>
<li>Index Nested-Loop Join：INLJ，索引嵌套循环连接</li>
<li>Block Nested-Loop Join：BNLJ，缓存块嵌套循环连接</li>
</ul>
<h4 id="125如何优化过多join查询关联？"><a href="#125如何优化过多join查询关联？" class="headerlink" title="125		如何优化过多join查询关联？"></a>125		如何优化过多join查询关联？</h4><ul>
<li>适当使用冗余字段减少多表关联查询</li>
<li>驱动表和被驱动表（小表join大表）</li>
<li>业务允许的话 尽量使用inner join 让系统帮忙自动选择驱动表</li>
<li>关联字段一定创建索引</li>
<li>调整JOIN BUFFER大小</li>
</ul>
<h3 id="126是否有过mysql调优经验？"><a href="#126是否有过mysql调优经验？" class="headerlink" title="126	是否有过mysql调优经验？"></a>126	是否有过mysql调优经验？</h3><p>调优：</p>
<ol>
<li>sql调优</li>
<li>表（结构）设计调优</li>
<li>索引调优</li>
<li>慢查询调优</li>
<li>操作系统调优</li>
<li>数据库参数调优</li>
</ol>
<h4 id="127开发中使用过哪些调优工具？"><a href="#127开发中使用过哪些调优工具？" class="headerlink" title="127		开发中使用过哪些调优工具？"></a>127		开发中使用过哪些调优工具？</h4><p>官方自带：</p>
<ul>
<li>EXPLAIN</li>
<li>mysqldumpslow</li>
<li>show profiles 时间</li>
<li>optimizer_trace</li>
</ul>
<p>第三方：性能诊断工具，参数扫描提供建议，参数辅助优化</p>
<h4 id="128如何监控线上环境中执行比较慢的sql？-129如何分析一条慢sql？"><a href="#128如何监控线上环境中执行比较慢的sql？-129如何分析一条慢sql？" class="headerlink" title="128		如何监控线上环境中执行比较慢的sql？ 129		如何分析一条慢sql？"></a>128		如何监控线上环境中执行比较慢的sql？ 129		如何分析一条慢sql？</h4><p>开启慢查询日志，收集sql</p>
<p>Ø 默认情况下，MySQL数据库没有开启慢查询日志，需要我们手动来设置这个参数。</p>
<p>Ø 当然，如果不是调优需要的话，一般不建议启动该参数，因为开启慢查询日志会或多或少带来一定的性能影响。慢查询**<br>日志支持将日志记录写入文件**。</p>
<p><strong>查看及开启</strong></p>
<ol>
<li>默认关闭</li>
</ol>
<p><code>SHOW VARIABLES LIKE &#39;%slow_query_log%&#39;; </code></p>
<p>默认情况下slow_query_log的值为OFF，表示慢查询日志是禁用的，</p>
<p>​</p>
<ol>
<li><p>开启：<code>set global     slow_query_log=1;</code> 只对窗口生效，重启服务失效</p>
</li>
<li><p>慢查询日志记录long_query_time时间</p>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%long_query_time%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;long_query_time&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>l 全局变量设置，对所有客户端有效。但，必须是设置后进行登录的客户端。</p>
<p>SET GLOBAL long_query_time&#x3D;0.1;</p>
<p>l 对当前会话连接立即生效，对其他客户端无效。</p>
<p>SET SESSION long_query_time&#x3D;0.1; #session可省略</p>
<p>假如运行时间正好等于long_query_time的情况，并不会被记录下来。也就是说，</p>
<p>在mysql源码里是判断大于long_query_time，而非大于等于。</p>
<ol>
<li><p>永久生效</p>
</li>
<li><ul>
<li>修改配置文件my.cnf（其它系统变量也是如此）</li>
<li>[mysqld]下增加或修改参数</li>
<li>slow_query_log 和slow_query_log_file后，然后重启MySQL服务器。也即将如下两行配置进my.cnf文件</li>
</ul>
</li>
</ol>
<p>slow_query_log &#x3D;1</p>
<p>slow_query_log_file&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;localhost-slow.log</p>
<p>long_query_time&#x3D;3</p>
<p>log_output&#x3D;FILE</p>
<ol>
<li><ul>
<li>关于慢查询的参数slow_query_log_file，它指定慢查询日志文件的存放路径，如果不设置，系统默认文件：[host_name]-slow.log</li>
</ul>
</li>
</ol>
<p><strong>case</strong></p>
<p>Ø 记录慢SQL并后续分析</p>
<p>SELECT * FROM emp;</p>
<p>SELECT * FROM emp WHERE deptid &gt; 1;</p>
<p>Ø 查询当前系统中有多少条慢查询记录或者直接看慢查询日志</p>
<p>&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;localhost-slow.log</p>
<p>SHOW GLOBAL STATUS LIKE ‘%Slow_queries%’;</p>
<p><strong>日志分析工具mysqldumpslow</strong></p>
<ol>
<li><p>在生产环境中，如果要手工分析日志，查找、分析SQL，显然是个体力活，MySQL提供了日志分析工具mysqldumpslow。</p>
</li>
<li><p>查看mysqldumpslow的帮助信息</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">a)   mysqldumpslow --help</span><br><span class="line"></span><br><span class="line">·    -a: 将数字抽象成N，字符串抽象成S</span><br><span class="line"></span><br><span class="line">·    -s: 是表示按照何种方式排序；</span><br><span class="line"></span><br><span class="line"> c: 访问次数</span><br><span class="line"></span><br><span class="line"> l: 锁定时间</span><br><span class="line"></span><br><span class="line"> r: 返回记录</span><br><span class="line"></span><br><span class="line"> **t:** **查询时间**</span><br><span class="line"></span><br><span class="line"> al:平均锁定时间</span><br><span class="line"></span><br><span class="line"> ar:平均返回记录数</span><br><span class="line"></span><br><span class="line"> at:平均查询时间</span><br><span class="line"></span><br><span class="line">·    -t: 即为返回前面多少条的数据；</span><br><span class="line"></span><br><span class="line">·    -g: 后边搭配一个正则匹配模式，大小写不敏感的；</span><br><span class="line"></span><br><span class="line">  得到返回记录集最多的10个SQL  mysqldumpslow  -s r -t 10 /var/lib/mysql/localhost-slow.log  得到访问次数最多的10个SQL  mysqldumpslow  -s c -t 10 /var/lib/mysql/localhost-slow.log  得到按照时间排序的前10条里面含有左连接的查询语句  mysqldumpslow  -s t -t 10 -g  &quot;left join&quot;  /var/lib/mysql/localhost-slow.log  另外建议在使用这些命令时结合 | 和more 使用 ，否则有可能出现爆屏情况  mysqldumpslow  -s r -t 10 /var/lib/mysql/localhost-slow.log | more  </span><br></pre></td></tr></table></figure>

<h4 id="130如何查看当前sql使用了哪个索引？"><a href="#130如何查看当前sql使用了哪个索引？" class="headerlink" title="130		如何查看当前sql使用了哪个索引？"></a>130		如何查看当前sql使用了哪个索引？</h4><p>可以使用EXPLAIN，选择索引过程可以使用 optimizer_trace</p>
<h4 id="131索引如何进行分析和调优？"><a href="#131索引如何进行分析和调优？" class="headerlink" title="131	索引如何进行分析和调优？"></a>131	索引如何进行分析和调优？</h4><h4 id="132EXPLAIN关键字中的重要指标有哪些？"><a href="#132EXPLAIN关键字中的重要指标有哪些？" class="headerlink" title="132	EXPLAIN关键字中的重要指标有哪些？"></a>132	EXPLAIN关键字中的重要指标有哪些？</h4><h2 id="-4"><a href="#-4" class="headerlink" title></a></h2><h3 id="EXPLAIN是什么"><a href="#EXPLAIN是什么" class="headerlink" title="EXPLAIN是什么"></a>EXPLAIN是什么</h3><p>使用EXPLAIN关键字可以<code>模拟优化器执行SQL查询语句</code><br>，从而知道MySQL是如何处理你的SQL语句的。<code>分析你的查询语句或是表结构的性能瓶颈</code>。</p>
<h3 id="EXPLAIN的用法"><a href="#EXPLAIN的用法" class="headerlink" title="EXPLAIN的用法"></a>EXPLAIN的用法</h3><p><strong>用法：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="operator">+</span> <span class="keyword">SQL</span>语句</span><br></pre></td></tr></table></figure>

<p><strong>数据准备：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE atguigudb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1</span><br><span class="line">(</span><br><span class="line">    id      <span class="type">INT</span>(<span class="number">10</span>) AUTO_INCREMENT,</span><br><span class="line">    content <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t2</span><br><span class="line">(</span><br><span class="line">    id      <span class="type">INT</span>(<span class="number">10</span>) AUTO_INCREMENT,</span><br><span class="line">    content <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t3</span><br><span class="line">(</span><br><span class="line">    id      <span class="type">INT</span>(<span class="number">10</span>) AUTO_INCREMENT,</span><br><span class="line">    content <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t4</span><br><span class="line">(</span><br><span class="line">    id       <span class="type">INT</span>(<span class="number">10</span>) AUTO_INCREMENT,</span><br><span class="line">    content1 <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NULL</span>,</span><br><span class="line">    content2 <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_content1 <span class="keyword">ON</span> t4 (content1);</span><br><span class="line"><span class="comment">-- 普通索引</span></span><br><span class="line"></span><br><span class="line"># 以下新增<span class="keyword">sql</span>多执行几次，以便演示</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1(content)</span><br><span class="line"><span class="keyword">VALUES</span> (CONCAT(<span class="string">&#x27;t1_&#x27;</span>, <span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> RAND() <span class="operator">*</span> <span class="number">1000</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t2(content)</span><br><span class="line"><span class="keyword">VALUES</span> (CONCAT(<span class="string">&#x27;t2_&#x27;</span>, <span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> RAND() <span class="operator">*</span> <span class="number">1000</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t3(content)</span><br><span class="line"><span class="keyword">VALUES</span> (CONCAT(<span class="string">&#x27;t3_&#x27;</span>, <span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> RAND() <span class="operator">*</span> <span class="number">1000</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t4(content1, content2)</span><br><span class="line"><span class="keyword">VALUES</span> (CONCAT(<span class="string">&#x27;t4_&#x27;</span>, <span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> RAND() <span class="operator">*</span> <span class="number">1000</span>)), CONCAT(<span class="string">&#x27;t4_&#x27;</span>, <span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> RAND() <span class="operator">*</span> <span class="number">1000</span>)));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="各字段解释"><a href="#各字段解释" class="headerlink" title="各字段解释"></a>各字段解释</h3><h4 id="table"><a href="#table" class="headerlink" title="table"></a>table</h4><ul>
<li><strong>单表：</strong>显示这一行的数据是关于哪张表的</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t1;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220710101402666.png" alt="image-20220710101402666"></p>
<ul>
<li><strong>多表关联：</strong>t1为驱动表，t2为被驱动表。</li>
</ul>
<p><code>注意：</code>内连接时，MySQL性能优化器会自动判断哪个表是驱动表，哪个表示被驱动表，和书写的顺序无关</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line">         <span class="keyword">INNER</span> <span class="keyword">JOIN</span> t2;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220711122444380.png" alt="image-20220711122444380"></p>
<h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4><p>表示查询中执行select子句或操作表的顺序</p>
<ul>
<li><strong>id相同：</strong>执行顺序由上至下</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t1,</span><br><span class="line">     t2,</span><br><span class="line">     t3;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220710000757241.png" alt="image-20220710000757241"></p>
<ul>
<li><strong>id不同：</strong>如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> t1.id</span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"><span class="keyword">WHERE</span> t1.id <span class="operator">=</span> (<span class="keyword">SELECT</span> t2.id</span><br><span class="line">               <span class="keyword">FROM</span> t2</span><br><span class="line">               <span class="keyword">WHERE</span> t2.id <span class="operator">=</span> (<span class="keyword">SELECT</span> t3.id</span><br><span class="line">                              <span class="keyword">FROM</span> t3</span><br><span class="line">                              <span class="keyword">WHERE</span> t3.content <span class="operator">=</span> <span class="string">&#x27;t3_434&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220710000950098.png" alt="image-20220710000950098"></p>
<p><code>注意：</code>查询优化器可能对涉及子查询的语句进行优化，<code>转为连接查询</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"><span class="keyword">WHERE</span> content <span class="keyword">IN</span> (<span class="keyword">SELECT</span> content <span class="keyword">FROM</span> t2 <span class="keyword">WHERE</span> content <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220711123408605.png" alt="image-20220711123408605"></p>
<ul>
<li><strong>id为NULL：</strong>最后执行</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t2;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220710001512891.png" alt="image-20220710001512891"></p>
<p><strong>小结：</strong></p>
<ul>
<li>id如果相同，可以认为是一组，从上往下顺序执行</li>
<li>在所有组中，id值越大，优先级越高，越先执行</li>
<li>关注点：id号每个号码，表示一趟独立的查询, 一个sql的查询趟数越少越好</li>
</ul>
<h4 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h4><p>查询的类型，主要是用于区别普通查询、联合查询、子查询等的复杂查询。</p>
<ul>
<li><strong>SIMPLE：</strong>简单查询。查询中不包含子查询或者UNION。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t1;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220710001930811.png" alt="image-20220710001930811"></p>
<ul>
<li><strong>PRIMARY：</strong>主查询。查询中若包含子查询，则最外层查询被标记为PRIMARY。</li>
<li><strong>SUBQUERY：</strong>子查询。在SELECT或WHERE列表中包含了子查询。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t3</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> t2 <span class="keyword">WHERE</span> content <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220710002145309.png" alt="image-20220710002145309"></p>
<ul>
<li><strong>DEPENDENT SUBQUREY：</strong><br>如果包含了子查询，并且查询语句不能被优化器转换为连接查询，并且子查询是<code>相关子查询（子查询基于外部数据列）</code>，则子查询就是DEPENDENT<br>SUBQUREY。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t3</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> t2 <span class="keyword">WHERE</span> content <span class="operator">=</span> t3.content);</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220710002444782.png" alt="image-20220710002444782"></p>
<ul>
<li><strong>UNCACHEABLE SUBQUREY：</strong>表示这个subquery的查询要受到外部系统变量的影响</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t3</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> t2 <span class="keyword">WHERE</span> content <span class="operator">=</span> @<span class="variable">@character</span>_set_server);</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220710002604613.png" alt="image-20220710002604613"></p>
<ul>
<li><strong>UNION：</strong>对于包含UNION或者UNION ALL的查询语句，除了最左边的查询是PRIMARY，其余的查询都是UNION。</li>
<li><strong>UNION RESULT：</strong>UNION会对查询结果进行查询去重，MYSQL会使用临时表来完成UNION查询的去重工作，针对这个临时表的查询就是”<br>UNION RESULT”。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t3</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t2</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220710003049587.png" alt="image-20220710003049587"></p>
<ul>
<li><strong>DEPENDENT UNION：</strong>子查询中的UNION或者UNION ALL，除了最左边的查询是DEPENDENT SUBQUREY，其余的查询都是DEPENDENT UNION。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"><span class="keyword">WHERE</span> content <span class="keyword">IN</span></span><br><span class="line">      (<span class="keyword">SELECT</span> content</span><br><span class="line">       <span class="keyword">FROM</span> t2</span><br><span class="line">       <span class="keyword">UNION</span></span><br><span class="line">       <span class="keyword">SELECT</span> content</span><br><span class="line">       <span class="keyword">FROM</span> t3);</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220710110732730.png" alt="image-20220710110732730"></p>
<ul>
<li><strong>DERIVED：</strong>在包含<code>派生表（子查询在from子句中）</code>的查询中，MySQL会递归执行这些子查询，把结果放在临时表里。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> content, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> c</span><br><span class="line">      <span class="keyword">FROM</span> t1</span><br><span class="line">      <span class="keyword">GROUP</span> <span class="keyword">BY</span> content) <span class="keyword">AS</span> derived_t1</span><br><span class="line"><span class="keyword">WHERE</span> c <span class="operator">&gt;</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>这里的<code>&lt;derived2&gt;</code>就是在id为2的查询中产生的派生表。</p>
<p><img src="/image-20220710153504037.png" alt="image-20220710153504037"></p>
<p><strong>补充：</strong><br>MySQL在处理带有派生表的语句时，优先尝试把派生表和外层查询进行合并，如果不行，再把派生表<code>物化掉（执行子查询，并把结果放入临时表）</code><br>，然后执行查询。下面的例子就是就是将派生表和外层查询进行合并的例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> content <span class="operator">=</span> <span class="string">&#x27;t1_832&#x27;</span>) <span class="keyword">AS</span> derived_t1;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220710153921679.png" alt="image-20220710153921679"></p>
<ul>
<li><strong>MATERIALIZED：</strong>优化器对于包含子查询的语句，<code>如果选择将子查询物化后再与外层查询连接查询</code><br>，该子查询的类型就是MATERIALIZED。如下的例子中，查询优化器先将子查询转换成物化表，然后将t1和物化表进行连接查询。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"><span class="keyword">WHERE</span> content <span class="keyword">IN</span> (<span class="keyword">SELECT</span> content <span class="keyword">FROM</span> t2);</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220710155650935.png" alt="image-20220710155650935"></p>
<h4 id="partitions"><a href="#partitions" class="headerlink" title="partitions"></a>partitions</h4><p>代表分区表中的命中情况，非分区表，该项为NULL</p>
<h4 id="type-☆"><a href="#type-☆" class="headerlink" title="type ☆"></a>type <strong>☆</strong></h4><blockquote>
<p><strong>说明：</strong></p>
<p>结果值从最好到最坏依次是：</p>
<p><code>system &gt; const &gt; eq_ref &gt; ref</code> &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt;<br>index_subquery &gt; <code>range &gt; index &gt; ALL</code></p>
<p><code>比较重要的包含：system、const 、eq_ref 、ref、range &gt; index &gt; ALL</code></p>
<p>SQL 性能优化的目标：至少要达到 <code>range</code> 级别，要求是 <code>ref</code> 级别，最好是 <code>consts</code>级别。（阿里巴巴<br>开发手册要求）</p>
</blockquote>
<ul>
<li><strong>ALL：</strong>全表扫描。Full Table Scan，将遍历全表以找到匹配的行</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t1;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220712065946659.png" alt="image-20220712065946659"></p>
<ul>
<li><strong>index：</strong>当使用<code>覆盖索引</code>，但需要扫描全部的索引记录时</li>
</ul>
<p><code>覆盖索引：</code>如果能通过读取索引就可以得到想要的数据，那就不需要读取用户记录，或者不用再做回表操作了。一个索引包含了满足查询结果的数据就叫做覆盖索引。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 只需要读取聚簇索引部分的非叶子节点，就可以得到id的值，不需要查询叶子节点</span></span><br><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> id</span><br><span class="line"><span class="keyword">FROM</span> t1;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220712065815768.png" alt="image-20220712065815768"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 只需要读取二级索引，就可以在二级索引中获取到想要的数据，不需要再根据叶子节点中的id做回表操作</span></span><br><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> id, deptId</span><br><span class="line"><span class="keyword">FROM</span> t_emp;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220712065922882.png" alt="image-20220712065922882"></p>
<ul>
<li><strong>range：</strong>只检索给定范围的行，使用一个索引来选择行。key 列显示使用了哪个索引，一般就是在你的where语句中出现了between、&lt;、&gt;<br>、in等的查询。这种范围扫描索引扫描比全表扫描要好，因为它只需要开始于索引的某一点，而结束于另一点，不用扫描全部索引。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="keyword">IN</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220712070042666.png" alt="image-20220712070042666"></p>
<ul>
<li><strong>ref：</strong>通过普通二级索引列与常量进行等值匹配时</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t_emp</span><br><span class="line"><span class="keyword">WHERE</span> deptId <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220712070727963.png" alt="image-20220712070727963"></p>
<ul>
<li><strong>eq_ref：</strong>连接查询时通过主键或不允许NULL值的唯一二级索引列进行等值匹配时</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t1,</span><br><span class="line">     t2</span><br><span class="line"><span class="keyword">WHERE</span> t1.id <span class="operator">=</span> t2.id;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220712070851089.png" alt="image-20220712070851089"></p>
<ul>
<li><strong>const：</strong>根据<code>主键</code>或者<code>唯一二级索引</code>列与<code>常数</code>进行匹配时</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220712070944090.png" alt="image-20220712070944090"></p>
<ul>
<li><strong>system：</strong>MyISAM引擎中，当表中只有一条记录时。<code>（这是所有type的值中性能最高的场景）</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t</span><br><span class="line">(</span><br><span class="line">    i <span class="type">int</span></span><br><span class="line">) Engine <span class="operator">=</span> MyISAM;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>);</span><br><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220711125730163.png" alt="image-20220711125730163"></p>
<p><strong>其他不太常见的类型（了解）：</strong></p>
<ul>
<li><strong>index_subquery</strong>：利用<code>普通索引</code>来关联子查询，针对包含有IN子查询的查询语句。<code>content1是普通索引字段</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"><span class="keyword">WHERE</span> content <span class="keyword">IN</span> (<span class="keyword">SELECT</span> content1 <span class="keyword">FROM</span> t4 <span class="keyword">WHERE</span> t1.content <span class="operator">=</span> t4.content2)</span><br><span class="line">   <span class="keyword">OR</span> content <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220712071057817.png" alt="image-20220712071057817"></p>
<ul>
<li><strong>unique_subquery</strong>：类似于index_subquery，利用<code>唯一索引</code>来关联子查询。<code>t2的id是主键，也可以理解为唯一的索引字段</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> t2 <span class="keyword">WHERE</span> t1.content <span class="operator">=</span> t2.content)</span><br><span class="line">   <span class="keyword">OR</span> content <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220712071138320.png" alt="image-20220712071138320"></p>
<ul>
<li><strong>index_merge</strong>：在查询过程中需要<code>多个索引组合使用</code>，通常出现在有 or 的关键字的sql中。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t_emp</span><br><span class="line"><span class="keyword">WHERE</span> deptId <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">   <span class="keyword">OR</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220711132125501.png" alt="image-20220711132125501"></p>
<ul>
<li><strong>ref_or_null</strong>：当对普通二级索引进行等值匹配，且该索引列的值也可以是NULL值时。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t_emp</span><br><span class="line"><span class="keyword">WHERE</span> deptId <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">   <span class="keyword">OR</span> deptId <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220711131831315.png" alt="image-20220711131831315"></p>
<ul>
<li><strong>fulltext：</strong>全文索引。<code>一般通过搜索引擎实现，这里我们不展开。</code></li>
</ul>
<h4 id="possible-keys-和-keys-☆"><a href="#possible-keys-和-keys-☆" class="headerlink" title="possible_keys 和 keys ☆"></a>possible_keys 和 keys <strong>☆</strong></h4><ul>
<li><p><code>possible_keys</code>表示执行查询时可能用到的索引，一个或多个。 查询涉及到的字段上若存在索引，则该索引将被列出，**<br>但不一定被查询实际使用**。</p>
</li>
<li><p><code>keys</code>表示实际使用的索引。如果为NULL，则没有使用索引。</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> id</span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220710142152514.png" alt="image-20220710142152514"></p>
<h4 id="key-len-☆"><a href="#key-len-☆" class="headerlink" title="key_len ☆"></a>key_len <strong>☆</strong></h4><p>表示索引使用的字节数，根据这个值可以判断索引的使用情况，<code>检查是否充分利用了索引，针对联合索引值越大越好。</code></p>
<p><strong>如何计算：</strong></p>
<ol>
<li>先看索引上字段的类型+长度。比如：int&#x3D;4 ; varchar(20) &#x3D;20 ; char(20) &#x3D;20</li>
<li>如果是varchar或者char这种字符串字段，视字符集要乘不同的值，比如utf8要乘 3，如果是utf8mb4要乘4，GBK要乘2</li>
<li>varchar这种动态字符串要加2个字节</li>
<li>允许为空的字段要加1个字节</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_age_name <span class="keyword">ON</span> t_emp (age, `name`);</span><br><span class="line"><span class="comment">-- 测试1</span></span><br><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t_emp</span><br><span class="line"><span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">30</span></span><br><span class="line">  <span class="keyword">AND</span> `name` <span class="operator">=</span> <span class="string">&#x27;ab%&#x27;</span>;</span><br><span class="line"><span class="comment">-- 测试2</span></span><br><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t_emp</span><br><span class="line"><span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">30</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220710130548971.png" alt="image-20220710130548971"></p>
<h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h4><p>显示与key中的索引进行比较的列或常量。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ref=atguigudb.t1.id   关联查询时出现，t2表和t1表的哪一列进行关联</span></span><br><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t1,</span><br><span class="line">     t2</span><br><span class="line"><span class="keyword">WHERE</span> t1.id <span class="operator">=</span> t2.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ref=const  与索引列进行等值比较的东西是啥，const表示一个常数</span></span><br><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t_emp</span><br><span class="line"><span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">30</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220709211819944.png" alt="image-20220709211819944"></p>
<h4 id="rows-☆"><a href="#rows-☆" class="headerlink" title="rows ☆"></a>rows <strong>☆</strong></h4><p>MySQL认为它执行查询时必须检查的行数。值越小越好。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 如果是全表扫描，rows的值就是表中数据的估计行数</span></span><br><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t_emp</span><br><span class="line"><span class="keyword">WHERE</span> empno <span class="operator">=</span> <span class="string">&#x27;10001&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果是使用索引查询，rows的值就是预计扫描索引记录行数</span></span><br><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t_emp</span><br><span class="line"><span class="keyword">WHERE</span> deptId <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220710131916240.png" alt="image-20220710131916240"></p>
<h4 id="filtered"><a href="#filtered" class="headerlink" title="filtered"></a>filtered</h4><p>最后查询出来的数据占所有服务器端检查行数（rows）的<code>百分比</code>。值越大越好。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 先根据二级索引deptId找到数据的主键，有3条记录满足条件，</span></span><br><span class="line"><span class="comment">-- 再根据主键进行回表，最终找到3条记录，有100%的记录满足条件</span></span><br><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t_emp</span><br><span class="line"><span class="keyword">WHERE</span> deptId <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 这个例子如果name列是索引列则 filtered = 100 否则filtered = 10(全表扫描)</span></span><br><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t_emp</span><br><span class="line"><span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;风清扬&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220709212722601.png" alt="image-20220709212722601"></p>
<h4 id="Extra-☆"><a href="#Extra-☆" class="headerlink" title="Extra ☆"></a>Extra <strong>☆</strong></h4><p>包含不适合在其他列中显示但十分重要的额外信息。通过这些额外信息来<code>理解MySQL到底将如何执行当前的查询语句</code><br>。MySQL提供的额外信息有好几十个，这里只挑介绍比较重要的介绍。</p>
<ul>
<li><strong>Impossible WHERE</strong>：where子句的值总是false</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t_emp</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">!=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220709231638201.png" alt="image-20220709231638201"></p>
<ul>
<li><strong>Using where：</strong>使用了where，但在where上有字段没有创建索引</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t_emp</span><br><span class="line"><span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;风清扬&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220709215122017.png" alt="image-20220709215122017"></p>
<ul>
<li><strong>Using temporary：</strong>使了用临时表保存中间结果</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> content</span><br><span class="line"><span class="keyword">FROM</span> t1;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220710181100102.png" alt="image-20220710181100102"></p>
<ul>
<li><strong>Using filesort：</strong></li>
</ul>
<p>在对查询结果中的记录进行排序时，是可以使用索引的，如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> id;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220710172607190.png" alt="image-20220710172607190"></p>
<p>如果排序操作无法使用到索引，只能在内存中（记录较少时）或者磁盘中（记录较多时）进行排序（filesort），如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> content;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220710172926396.png" alt="image-20220710172926396"></p>
<ul>
<li><strong>Using index：</strong>使用了覆盖索引，表示直接访问索引就足够获取到所需要的数据，不需要通过索引回表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> id, content1</span><br><span class="line"><span class="keyword">FROM</span> t4;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220712071716131.png" alt="image-20220712071716131"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> id</span><br><span class="line"><span class="keyword">FROM</span> t1;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220712072055566.png" alt="image-20220712072055566"></p>
<ul>
<li><strong>Using index condition：</strong>叫作  <code>Index Condition Pushdown Optimization （索引下推优化）</code><ul>
<li><code>如果没有索引下推（ICP）</code>，那么MySQL在存储引擎层找到满足<code>content1 &gt; &#39;z&#39;</code>条件的第一条二级索引记录。<code>主键值进行回表</code><br>，返回完整的记录给server层，server层再判断其他的搜索条件是否成立。如果成立则保留该记录，否则跳过该记录，然后向存储引擎层要下一条记录。</li>
<li><code>如果使用了索引下推（ICP</code>），那么MySQL在存储引擎层找到满足<code>content1 &gt; &#39;z&#39;</code>条件的第一条二级索引记录。<code>不着急执行回表</code><br>，而是在这条记录上先判断一下所有关于<code>idx_content1</code><br>索引中包含的条件是否成立，也就是<code>content1 &gt; &#39;z&#39; AND content1 LIKE &#39;%a&#39;</code><br>是否成立。如果这些条件不成立，则直接跳过该二级索引记录，去找下一条二级索引记录；如果这些条件成立，则执行回表操作，返回完整的记录给server层。</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- content1列上有索引idx_content1</span></span><br><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t4</span><br><span class="line"><span class="keyword">WHERE</span> content1 <span class="operator">&gt;</span> <span class="string">&#x27;z&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> content1 <span class="keyword">LIKE</span> <span class="string">&#x27;%a&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220710180257692.png" alt="image-20220710180257692"></p>
<p><strong>注意：</strong>如果这里的查询条件<code>只有content1 &gt; &#39;z&#39;</code>，那么找到满足条件的索引后也会进行一次索引下推的操作，判断content1 &gt; ‘<br>z’是否成立（这是源码中为了编程方便做的冗余判断）</p>
<p><img src="/image-20220712012108900.png" alt="image-20220712012108900"></p>
<ul>
<li><strong>Using join buffer：</strong>在连接查询时，当被驱动表不能有效的利用索引时，MySQL会为其分配一块名为连接缓冲区（join<br>buffer）的内存来加快查询速度</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t1,</span><br><span class="line">     t2</span><br><span class="line"><span class="keyword">WHERE</span> t1.content <span class="operator">=</span> t2.content;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220710182356817.png" alt="image-20220710182356817"></p>
<p>下面这个例子就是被驱动表使用了索引：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t_emp,</span><br><span class="line">     t_dept</span><br><span class="line"><span class="keyword">WHERE</span> t_dept.id <span class="operator">=</span> t_emp.deptId;</span><br></pre></td></tr></table></figure>

<p><img src="/image-20220710182524371.png" alt="image-20220710182524371"></p>
<h3 id="133-MySQL数据库cpu飙升的话你会如何分析"><a href="#133-MySQL数据库cpu飙升的话你会如何分析" class="headerlink" title="133 MySQL数据库cpu飙升的话你会如何分析"></a>133 MySQL数据库cpu飙升的话你会如何分析</h3><p>重点是定位问题。</p>
<p>先</p>
<p><strong>1 使用top观察mysqld的cpu利用率</strong></p>
<ol>
<li><p>切换到常用的数据库</p>
</li>
<li><p>使用show full processlist;查看会话</p>
</li>
<li><p>观察是哪些sql消耗了资源，其中重点观察state指标</p>
</li>
<li><p>定位到具体sql</p>
</li>
</ol>
<p><strong>2 pidstat</strong></p>
<ol>
<li>定位到线程</li>
<li>在PERFORMANCE_SCHEMA.THREADS中记录了thread_os_id 找到线程执行的sql</li>
<li>根据操作系统id可以到processlist表找到对应的会话</li>
<li>在会话中即可定位到问题sql</li>
</ol>
<p><strong>3 使用show profile观察sql各个阶段耗时</strong></p>
<p><strong>4 服务器上是否运行了其他程序</strong></p>
<p><strong>5 检查一下是否有慢查询</strong></p>
<p><strong>6 pref top</strong></p>
<p>使用pref 工具分析哪些函数引发的cpu过高来追踪定位</p>
<p><img src="/image-20221106160437906.png" alt="image-20221106160437906"></p>
<h3 id="134-有没有进行过分库分表？"><a href="#134-有没有进行过分库分表？" class="headerlink" title="134 有没有进行过分库分表？"></a>134 有没有进行过分库分表？</h3><h4 id="135-什么是分库分表？"><a href="#135-什么是分库分表？" class="headerlink" title="135 	什么是分库分表？"></a>135 	什么是分库分表？</h4><p><strong>垂直分库</strong></p>
<p>一个数据库由很多表的构成，每个表对应着<strong>不同的业务</strong>，垂直切分是指按照业务将表进行分类，分布到不同<br>的数据库上面，这样也就将数据或者说压力分担到不同的库上面，如下图：</p>
<p>​                <img src="/111.jpg"></p>
<p>系统被切分成了，用户，订单交易，支付几个模块。</p>
<p><strong>水平分表</strong></p>
<p>把一张表里的内容按照不同的规则 写到不同的库里</p>
<p>相对于垂直拆分，水平拆分不是将表做分类，而是按照某个字段的某种规则来分散到多个库之中，每个表中包含一部分数据。简单来说，我们可以将数据的水平切分理解为是按照数据行的切分，就是将表中的某些行切分<br>到一个数据库，而另外的某些行又切分到其他的数据库中，如图：</p>
<p><img src="/222.jpg"></p>
<h4 id="136-什么时候进行分库分表？有没有配合es使用经验？"><a href="#136-什么时候进行分库分表？有没有配合es使用经验？" class="headerlink" title="136 	什么时候进行分库分表？有没有配合es使用经验？"></a>136 	什么时候进行分库分表？有没有配合es使用经验？</h4><ol>
<li>能不分就不分</li>
<li>单机性能下降明显的时候</li>
<li>增加缓存（通常查询量比较大），细分业务</li>
<li>首先尝试主被集群，读写分离</li>
<li>尝试分库</li>
<li>尝试分表 -&gt; 冷热数据分离</li>
</ol>
<p>大数据量下可以配合es完成高效查询</p>
<h4 id="137-说一下实现分库分表工具的实现思路"><a href="#137-说一下实现分库分表工具的实现思路" class="headerlink" title="137 	说一下实现分库分表工具的实现思路"></a>137 	说一下实现分库分表工具的实现思路</h4><ol>
<li>伪装成mysql服务器，代理用户请求转发到真实服务器</li>
<li>基于本地aop实现，拦截sql，改写，路由和结果归集处理。</li>
</ol>
<h4 id="138-用过哪些分库分表工具？"><a href="#138-用过哪些分库分表工具？" class="headerlink" title="138 	用过哪些分库分表工具？"></a>138 	用过哪些分库分表工具？</h4><p><img src="/25723371_16499183725J8d.png" alt="img"></p>
<h4 id="139-分库分表后可能会有哪些问题？"><a href="#139-分库分表后可能会有哪些问题？" class="headerlink" title="139 	分库分表后可能会有哪些问题？"></a>139 	分库分表后可能会有哪些问题？</h4><p>经典的问题</p>
<ol>
<li>执行效率明显降低</li>
<li>表结构很难再次调整</li>
<li>引发分布式id问题</li>
<li>产生跨库join</li>
<li>代理类中间件网络io成为瓶颈</li>
</ol>
<h4 id="140-说一下读写分离常见方案？"><a href="#140-说一下读写分离常见方案？" class="headerlink" title="140 	说一下读写分离常见方案？"></a>140 	说一下读写分离常见方案？</h4><p><img src="/image-20221106171251532.png" alt="image-20221106171251532"></p>
<p><img src="/image-20221106171945037.png" alt="image-20221106171945037"></p>
<h3 id="141-为什么要使用视图？-什么是视图？"><a href="#141-为什么要使用视图？-什么是视图？" class="headerlink" title="141 为什么要使用视图？ 什么是视图？"></a>141 为什么要使用视图？ 什么是视图？</h3><p>视图定义：<br>1、视图是一个虚表，是从一个或几个基本表（或视图）导出的表。<br>2、只存放视图的定义，不存放视图对应的数据。<br>3、基表中的数据发生变化，从视图中查询出的数据也随之改变。<br>视图的作用：<br>1、视图能够简化用户的操作<br>2、视图使用户能以多种角度看待同一数据<br>3、视图对重构数据库提供了一定程度的逻辑独立性<br>4、视图能够对机密数据提供安全保护<br>5、适当的利用视图可以更清晰的表达查询</p>
<h3 id="142-什么是存储过程？有没有使用过？"><a href="#142-什么是存储过程？有没有使用过？" class="headerlink" title="142 什么是存储过程？有没有使用过？"></a>142 什么是存储过程？有没有使用过？</h3><p>项目中禁止使用存储过程，存储过程难以调试和扩展，更没有移植性</p>
<h3 id="143-有没有使用过外键？有什么需要注意的地方？"><a href="#143-有没有使用过外键？有什么需要注意的地方？" class="headerlink" title="143 有没有使用过外键？有什么需要注意的地方？"></a>143 有没有使用过外键？有什么需要注意的地方？</h3><p>不得使用外键与级联，一切外键概念必须在应用层解决。</p>
<p>说明：以学生和成绩的关系为例，学生表中的 student_id是主键，那么成绩表中的 student_id 则为外键。如果更新学生表中的<br>student_id，同时触发成绩表中的 student_id 更新，即为 级联更新。外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻<br>塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。</p>
<h3 id="144-用过processlist吗？"><a href="#144-用过processlist吗？" class="headerlink" title="144 用过processlist吗？"></a>144 用过processlist吗？</h3><p>关键的就是state列，mysql列出的状态主要有以下几种：</p>
<ul>
<li>Checking table<br>正在检查数据表（这是自动的）。</li>
<li>Closing tables<br>正在将表中修改的数据刷新到磁盘中，同时正在关闭已经用完的表。这是一个很快的操作，如果不是这样的话，就应该确认磁盘空间是否已经满了或者磁盘是否正处于重负中。</li>
<li>Connect Out<br>复制从服务器正在连接主服务器。</li>
<li>Copying to tmp table on disk<br>由于临时结果集大于tmp_table_size，正在将临时表从内存存储转为磁盘存储以此节省内存。</li>
<li>Creating tmp table<br>正在创建临时表以存放部分查询结果。</li>
<li>deleting from main table<br>服务器正在执行多表删除中的第一部分，刚删除第一个表。</li>
<li>deleting from reference tables<br>服务器正在执行多表删除中的第二部分，正在删除其他表的记录。</li>
<li>Flushing tables<br>正在执行FLUSH TABLES，等待其他线程关闭数据表。</li>
<li>Killed<br>发送了一个kill请求给某线程，那么这个线程将会检查kill标志位，同时会放弃下一个kill请求。MySQL会在每次的主循环中检查kill标志位，不过有些情况下该线程可能会过一小段才能死掉。如果该线程程被其他线程锁住了，那么kill请求会在锁释放时马上生效。</li>
<li>Locked<br>被其他查询锁住了。</li>
<li>Sending data<br>正在处理Select查询的记录，同时正在把结果发送给客户端。Sending data”状态的含义，原来这个状态的名称很具有误导性，所谓的“Sending<br>data”并不是单纯的发送数据，而是包括“收集 + 发送 数据”。</li>
<li>Sorting for group<br>正在为GROUP BY做排序。</li>
<li>Sorting for order<br>正在为ORDER BY做排序。</li>
<li>Opening tables<br>这个过程应该会很快，除非受到其他因素的干扰。例如，在执Alter TABLE或LOCK TABLE语句行完以前，数据表无法被其他线程打开。正尝试打开一个表。</li>
<li>Removing duplicates<br>正在执行一个Select DISTINCT方式的查询，但是MySQL无法在前一个阶段优化掉那些重复的记录。因此，MySQL需要再次去掉重复的记录，然后再把结果发送给客户端。</li>
<li>Reopen table<br>获得了对一个表的锁，但是必须在表结构修改之后才能获得这个锁。已经释放锁，关闭数据表，正尝试重新打开数据表。</li>
<li>Repair by sorting<br>修复指令正在排序以创建索引。</li>
<li>Repair with keycache<br>修复指令正在利用索引缓存一个一个地创建新索引。它会比Repair by sorting慢些。</li>
<li>Searching rows for update<br>正在讲符合条件的记录找出来以备更新。它必须在Update要修改相关的记录之前就完成了。</li>
<li>Sleeping<br>正在等待客户端发送新请求.</li>
<li>System lock<br>正在等待取得一个外部的系统锁。如果当前没有运行多个mysqld服务器同时请求同一个表，那么可以通过增加–skip-external-locking参数来禁止外部系统锁。</li>
<li>Upgrading lock<br>Insert DELAYED正在尝试取得一个锁表以插入新记录。&#x3D;</li>
<li>Updating<br>正在搜索匹配的记录，并且修改它们。</li>
<li>User Lock<br>正在等待GET_LOCK()。</li>
<li>Waiting for tables<br>该线程得到通知，数据表结构已经被修改了，需要重新打开数据表以取得新的结构。然后，为了能的重新打开数据表，必须等到所有其他线程关闭这个表。以下几种情况下会产生这个通知：FLUSH<br>TABLES tbl_name, Alter TABLE, RENAME TABLE, REPAIR TABLE, ANALYZE TABLE,或OPTIMIZE TABLE。</li>
<li>waiting for handler insert<br>Insert DELAYED已经处理完了所有待处理的插入操作，正在等待新的请求。</li>
</ul>
<h3 id="145-某个表有数千万数据，查询比较慢，如何优化？说一下思路"><a href="#145-某个表有数千万数据，查询比较慢，如何优化？说一下思路" class="headerlink" title="145 某个表有数千万数据，查询比较慢，如何优化？说一下思路"></a>145 某个表有数千万数据，查询比较慢，如何优化？说一下思路</h3><ol>
<li>前端优化 减少查询<ol>
<li>合并请求:多个请求需要的数据尽量一条sql拿出来</li>
<li>会话保存：和用户会话相关的数据尽量一次取出重复使用</li>
<li>避免无效刷新</li>
</ol>
</li>
<li>多级缓存 不要触及到数据库<ol>
<li>应用层热点数据高速查询缓存（低一致性缓存）</li>
<li>高频查询大数据量镜像缓存（双写高一致性缓存）</li>
<li>入口层缓存（几乎不变的系统常量）</li>
</ol>
</li>
<li>使用合适的字段类型，比如varchar换成char</li>
<li>一定要高效使用索引。<ol>
<li>使用explain 深入观察索引使用情况</li>
<li>检查select 字段最好满足索引覆盖</li>
<li>复合索引注意观察key_len索引使用情况</li>
<li>有分组，排序，注意file sort，合理配置相应的buffer大小</li>
</ol>
</li>
<li>检查查询是否可以分段查询，避免一次拿出过多无效数据</li>
<li>多表关联查询是否可以设置冗余字段，是否可以简化多表查询或分批查询</li>
<li>分而治之：把服务拆分成更小力度的微服务</li>
<li>冷热数据分库存储</li>
<li>读写分离，主被集群 然后再考虑分库分表</li>
<li>等</li>
</ol>
<h3 id="146-count-列名-和-count-有什么区别？"><a href="#146-count-列名-和-count-有什么区别？" class="headerlink" title="146 count(列名)和 count(*)有什么区别？"></a>146 count(列名)和 count(*)有什么区别？</h3><p>count(<em>)是 SQL92 定义的<br>标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。<br>说明：count(</em>)会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行。</p>
<h3 id="147-如果有超大分页改怎么处理？"><a href="#147-如果有超大分页改怎么处理？" class="headerlink" title="147 如果有超大分页改怎么处理？"></a>147 如果有超大分页改怎么处理？</h3><ul>
<li><p><code>select name from user limit 10000,10;</code>在 使用的时候并不是跳过 offset 行，而是取 offset+N 行，然后返回放弃前 offset 行，返回<br>N 行</p>
</li>
<li><p>通过索引优化的方案：</p>
<ul>
<li>如果主键自增可以 <code>select name from user where id &gt; 10000 limit 10;</code></li>
<li>延迟关联</li>
<li>需要order by时<ul>
<li>一定注意增加筛选条件，避免全表排序<ul>
<li>where -》 order by -》 limit</li>
</ul>
</li>
<li>减少select字段</li>
<li>优化相关参数避免filesort</li>
</ul>
</li>
</ul>
</li>
<li><p>一般大分页情况比较少（很少有人跳转到几百万页去查看数据），实际互联网业务中多数还是按顺序翻页，可以使用缓存提升前几页的查询效率，实际上大多数知名互联网项目也都是这么做的</p>
</li>
</ul>
<p>在阿里巴巴《Java开发手册》中的建议：</p>
<p>【推荐】利用延迟关联或者子查询优化超多分页场景。 说明：MySQL 并不是跳过 offset 行，而是取 offset+N 行，然后返回放弃前 offset<br>行，返回 N 行，那当 offset 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过 特定阈值的页数进行 SQL 改写。<br>正例：先快速定位需要获取的 id 段，然后再关联： SELECT a.* FROM 表 1 a, (select id from 表 1 where 条件 LIMIT 100000,20 ) b<br>where a.id&#x3D;b.id</p>
<h3 id="148-mysql服务器毫无规律的异常重启如何排查问题？"><a href="#148-mysql服务器毫无规律的异常重启如何排查问题？" class="headerlink" title="148 mysql服务器毫无规律的异常重启如何排查问题？"></a>148 mysql服务器毫无规律的异常重启如何排查问题？</h3><p>首先是查看mysql和系统日志来定位错误</p>
<p><strong>最常见的是关闭swap分区后OOM问题：</strong></p>
<p>mysql 分为应用进程和守护进程</p>
<p>当应用进程内存占用过高的时候操作系统可能会kill掉进程，此时守护进程又帮我们重启了应用进程，运行一段时间后又出现OOM如此反复</p>
<p>可以排查以下几个关键点</p>
<ul>
<li>运行时内存占用率</li>
<li>mysql buffer相关参数</li>
<li>mysql 网络连接相关参数</li>
</ul>
<p><strong>异常关机或kill -9 mysql 后导致表文件损坏</strong></p>
<ul>
<li>直接使用备份</li>
<li>配置 innodb_force_recovery 跳过启动恢复过程</li>
</ul>
<h4 id="149-mysql-线上修改表结构有哪些风险"><a href="#149-mysql-线上修改表结构有哪些风险" class="headerlink" title="149 mysql 线上修改表结构有哪些风险?"></a>149 mysql 线上修改表结构有哪些风险?</h4><p>针对ddl命令，有以下几种方式</p>
<ul>
<li><p>copy table 锁原表，创建临时表并拷贝数据</p>
</li>
<li><p>inplace 针对索引修改删除的优化，不需要拷贝所有数据</p>
</li>
<li><p>Online DDL 细分DDL命令来决定是否锁表</p>
</li>
<li><p>可能会锁表，导致无法读写</p>
</li>
<li><p>ORM中的映射失效</p>
</li>
<li><p>索引失效</p>
</li>
</ul>
<p>建议：建个新表，导入数据后重命名</p>
<h3 id="150-什么是mysql多实例部署？"><a href="#150-什么是mysql多实例部署？" class="headerlink" title="150 什么是mysql多实例部署？"></a>150 什么是mysql多实例部署？</h3><p>指的是在一台主机上部署多个实例</p>
<p>主要目的是压榨服务器性能</p>
<p>缺点是互相影响</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql优化</tag>
      </tags>
  </entry>
  <entry>
    <title>golang map相关</title>
    <url>/2023/01/23/golang/golang-map-xiang-guan/</url>
    <content><![CDATA[<h3 id="1-map-的-key-和-value有什么限制吗"><a href="#1-map-的-key-和-value有什么限制吗" class="headerlink" title="1. map 的 key 和 value有什么限制吗"></a>1. map 的 key 和 value有什么限制吗</h3><pre><code>没有，不限制
key可以int，strin g，不可以是map，
value 可以是任何值
</code></pre>
<h3 id="2-如何判断-map-中是否包含某个-key-？"><a href="#2-如何判断-map-中是否包含某个-key-？" class="headerlink" title="2. 如何判断 map 中是否包含某个 key ？"></a>2. 如何判断 map 中是否包含某个 key ？</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var sample map[int]int</span><br><span class="line">if _, ok := sample[10];ok&#123;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-map-长啥样-？-map的底层实现"><a href="#3-map-长啥样-？-map的底层实现" class="headerlink" title="3. map 长啥样 ？ map的底层实现?"></a>3. map 长啥样 ？ map的底层实现?</h3><pre><code>哈希表，hash table
map 是由 key-value 对组成的； key 只会出现一次。
</code></pre>
<p>和 map 相关的操作主要是：增删改查<br>使用 map 的原因是 各种增删改查的效率非常高</p>
<pre><code>map的底层是 哈希查找表，并且使用链表解决哈希冲突
</code></pre>
<h3 id="4-map-的内存模型是什么样的-？"><a href="#4-map-的内存模型是什么样的-？" class="headerlink" title="4. map 的内存模型是什么样的 ？"></a>4. map 的内存模型是什么样的 ？</h3><pre><code>golang 中 map 的结构体是 hmap，它是 hashmap 的“缩写”。
</code></pre>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> runtime</span><br><span class="line"><span class="comment">// A header for a Go map.</span></span><br><span class="line"><span class="keyword">type</span> hmap <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">// Note: the format of the hmap is also encoded in cmd/compile/internal/gc/reflect.go.</span></span><br><span class="line">	<span class="comment">// Make sure this stays in sync with the compiler&#x27;s definition.</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 元素个数，调用 len(map) 时，直接返回此值</span></span><br><span class="line">	count     <span class="type">int</span> <span class="comment">// # live cells == size of map.  Must be first (used by len() builtin)</span></span><br><span class="line">	flags     <span class="type">uint8</span></span><br><span class="line">	<span class="comment">// buckets 的对数 log_2</span></span><br><span class="line">	B         <span class="type">uint8</span>  <span class="comment">// log_2 of # of buckets (can hold up to loadFactor * 2^B items)</span></span><br><span class="line">	<span class="comment">// overflow 的 bucket 近似数</span></span><br><span class="line">	noverflow <span class="type">uint16</span> <span class="comment">// approximate number of overflow buckets; see incrnoverflow for details</span></span><br><span class="line">	<span class="comment">// 计算 key 的哈希的时候会传入哈希函数</span></span><br><span class="line">	hash0     <span class="type">uint32</span> <span class="comment">// hash seed</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 指向 buckets 数组，大小为 2^B</span></span><br><span class="line">	<span class="comment">// 如果元素个数为0，就为 nil</span></span><br><span class="line">	buckets    unsafe.Pointer <span class="comment">// array of 2^B Buckets. may be nil if count==0.</span></span><br><span class="line">	<span class="comment">// 扩容的时候，buckets 长度会是 oldbuckets 的两倍</span></span><br><span class="line">	oldbuckets unsafe.Pointer <span class="comment">// previous bucket array of half the size, non-nil only when growing</span></span><br><span class="line">	<span class="comment">// 指示扩容进度，小于此地址的 buckets 迁移完成</span></span><br><span class="line">	nevacuate  <span class="type">uintptr</span>        <span class="comment">// progress counter for evacuation (buckets less than this have been evacuated)</span></span><br><span class="line"></span><br><span class="line">	extra *mapextra <span class="comment">// optional fields</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>map</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP协议和UDP协议</title>
    <url>/2023/01/23/golang/tcp-xie-yi-he-udp-xie-yi/</url>
    <content><![CDATA[<h3 id="1-tcp协议和udp协议的相同点是什么？"><a href="#1-tcp协议和udp协议的相同点是什么？" class="headerlink" title="1. tcp协议和udp协议的相同点是什么？"></a>1. tcp协议和udp协议的相同点是什么？</h3><p>都工作在传输层（应用层-&gt;传输层-&gt;网络层-&gt;数据链路层-&gt;物理层）<br>目标是在程序之间传输数据</p>
<pre><code>数据可以是文本，可以是视频，可以是图片，这些文件对于tcp和udp文件来说都是一堆二进制数据，没有多大的区别
</code></pre>
<h3 id="2-tcp协议和udp协议-协议的区别是什么？"><a href="#2-tcp协议和udp协议-协议的区别是什么？" class="headerlink" title="2. tcp协议和udp协议 协议的区别是什么？"></a>2. tcp协议和udp协议 协议的区别是什么？</h3><p>参考视频：<a href="https://www.bilibili.com/video/BV1kV411j7hA?vd_source=08c7a48b57ad4d6c4aa2c17295004ee2">连接</a></p>
<p>tcp 面向连接，udp 非面向连接<br>tcp是可靠的，有三次握手，四次挥手。udp 不可靠。</p>
<p>为什么是三次握手？<br>三次握手解决了网络信道不可靠的问题。<br>比如只有两次握手，假如其中一次客户端向服务端发送syn包，由于网络延迟，客户端没接收到反馈，就又重试。<br>第二次重试成功，由于网络恢复，又重新被服务端接收，这样就导致服务端重复接收同一个请求，所以需要三次握手，服务端给客户端一个确认信号。<br>客户端再发送一个确认信号sck，才可以保证连接成功。<br>连接成功才可以进入客户端和服务端数据传输问题。</p>
<p>为什么是四次挥手？<br>四次挥手实际上是<br>1 客户端发起fin包给服务端，客户端 客户端转变为 fin-wait-1 ，服务端状态变为 close-wait<br>2 服务端确认 ack  客户端转变为 fin-wait-2<br>3 服务端 发起 fin 给客户端， 服务端状态变为last-ack，客户端转变为 time-wait<br>4 客户端 发送 确认 ack 给 客户端 客户端转变为 close， 服务端状态变 close</p>
]]></content>
      <categories>
        <category>http</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>post_name</title>
    <url>/2022/12/20/post-name/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>有点焦虑</title>
    <url>/2022/12/15/shenghuo/2022-nian-ji-lu/you-dian-jiao-lu/</url>
    <content><![CDATA[<p>安稳了有两三个月吧，又开始焦虑了。</p>
<p>公司拖欠工资，12月15号了，10月的工资还没发。</p>
<p>难受了好几天。一天不发工资难受一天，听说领导上个月就提离职了。唉。<br>本来想到年后走的，看来年前就得开始投简历，面试，找工作。一想到又要去面试，我就很难受。</p>
<p>刷题，背知识点，讲一些从网上学来的并没有实践过的项目亮点，难受啊。</p>
<p>不过今天看了一个视频，是讲八股文的，说八股文是一个程序员必备的起点，我们要在八股文的基础上去增加自己的理解，并且在实际项目中遇到问题可以借鉴八股文中比较成熟的方案。</p>
<p>观点还蛮新颖的。</p>
<p>看来，八股文还是得背，并且要熟练的背，还可以运用到项目中。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>go 需要牢记的点</title>
    <url>/2022/12/15/golang/go-xu-yao-lao-ji-de-dian/</url>
    <content><![CDATA[<p>熟悉常⻅数据结构和算法，⽐如树，队列，堆，栈，链表，数组，排序，递归等<br>了解TCP&#x2F;IP协议，⽐如三次握⼿，四次挥⼿，time_wait,close_wait等等<br>熟悉Go基本语法，对切⽚，Map，channel，GC，GPM调度模型有深⼊了解<br>熟悉Gin，Beego，Go-zero，Go-micro等web和微服务框架，对熔断，限流，服务治理等有⼀定认知<br>熟悉redis，⽐如⼋种基本数据类型，主从复制，哨兵模式，集群模式，缓存⼀致性问题等<br>熟悉mysql，⽐如索引，sql优化，binlog，B+tree等<br>对⾼并发有⼀定的经验，⽐如分库分表，缓存，队列，负载均衡，CDN等<br>熟悉Linux以及操作命令，⽐如netstat，top，cat，kill，ps等<br>熟悉Git的使⽤</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>感冒疫苗</title>
    <url>/2022/12/15/shenghuo/2022-nian-ji-lu/gan-mou-yi-miao/</url>
    <content><![CDATA[<h2 id="关于感冒疫苗"><a href="#关于感冒疫苗" class="headerlink" title="关于感冒疫苗"></a>关于感冒疫苗</h2><p>适合在流感之前接种，一般在10月前，在9月，10月左右接种。</p>
<p>可以接种三价疫苗或者四价疫苗。</p>
<p>”四价流感疫苗覆盖更多病毒型别。但以国内现有的价格，三价流感疫苗性价比更高。<br>四价疫苗毕竟要翻一倍的价格了，成人剂型的四价疫苗现在140元左右，三价疫苗只要六七十元。多一个型别，但保护率并没有翻一倍。“</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>健康</tag>
      </tags>
  </entry>
  <entry>
    <title>go集成常用的中间件</title>
    <url>/2022/12/15/go-es8/go-ji-cheng-chang-yong-de-zhong-jian-jian/</url>
    <content><![CDATA[<h3 id="1-go集成常用的中间件"><a href="#1-go集成常用的中间件" class="headerlink" title="1. go集成常用的中间件"></a>1. go集成常用的中间件</h3><p>es<br>mysql<br>mongodb<br>redis<br>kafka<br>promethues<br>还有比如 协程池</p>
<h3 id="2-项目中使用Go集成各种中间件需要考虑哪些？"><a href="#2-项目中使用Go集成各种中间件需要考虑哪些？" class="headerlink" title="2. 项目中使用Go集成各种中间件需要考虑哪些？"></a>2. 项目中使用Go集成各种中间件需要考虑哪些？</h3><pre><code>防止直接删库删表
阻止异常操作，如不戴where es 查询条件过多，或深层嵌套
</code></pre>
<h4 id="2-1-监控上报"><a href="#2-1-监控上报" class="headerlink" title="2.1. 监控上报"></a>2.1. 监控上报</h4><h4 id="2-2-多客户端支持"><a href="#2-2-多客户端支持" class="headerlink" title="2.2. 多客户端支持"></a>2.2. 多客户端支持</h4><h4 id="2-3-与原生操作一致，减少学习成本"><a href="#2-3-与原生操作一致，减少学习成本" class="headerlink" title="2.3. 与原生操作一致，减少学习成本"></a>2.3. 与原生操作一致，减少学习成本</h4><h4 id="2-4-对参数的优雅处理"><a href="#2-4-对参数的优雅处理" class="headerlink" title="2.4. 对参数的优雅处理"></a>2.4. 对参数的优雅处理</h4><h4 id="2-5-单元测试和使用样例"><a href="#2-5-单元测试和使用样例" class="headerlink" title="2.5. 单元测试和使用样例"></a>2.5. 单元测试和使用样例</h4><h3 id="3-各种场景引入消息中间件应该如何选择？"><a href="#3-各种场景引入消息中间件应该如何选择？" class="headerlink" title="3. 各种场景引入消息中间件应该如何选择？"></a>3. 各种场景引入消息中间件应该如何选择？</h3><h4 id="3-1-消息中间件使用场景"><a href="#3-1-消息中间件使用场景" class="headerlink" title="3.1. 消息中间件使用场景"></a>3.1. 消息中间件使用场景</h4><pre><code>异步数据处理
流量控制（业务流量削峰）
系统应用解耦
</code></pre>
<h3 id="4-Golang使用kafka的正确姿势"><a href="#4-Golang使用kafka的正确姿势" class="headerlink" title="4. Golang使用kafka的正确姿势"></a>4. Golang使用kafka的正确姿势</h3><h3 id="5-Go操作ES的一些技巧和注意事项"><a href="#5-Go操作ES的一些技巧和注意事项" class="headerlink" title="5. Go操作ES的一些技巧和注意事项"></a>5. Go操作ES的一些技巧和注意事项</h3><h3 id="6-生产环境中Go集成mysql需要重点解决哪些问题？"><a href="#6-生产环境中Go集成mysql需要重点解决哪些问题？" class="headerlink" title="6. 生产环境中Go集成mysql需要重点解决哪些问题？"></a>6. 生产环境中Go集成mysql需要重点解决哪些问题？</h3><h3 id="7-Go中如何正确使用Redis？"><a href="#7-Go中如何正确使用Redis？" class="headerlink" title="7. Go中如何正确使用Redis？"></a>7. Go中如何正确使用Redis？</h3><h3 id="8-Go集成MongoDB细节揭秘（一）"><a href="#8-Go集成MongoDB细节揭秘（一）" class="headerlink" title="8. Go集成MongoDB细节揭秘（一）"></a>8. Go集成MongoDB细节揭秘（一）</h3><h3 id="9-Go集成Promethues细节揭秘-一"><a href="#9-Go集成Promethues细节揭秘-一" class="headerlink" title="9. Go集成Promethues细节揭秘(一)"></a>9. Go集成Promethues细节揭秘(一)</h3>]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务架构设计</title>
    <url>/2022/12/15/go-es8/wei-fu-wu-jia-gou-she-ji/</url>
    <content><![CDATA[<p>微服务是什么？<br>可以参考这篇文章，讲的很好。<br><a href="https://www.ruanyifeng.com/blog/2022/04/microservice.html">阮一峰的网络日志</a></p>
<p>本人需要知道的要点：<br>微服务中每个服务是部署在不同的服务器上的。<br>不同的服务可以用不同的语言，如go php java c++，没有了语言的限制<br>大概20年前开始有一种 ”面向服务架构“的开发模式，每个服务部署在单独的服务器上。<br>直到2014年，docker的兴起，可以让不同的程序运行在不同的容器里，而且只占用极少的资源。<br>可以让每个服务不再占用一个服务器，而只占用服务器中极少的部分系统资源，这样就不需要多台服务器了。<br>最简单的情况下，本机运行多个容器，只用一台服务器就实现了面向服务架构，这在以前是做不到的。这种实现方式就叫做微服务。<br>也就是说一个服务器运行一个docker，一个docker里面运行很多个服务这种操作，也是微服务的常用操作。</p>
<pre><code>简单说，微服务就是采用容器技术的面向服务架构。它依然使用&quot;服务&quot;作为功能单元，但是变成了轻量级实现，不需要新增服务器，只需要新建容器（一个进程），所以才叫做&quot;微服务&quot;。

一个微服务就是一个独立的进程。 这个进程可以运行在本机，也可以运行在别的服务器，或者在云端（比如云服务和云函数 FaaS）。
</code></pre>
<h3 id="1-架构的设计原则？"><a href="#1-架构的设计原则？" class="headerlink" title="1. 架构的设计原则？"></a>1. 架构的设计原则？</h3><h4 id="1-1-避免过度设计"><a href="#1-1-避免过度设计" class="headerlink" title="1.1. 避免过度设计"></a>1.1. 避免过度设计</h4><h4 id="1-2-优先使用成熟的技术"><a href="#1-2-优先使用成熟的技术" class="headerlink" title="1.2. 优先使用成熟的技术"></a>1.2. 优先使用成熟的技术</h4><h4 id="1-3-可扩展原则"><a href="#1-3-可扩展原则" class="headerlink" title="1.3. 可扩展原则"></a>1.3. 可扩展原则</h4><h4 id="1-4-高可用设计原则"><a href="#1-4-高可用设计原则" class="headerlink" title="1.4. 高可用设计原则"></a>1.4. 高可用设计原则</h4><h4 id="1-5-隔离"><a href="#1-5-隔离" class="headerlink" title="1.5. 隔离"></a>1.5. 隔离</h4><h4 id="1-6-自动化驱动原则"><a href="#1-6-自动化驱动原则" class="headerlink" title="1.6. 自动化驱动原则"></a>1.6. 自动化驱动原则</h4><h3 id="2-什么时候应该拆分微服务？"><a href="#2-什么时候应该拆分微服务？" class="headerlink" title="2. 什么时候应该拆分微服务？"></a>2. 什么时候应该拆分微服务？</h3><h4 id="2-1-产品初期可以先使用单体架构"><a href="#2-1-产品初期可以先使用单体架构" class="headerlink" title="2.1. 产品初期可以先使用单体架构"></a>2.1. 产品初期可以先使用单体架构</h4><h4 id="2-2-微服务化是业务发展到一定阶段被迫去做的"><a href="#2-2-微服务化是业务发展到一定阶段被迫去做的" class="headerlink" title="2.2. 微服务化是业务发展到一定阶段被迫去做的"></a>2.2. 微服务化是业务发展到一定阶段被迫去做的</h4><h4 id="2-3-确保基础设施及公共基础服务已经准备好了"><a href="#2-3-确保基础设施及公共基础服务已经准备好了" class="headerlink" title="2.3. 确保基础设施及公共基础服务已经准备好了"></a>2.3. 确保基础设施及公共基础服务已经准备好了</h4><h3 id="3-拆分粒度以及如何衡量？"><a href="#3-拆分粒度以及如何衡量？" class="headerlink" title="3. 拆分粒度以及如何衡量？"></a>3. 拆分粒度以及如何衡量？</h3><p>三个人负责一个微服务</p>
<h3 id="4-拆分原则及问题？"><a href="#4-拆分原则及问题？" class="headerlink" title="4. 拆分原则及问题？"></a>4. 拆分原则及问题？</h3><h3 id="5-微服务的隔离"><a href="#5-微服务的隔离" class="headerlink" title="5. 微服务的隔离"></a>5. 微服务的隔离</h3><h4 id="5-1-线程级别的隔离"><a href="#5-1-线程级别的隔离" class="headerlink" title="5.1. 线程级别的隔离"></a>5.1. 线程级别的隔离</h4><pre><code>线程池，共享变量
</code></pre>
<h4 id="5-2-进程级别的隔离"><a href="#5-2-进程级别的隔离" class="headerlink" title="5.2. 进程级别的隔离"></a>5.2. 进程级别的隔离</h4><pre><code>进程级别的隔离就是拆分到不同的服务中实现
</code></pre>
<h5 id="5-2-1-进程间的通信方式有哪些？"><a href="#5-2-1-进程间的通信方式有哪些？" class="headerlink" title="5.2.1. 进程间的通信方式有哪些？"></a>5.2.1. 进程间的通信方式有哪些？</h5><pre><code>1 不同机器上需要经过远程调用 如rpc restapi 消息队列 套接字等等
2 相同机器上需要 通过共享内存，管道，消息来通信
</code></pre>
<h4 id="5-3-资源隔离-docker"><a href="#5-3-资源隔离-docker" class="headerlink" title="5.3. 资源隔离 docker"></a>5.3. 资源隔离 docker</h4><h4 id="5-4-快慢隔离-处理速度快的和慢的分别处理"><a href="#5-4-快慢隔离-处理速度快的和慢的分别处理" class="headerlink" title="5.4. 快慢隔离 处理速度快的和慢的分别处理"></a>5.4. 快慢隔离 处理速度快的和慢的分别处理</h4><h4 id="5-5-热点隔离"><a href="#5-5-热点隔离" class="headerlink" title="5.5. 热点隔离"></a>5.5. 热点隔离</h4><pre><code>读操作 写操作
</code></pre>
<h4 id="5-6-读写分离"><a href="#5-6-读写分离" class="headerlink" title="5.6. 读写分离"></a>5.6. 读写分离</h4><h4 id="5-7-应用隔离"><a href="#5-7-应用隔离" class="headerlink" title="5.7. 应用隔离"></a>5.7. 应用隔离</h4><h4 id="5-8-物理隔离-服务器机房等隔离"><a href="#5-8-物理隔离-服务器机房等隔离" class="headerlink" title="5.8. 物理隔离 服务器机房等隔离"></a>5.8. 物理隔离 服务器机房等隔离</h4><h3 id="6-微服务的限流"><a href="#6-微服务的限流" class="headerlink" title="6. 微服务的限流"></a>6. 微服务的限流</h3><pre><code>在一段时间内可以处理或接受多少个请求
</code></pre>
<h4 id="6-1-在哪些地方限流？"><a href="#6-1-在哪些地方限流？" class="headerlink" title="6.1. 在哪些地方限流？"></a>6.1. 在哪些地方限流？</h4><pre><code>请求入口处
业务入口处
公共基础服务入口
</code></pre>
<h4 id="6-2-分布式限流？"><a href="#6-2-分布式限流？" class="headerlink" title="6.2. 分布式限流？"></a>6.2. 分布式限流？</h4><pre><code>令牌桶和漏桶算法只能针对单个节点
针对每个用户的限流控制是十分有必要的
分布式限流控制的是整个应用全局的流量
分布式限流一般使用 redis 实现 
</code></pre>
<h4 id="6-3-如何确定流量的阈值？"><a href="#6-3-如何确定流量的阈值？" class="headerlink" title="6.3. 如何确定流量的阈值？"></a>6.3. 如何确定流量的阈值？</h4><pre><code>普通压测
全链路压测     
</code></pre>
]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>ES知识点总结</title>
    <url>/2022/12/15/go-es8/es-zhi-shi-dian-zong-jie/</url>
    <content><![CDATA[<h3 id="1-详细描述ES写入，更新，删除和查询的具体过程-？"><a href="#1-详细描述ES写入，更新，删除和查询的具体过程-？" class="headerlink" title="1. 详细描述ES写入，更新，删除和查询的具体过程 ？"></a>1. 详细描述ES写入，更新，删除和查询的具体过程 ？</h3><pre><code>数据路由的过程
文档的修改和删除是怎么处理的
副本同步机制
数据落盘的过程
</code></pre>
]]></content>
      <categories>
        <category>ES</category>
      </categories>
      <tags>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title>昨天又吵架了-20221212</title>
    <url>/2022/12/12/shenghuo/2022-nian-ji-lu/zuo-tian-you-chao-jia-liao-20221212/</url>
    <content><![CDATA[<h2 id="20221212"><a href="#20221212" class="headerlink" title="20221212"></a>20221212</h2><h3 id="昨天又吵架了"><a href="#昨天又吵架了" class="headerlink" title="昨天又吵架了"></a>昨天又吵架了</h3><p>就家里的VC 快吃完了。<br>让臭宝去买。买的时候买的是泡腾片，说我们吃的那种没有了。</p>
<p>我一看之前买的泡腾片的含量 一瓶VC的含量也就是我们吃的两片药片的含量，都是碳水，然后都是小苏打，钠含量过高。吃多了容易高血压。</p>
<p>我就在那里叨叨，说了 吃这个就是为了补充碳水吗，为了喝糖水嘛</p>
<p>应该是说的严重了点，但是我自己当时并没有意识到，臭宝也没有直接说自己被说的不开心了。</p>
<p>回来的时候说被我叨叨了一路。挎着脸，我以为他生气了，他说自己没生气，我就以为他阴阳我，我就生气了。</p>
<p>气的不行，都给自己气哭了。</p>
<p>我气的原因是 我以为他生气了，但是他不说生气的原因，就是在逃避沟通。</p>
<p>当时我换位思考，如果是我心疼女朋友，让她在家待着。自己辛苦出去买药，买女朋友喜欢吃的（当然我自己也喜欢吃），就因为买了一个不合适的药，被叨叨了一路。<br>出钱出力还讨不着好。我也会生气的。</p>
<p>后面我实在是气不过，就让他给我道歉，他说自己没有生气，是因为被说了一路导致心情不好。</p>
<p>后面今天早晨起床看见还要之前买的一瓶备用的没拆。。。</p>
<p>如果我看一下还有没有备用的，可能就会避免这次矛盾了吧。<br>或者 我语气没那么生硬，加个表情包，说减肥不想吃太甜的，不想喝那么多糖水。也可以避免了吧。<br>或许 他在微信上说 那他自己吃，再另外买两瓶我们吃的那个再一起吃，也可以避免吧。<br>或者 我在他说没生气的时候，多问一句，没生气为什么挎着脸的时候，他如果解释，被说了一路导致自己有些委屈，难受 也可以避免了吧。<br>或者 他看一下，他新买的泡腾片的VC含量，跟我讲 是每片1克，而不是之前的 每瓶180毫克的泡腾片，也可以避免吧。<br>或者 我看完了他新买的泡腾片的含量，其实不低，说一句，对不起我误会了，以为还是买的之前的那种，这个含量也不低，我们一起吃，也可以避免吧。</p>
<p>吵架啊，就是 该说话的时候选择了沉默。该示弱的时候选择了亮刀。</p>
<p>言语是刀，说出口的时候必定伤人伤己。伤人是好意被误会，曲解，更加难受。伤自己是 怒火并没有得到平息，甚至燃烧得愈旺。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>vue 目录结构</title>
    <url>/2022/12/10/vue/vue-mu-lu-jie-gou/</url>
    <content><![CDATA[<h3 id="1-Vue-目录结构"><a href="#1-Vue-目录结构" class="headerlink" title="1. Vue 目录结构"></a>1. Vue 目录结构</h3><h4 id="1-1-node-modules"><a href="#1-1-node-modules" class="headerlink" title="1.1. node_modules"></a>1.1. node_modules</h4><pre><code>存放项目安装的依赖 
</code></pre>
<h4 id="1-2-public"><a href="#1-2-public" class="headerlink" title="1.2. public"></a>1.2. public</h4><pre><code>打包后生成的静态文件要引用的一些文件
</code></pre>
<h4 id="1-3-src-文件夹"><a href="#1-3-src-文件夹" class="headerlink" title="1.3. src 文件夹"></a>1.3. src 文件夹</h4><pre><code>写代码的地方
</code></pre>
<h5 id="1-3-1-assets-文件夹"><a href="#1-3-1-assets-文件夹" class="headerlink" title="1.3.1. assets 文件夹"></a>1.3.1. assets 文件夹</h5><pre><code>需要用到的一些静态文件 比如css 图片等
</code></pre>
<h5 id="1-3-2-components-文件夹"><a href="#1-3-2-components-文件夹" class="headerlink" title="1.3.2. components 文件夹"></a>1.3.2. components 文件夹</h5><pre><code>编写组件的地方
</code></pre>
<h5 id="1-3-3-App-vue-文件"><a href="#1-3-3-App-vue-文件" class="headerlink" title="1.3.3. App.vue 文件"></a>1.3.3. App.vue 文件</h5><pre><code>程序的入口文件
</code></pre>
<h5 id="1-3-4-main-js-文件"><a href="#1-3-4-main-js-文件" class="headerlink" title="1.3.4. main.js 文件"></a>1.3.4. main.js 文件</h5><pre><code>挂载程序应用文件的地方
</code></pre>
<h5 id="1-3-5-index-html-文件"><a href="#1-3-5-index-html-文件" class="headerlink" title="1.3.5. index.html 文件"></a>1.3.5. index.html 文件</h5><pre><code>vue 需要用到的模板代码
</code></pre>
<h5 id="1-3-6-vite-config-js-文件"><a href="#1-3-6-vite-config-js-文件" class="headerlink" title="1.3.6. vite.config.js 文件"></a>1.3.6. vite.config.js 文件</h5><pre><code>项目要用到的配置文件
</code></pre>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>运动的减肥方案（丁勇老师）</title>
    <url>/2022/12/10/shenghuo/2022-nian-ji-lu/yun-dong-de-jian-fei-fang-an/</url>
    <content><![CDATA[<h2 id="运动的减肥方案"><a href="#运动的减肥方案" class="headerlink" title="运动的减肥方案"></a>运动的减肥方案</h2><p>1 标准运动方案5-10分钟关节活动，韧带拉伸。肌肉准备，可减少运动损伤<br>2 无氧运动， 10-15分钟，每周2-3次，大肌群运动<br>3 有氧运动，每天30-40分钟，慢跑，游泳，骑车，舞蹈，快走<br>4 整理拉伸 10-15分钟，拉伸肌群和韧带，缓解肌肉酸痛</p>
<p>减肥运动方案</p>
<p>120-150之间是完美的减肥运动</p>
<p>真正好的运动是中等强度运动，尽量达到220-年龄的心率的80%以上，重度强度会导致乳酸堆积＋运动损伤＋增肌（撸铁）</p>
<p>有氧运动是最佳方式，指吸入的氧气完全够用，非气喘吁吁，</p>
<p>每周150分钟-250分钟运动可预防体重增加，即每天有氧运动半小时可保持身材</p>
<p>每周大于250分钟的运动可达到减重效果，即每天40分钟有氧运动</p>
<p>再加上每周3次的无氧运动，即每次10分钟大强度的肌肉阻抗运动，增肌</p>
<p>防止运动定型，换多种运动做，举例每月换运动，</p>
<p>顺序：</p>
<p>必须做准备运动，然后先做无氧运动5-10分钟以提高心率（无氧会增食欲），再有氧40分钟（比如慢到走路的跑步，快慢结合看心率），最后肌肉拉伸10分钟</p>
<p>减肥是饮食控制第一位，辅助有氧无氧运动</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>减肥</tag>
      </tags>
  </entry>
  <entry>
    <title>补觉有助于心情恢复-20221118</title>
    <url>/2022/12/10/shenghuo/2022-nian-ji-lu/bu-jue-you-zhu-yu-xin-qing-hui-fu-20221118/</url>
    <content><![CDATA[<h2 id="20221116"><a href="#20221116" class="headerlink" title="20221116"></a>20221116</h2><h3 id="最近心态很差"><a href="#最近心态很差" class="headerlink" title="最近心态很差"></a>最近心态很差</h3><p>前两天觉得心态快崩了</p>
<p>总结一下可能的原因：<br>    1 感冒，身体需要休息<br>    2 熬夜，没有睡好<br>    3 大姨妈影响心情<br>    4 减肥没有效果</p>
<p>从16号开始 中午睡觉超过30分钟，晚上 十点多躺下，十一点左右睡着。<br>补了大概三天左右，心情放松了很多。</p>
<p>今天下午突然感觉特别想吃东西。<br>    听了减肥up的讲解，说 馋 是一种情绪，而不是一种生理需求<br>    好像，知道了病根之后就突然不想吃东西了。也不馋了。</p>
<p>1 想吃东西的时候可以吃高纤维，高蛋白，肝脂肪的食物<br>2 特别想吃东西的时候可以运动，分泌多巴胺</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>感冒流程</title>
    <url>/2022/12/10/shenghuo/2022-nian-ji-lu/ji-lu-yi-xia-gan-mou-liu-cheng/</url>
    <content><![CDATA[<p>11月一共感冒两次</p>
<p>一次是 11月11号，周四</p>
<pre><code>这次感冒是 晚上运动完有点冷，然后某人洗澡又磨磨蹭蹭，然后洗澡的时候打了几个寒颤，果不其然，当天晚上冷的不行，喝了点板蓝根
本以为凭着自己健康的体魄蒙着被子睡一觉第二天就好了，没想到第二天浑身酸痛一点力气都没有。
强撑着起床洗漱，然后去吃肠粉，肠粉也吃不下，剩了一大半。实在撑不住决定请假休息两天。
回去去药店拿了药，吃完躺下休息，挺管用的。一会就不难受了。药效过了继续吃药，差不多第三天就好了，没什么不舒服的了
</code></pre>
<p>另一次是11月28号，周一</p>
<pre><code>这一次应该是我周六的时候中午晚上没吃饭，只吃了酸奶和蛋白粉导致的热量摄入不足。免疫力低下导致的上火，不舒服。
周六早晨肠粉，中午蛋白粉加酸奶加坚果，两点又喝了点蛋白粉和两小包脆骨的零食。
周日上午12点才吃饭。上午有好几次站起来的时候眼花了，肯定是饿的。
周六晚上嗓子就有点不舒服了。周日晚上嗓子不舒服更加严重一点了，晚上睡觉吃了点药。
周日晚上洗澡就感觉冷，洗了个烫水澡，暖脚睡觉。
周一 感冒第一天，早晨起来就打喷嚏，流鼻涕，嗓子没那么痛了。就是时不时打喷嚏，流鼻涕，畏寒 畏光  还有点头痛 流鼻涕好多 呜呜。
周二 感冒第二天，早晨起床头痛，开始咳嗽，还是流鼻涕，有点浓鼻涕了，加上来了大姨妈，咳嗽一下，肚子痛一下，服了。
周三 感冒第三天，头痛开始缓解，也可能是适应了。清鼻涕减少，浓鼻涕增多。
周四 感冒第四天，头不那么痛了，嗓子里开始卡痰，咳不出咽不下。有点想吐。昨晚睡觉有些难受，鼻子不通气。清鼻涕减少，但是变浓了。还会打喷嚏，喷嚏的频率也变低了。
周五 感冒第五天，昨天半夜鼻涕卡在嗓子里，卡醒了。鼻子开始发干，不像前几天都是清鼻涕，浓鼻涕堵在鼻子嗓子那里很难受。臭宝昨天也开始嗓子不舒服了。
周六 感冒第六天，还是有鼻涕，昨晚睡觉安稳了许多。头不痛了。
周日 感冒第七天，头不怎么痛了，还稍微有点咳嗽，吃了猪肚鸡和糖葫芦。瘦了15斤了
周一 感冒第八天，头不怎么痛了，还稍微有点咳嗽，有鼻涕
周二 感冒第九天，头不痛了，不咳嗽了。但是还有点鼻涕。
周三 感冒第十天，头不痛了，有点咳嗽。但是还有点鼻涕。
周四 感冒第十一天，头不痛了，不咳嗽了。但是还有点鼻涕。
周五 感冒第十二天，头不痛了，不咳嗽了。没有鼻涕了。
</code></pre>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>热量计算</title>
    <url>/2022/12/10/shenghuo/2022-nian-ji-lu/re-liang-ji-suan/</url>
    <content><![CDATA[<pre><code>能量 （大卡） = 蛋白质含量 * 4大卡 + 脂肪含量 * 9大卡 + 碳水含量 * 4大卡
1g蛋白质可以产生4大卡能量，以此类推脂肪和碳水。
</code></pre>
<p>我的基础代谢在1200卡左右，消耗一斤（500g）脂肪需要消耗3900卡，消耗1g脂肪需要消耗约8卡</p>
<p>碳水每天120g左右<br>蛋白质：运动体重*1.2 约70g<br>70-30</p>
<h3 id="每日总摄入"><a href="#每日总摄入" class="headerlink" title="每日总摄入"></a>每日总摄入</h3><h4 id="早饭：蛋肉肠粉：300克约550卡"><a href="#早饭：蛋肉肠粉：300克约550卡" class="headerlink" title="早饭：蛋肉肠粉：300克约550卡"></a>早饭：蛋肉肠粉：300克约550卡</h4><pre><code>蛋白质30g，脂肪18g，碳水63g
</code></pre>
<h4 id="午饭：米饭加菜-x2F-肉-总共可摄入379卡-（不胖不瘦，想瘦就需要运动，至少运动30分钟，或者摄入少一点300卡）"><a href="#午饭：米饭加菜-x2F-肉-总共可摄入379卡-（不胖不瘦，想瘦就需要运动，至少运动30分钟，或者摄入少一点300卡）" class="headerlink" title="午饭：米饭加菜&#x2F;肉 总共可摄入379卡 （不胖不瘦，想瘦就需要运动，至少运动30分钟，或者摄入少一点300卡）"></a>午饭：米饭加菜&#x2F;肉 总共可摄入379卡 （不胖不瘦，想瘦就需要运动，至少运动30分钟，或者摄入少一点300卡）</h4><pre><code>80g米饭93卡，含有碳水21g，蛋白质2g，脂肪0g
可以吃263卡的菜
炸虾 158千卡/100g
虎皮青椒 44千卡/100g 
</code></pre>
<h4 id="晚饭：酸奶120g-坚果15-18g-蛋白粉15-18g-约270卡"><a href="#晚饭：酸奶120g-坚果15-18g-蛋白粉15-18g-约270卡" class="headerlink" title="晚饭：酸奶120g+坚果15-18g+蛋白粉15-18g 约270卡"></a>晚饭：酸奶120g+坚果15-18g+蛋白粉15-18g 约270卡</h4><pre><code>120g酸奶,碳水7g,蛋白质3g，脂肪4g
15-18g坚果,碳水3g,蛋白质3g，脂肪10g
15-18g蛋白粉,碳水1g,蛋白质14g，脂肪1g
</code></pre>
<h4 id="关于运动"><a href="#关于运动" class="headerlink" title="关于运动"></a>关于运动</h4><pre><code>每天运动跳绳30分钟心率维持在130-150，大约消耗300卡，脂肪供能约60%，糖供能约40%，消耗约20g脂肪
体重降低更多可能是水分咯
</code></pre>
<p>1千卡&#x2F;1大卡&#x2F;1卡路里（kcal）&#x3D; 4.184千焦（kJ）<br>所以我们在计算时，可以直接用2355 &#x2F; 4.18 &#x3D; 563大卡。</p>
<p>比如 酸奶的 100g 含 275 千焦，一袋是 150克<br>那么所含有的卡路里就是 </p>
<pre><code>275*(150/100)/4.18=98卡
</code></pre>
<p>10g 的 坚果：1954千焦每100g</p>
<pre><code>1954/10/4.18 = 48.85卡
</code></pre>
<p>20g蛋白粉 100克含有412卡</p>
<pre><code>412*(20g/100g)=84.6卡
</code></pre>
<p>酸奶+蛋白粉+坚果 ，大概是有  </p>
<pre><code>98+49+84.6 = 231 卡 
</code></pre>
<p>7.8g蛋白质<br>23.5g脂肪</p>
<p>120g酸奶,碳水7.1g,蛋白质3.48g，脂肪4.08g<br>10g坚果,碳水5.6g,蛋白质0.78g，脂肪2.35g<br>100蛋白粉碳水：g,蛋白质 g，脂肪 g</p>
<p>袁记水饺 一个 约22.7g</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>减肥</tag>
      </tags>
  </entry>
  <entry>
    <title>薄荷测的标准体重</title>
    <url>/2022/12/10/shenghuo/2022-nian-ji-lu/bo-he-ce-de-biao-zhun-ti-chong/</url>
    <content><![CDATA[<p>您的身体质量指数(BMI)为 22.5</p>
<p>成年人身体质量指数</p>
<pre><code>轻体重BMI	健康体重BMI	 超重BMI	肥胖BMI
BMI&lt;18.5	18.5≤BMI&lt;24	 24≤BMI&lt;28	28≤BMI
</code></pre>
<p>您的健康体重范围为 49~63 KG<br>您的年龄身高对应标准体重为 <strong>51 KG</strong> (1KG&#x3D;2斤)<br>您的基础代谢率为 1238 大卡</p>
<p>基础代谢率(BMR)：在安静状态下(通常为静卧状态)消耗的最低热量。</p>
<p>您的中低强度运动心率是 115 次&#x2F;分钟到 154 次&#x2F;分钟</p>
<p>人体要燃烧脂肪，需要满足三个必要条件：<br>该运动要达到中低强度的运动心率；<br>这种中低强度运动心率的运动要持续20分钟以上；<br>这种运动必须是大肌肉群的运动，如慢跑、游泳、健身操等。</p>
<p>低于或高于这个范围，都不算中低强度运动心率，燃烧的也就不是脂肪了~</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>减肥</tag>
      </tags>
  </entry>
  <entry>
    <title>20221012</title>
    <url>/2022/12/10/shenghuo/2022-nian-ji-lu/ji-jian/</url>
    <content><![CDATA[<p>极简 不是数量少，而是够用</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>润唇膏</title>
    <url>/2022/12/10/shenghuo/2022-nian-ji-lu/run-chun-gao/</url>
    <content><![CDATA[<h2 id="美乐家-水贝纳-水润，比迪奥的好用，可以去唇纹"><a href="#美乐家-水贝纳-水润，比迪奥的好用，可以去唇纹" class="headerlink" title="美乐家 水贝纳 水润，比迪奥的好用，可以去唇纹"></a>美乐家 水贝纳 水润，比迪奥的好用，可以去唇纹</h2><p>购买忍冬纯露 送了两管纯露，用着有点油</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>护肤</tag>
      </tags>
  </entry>
  <entry>
    <title>深圳放开</title>
    <url>/2022/12/10/shenghuo/2022-nian-ji-lu/shen-zhen-fang-kai/</url>
    <content><![CDATA[<h2 id="深圳放开"><a href="#深圳放开" class="headerlink" title="深圳放开"></a>深圳放开</h2><p>深圳放开 凭绿码通行<br>自从早晨知道这个消息就一直在看 新冠后遗症<br>然后 下午得知小区里的核酸检测点都撤销了，就觉得心里好慌<br>感觉好像病毒随时会出现在周围，不知道什么时候会被感染。</p>
<p>唉 看看过段时间怎么样吧 </p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>抗衰老</title>
    <url>/2022/12/10/shenghuo/2022-nian-ji-lu/kang-shuai-lao/</url>
    <content><![CDATA[<h2 id="如何抗衰老"><a href="#如何抗衰老" class="headerlink" title="如何抗衰老"></a>如何抗衰老</h2><p>抗衰老 衰老体现在两个方面：皮肤上皱纹、色斑；体脂率的上升</p>
<p>方法：</p>
<p>1.锻炼 </p>
<pre><code>增肌维持肌肉，降低体脂率，或者保持体脂率不变，体脂率上升就会显老，过了30-35岁，不特意锻炼的话，肌肉量会一直流失，老了就是少肌症。
</code></pre>
<p>2.补充蛋白 ，从而维持肌肉。</p>
<pre><code>蛋白质一天摄入量（g）=（身高-105）×（0.8~1.0）

吃优质蛋白 肉蛋奶，米面不算优质蛋白，是半完全蛋白
</code></pre>
<p>3.植物油吃多了 ，容易长色斑 紫外线照射 做防晒 少吃植物油 可以吃猪油</p>
<p>4.补充还原性物质 维生素A、维生素C、维生素D 、维生素E</p>
<p>5.维生素C帮助合成胶原蛋白</p>
<p>5.睡眠充足 早睡，睡到自然醒</p>
<p>6.心态好</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>衰老</tag>
      </tags>
  </entry>
  <entry>
    <title>最近心态很差-20221116</title>
    <url>/2022/12/10/shenghuo/2022-nian-ji-lu/zui-jin-xin-tai-hen-chai-20221116/</url>
    <content><![CDATA[<h2 id="20221116"><a href="#20221116" class="headerlink" title="20221116"></a>20221116</h2><h3 id="最近心态很差"><a href="#最近心态很差" class="headerlink" title="最近心态很差"></a>最近心态很差</h3><p>最近心态很差</p>
<p>有很强的挫败感，就像是快被深渊吸入，吞噬。</p>
<p>很疲惫，身心疲惫。</p>
<p>身体很累，很困。心情也很差。想逃离，但是不知道该去哪里。</p>
<p>很确认，身体、心态都出现了问题。哪哪都不对劲。</p>
<p>怎么办</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>同事的态度-20221011</title>
    <url>/2022/12/10/shenghuo/2022-nian-ji-lu/tong-shi-de-tai-du/</url>
    <content><![CDATA[<h2 id="20221011"><a href="#20221011" class="headerlink" title="20221011"></a>20221011</h2><h3 id="记录一下最近的思考"><a href="#记录一下最近的思考" class="headerlink" title="记录一下最近的思考"></a>记录一下最近的思考</h3><p>每次和前端对接的时候都很不愉快<br>然后我观察了一下，那人好像和谁说话态度都很不好</p>
<p>每次对接工作都搞的很压抑</p>
<p>不禁在思考，这人是一直是这样的工作态度吗？是平时对待家人，朋友也是这种态度还是仅仅在工作的时候才会这样？</p>
<p>那么，这样的态度对工作效率有提升吗。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>想买清单</title>
    <url>/2022/12/10/shenghuo/2022-nian-ji-lu/xiang-mai-qing-dan/</url>
    <content><![CDATA[<h2 id="想买一个新的表带"><a href="#想买一个新的表带" class="headerlink" title="想买一个新的表带"></a>想买一个新的表带</h2><p>给手表换了电池，新的屏幕。回来的时候戴上好像不喜欢那个表了。但我又感觉喜欢表，可能是表带旧了？磨损了？<br>    也可能是因为那句 “DW，狗都不戴”，<br>    花了好几本，买块几十块的表，好像戴上那块表，就在告诉自己和别人，我就是那个被消费主义洗脑成功的大傻子。<br>    可就是直接扔掉，又觉得可惜。</p>
<p>想换个新的表带，看看能不能重新喜欢起来。挑了好久了，<br>    钢带好像没好看的，不喜欢那种风格。橡胶的、尼龙的，感觉不成熟，跟玩具一样。<br>    皮带，感觉现在天天洗手，又会像之前的那个，有折痕，烂掉。<br>    纠结的很。</p>
<h2 id="想买一条瑜伽裤"><a href="#想买一条瑜伽裤" class="headerlink" title="想买一条瑜伽裤"></a>想买一条瑜伽裤</h2><p>想买原因：<br>    运动的时候冷，下周还会更冷，导致最近好几天都不想运动。<br>    也可能是有其他的原因不想运动，比如 摄入碳水过少？或者中午睡觉没有休息好，回家的时候状态不好，想睡觉。<br>    那么问题来了，如何保证午休时间的睡眠质量？<br>    早睡。不要趴在桌子上，或者拿个垫子撑一下。就听不到其他人敲键盘的声音了。</p>
<p>不想买原因：<br>    买了好像也穿不了几天了。三月份 就升温到 30 摄氏度了<br>    能穿 90 天左右。 3个月。 90 块钱买条裤子，穿三个月，可能还不到3个月。<br>    瑜伽裤，健身库，太难挑选了。质量参差不齐，怕花钱买到不值得的。</p>
<p>买好了，选了条50块的，不喜欢的话就退掉或者凑合用两个月。<br>    不能因为冷，就停止减肥！！！</p>
<p>不花钱就难受的我可咋整啊。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>常见的贴牌品牌</title>
    <url>/2022/12/10/shenghuo/2022-nian-ji-lu/chang-jian-de-tie-pai-pin-pai/</url>
    <content><![CDATA[<p>常见的贴牌品牌</p>
<pre><code>雅鹿
南极人
啄木鸟
罗蒙
同仁堂
北极绒
红豆
俞兆林
鸭鸭
修正
泰芝郎
荣事达
浪莎
富贵鸟
恒源祥
志高
七匹狼
花花公子
仁和
飞利浦
拉夏贝尔
</code></pre>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>穿衣</tag>
      </tags>
  </entry>
  <entry>
    <title>关于自己的物质世界-穿衣</title>
    <url>/2022/12/10/shenghuo/2022-nian-ji-lu/guan-yu-zi-ji-de-wu-zhi-shi-jie-chuan-yi/</url>
    <content><![CDATA[<h2 id="衣服"><a href="#衣服" class="headerlink" title="衣服"></a>衣服</h2><pre><code>夏天：吊带长裙，凉鞋

春秋：长袍，披肩，运动鞋，帆布鞋，一脚蹬

冬天：薄的高龄套头针织衫【不是毛衣】，+羽绒服+羽绒裤+雪地靴
</code></pre>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>穿衣</tag>
      </tags>
  </entry>
  <entry>
    <title>减肥</title>
    <url>/2022/12/10/shenghuo/2022-nian-ji-lu/jian-fei/</url>
    <content><![CDATA[<h2 id="每月减重多少是合适的？"><a href="#每月减重多少是合适的？" class="headerlink" title="每月减重多少是合适的？"></a>每月减重多少是合适的？</h2><p>每月减重 3-5% 是合适的</p>
<h2 id="可以饥饿减肥吗"><a href="#可以饥饿减肥吗" class="headerlink" title="可以饥饿减肥吗"></a>可以饥饿减肥吗</h2><p>饥饿减肥 72 小时内 消耗 约 70克蛋白，差不多300克肌肉</p>
<p>超过72小时后才会消耗脂肪</p>
<p>饥饿减肥消耗的肌肉是很难涨回来的，但是脂肪会涨回来的特别快</p>
<p>同时，如果恢复了以前的饮食，体重还会反弹，甚至更高</p>
<h2 id="可以吃碳水吗"><a href="#可以吃碳水吗" class="headerlink" title="可以吃碳水吗"></a>可以吃碳水吗</h2><p>可以吃，100克精米面 ，可以适量吃，不要超量</p>
<p>一天需要的碳水在 200克左右 ，所以每顿饭100克左右，差不多3个馒头<br>女生运动的少，可以吃更少一点 100-150g（生米）</p>
<p>有糖的存在，脂肪的代谢还是比较顺畅<br>没有糖，只能使用酮代谢脂肪，生酮副作用比较大 </p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>今天某人的胳膊被挠了</title>
    <url>/2022/12/10/shenghuo/2022-nian-ji-lu/jin-tian-mou-ren-de-ge-bo-bei-nao-liao/</url>
    <content><![CDATA[<h2 id="20221011"><a href="#20221011" class="headerlink" title="20221011"></a>20221011</h2><h3 id="今天某人的胳膊被挠了"><a href="#今天某人的胳膊被挠了" class="headerlink" title="今天某人的胳膊被挠了"></a>今天某人的胳膊被挠了</h3><p>胳膊被挠了，说是自己挠的，但是看着不像是自己挠的</p>
<p>如果是别人挠的，那这可不是个好苗头啊，要出轨啦</p>
<p>如果是自己挠的，这也太蠢了吧！无法想象</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>关于减肥运动时间计划</title>
    <url>/2022/12/10/shenghuo/2022-nian-ji-lu/guan-yu-jian-fei-yun-dong-shi-jian-ji-hua/</url>
    <content><![CDATA[<h2 id="减肥周期"><a href="#减肥周期" class="headerlink" title="减肥周期"></a>减肥周期</h2><p>可以每年拿出来两个月集中减肥，平时保持</p>
<pre><code>按照以我自身为例，每个月除了大姨妈期间每天运动1小时左右加控制饮食，可以瘦5斤左右
两个月就可以瘦10斤，这样算如果一年增加不到10斤的话，减肥会更轻松，每年有10斤左右可以兼容，也不会对自己太苛刻

减肥的月份选择，可以在3月4月进行减肥，正好过完年吃胖了减回去

那我现在是从 9月下旬128.3斤开始减，
元旦减到110，春节努努力到105，过年再胖五斤，到110，2月休息，3月4月再减掉10斤，到五月就可以到100斤

这样减肥的整个过程不会觉得很难坚持下来
</code></pre>
]]></content>
      <categories>
        <category>减肥</category>
      </categories>
      <tags>
        <tag>减肥</tag>
      </tags>
  </entry>
  <entry>
    <title>Clash for Android 使用教程</title>
    <url>/2022/12/10/shenghuo/2022-nian-ji-lu/clash/</url>
    <content><![CDATA[<p><a href="https://wikibos.com/index.php/kb/clash-for-android/">https://wikibos.com/index.php/kb/clash-for-android/</a><br>app 下载网站 :<a href="https://github.com/Kr328/ClashForAndroid">https://github.com/Kr328/ClashForAndroid</a></p>
]]></content>
      <categories>
        <category>Clash</category>
      </categories>
      <tags>
        <tag>Clash</tag>
      </tags>
  </entry>
  <entry>
    <title>tdee 热量计算</title>
    <url>/2022/12/10/shenghuo/2022-nian-ji-lu/tdee-re-liang-ji-suan/</url>
    <content><![CDATA[<p>计算网站 ：<a href="https://ifitness.tw/bmr-and-tdee/">https://ifitness.tw/bmr-and-tdee/</a></p>
<p>58kg：<br>你的基礎代謝率BMR 1291.5</p>
<p>你的TDEE：1549.8</p>
<p>58kg摄入 1100卡<br>50kg的时候摄入1000卡</p>
<p>&#x2F;&#x2F; 更新 56kg 对应  你的基礎代謝率BMR：1271.5 你的TDEE：1525.2 -300 卡 1200 平均摄入1050 吧 </p>
]]></content>
      <categories>
        <category>减肥</category>
      </categories>
      <tags>
        <tag>减肥</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 配置文件</title>
    <url>/2022/12/10/mysql/mysql-ru-men-pei-zhi-wen-jian/</url>
    <content><![CDATA[<p>mysql 为什么使用 B+ 树</p>
<h3 id="1-1-mysql-配置文件加载顺序"><a href="#1-1-mysql-配置文件加载顺序" class="headerlink" title="1. 1.mysql 配置文件加载顺序"></a>1. 1.mysql 配置文件加载顺序</h3><pre><code>/etc/my.cnf -&gt; /etc/mysql/my.cnf -&gt; /usr/local/mysql/etc/my.cnf -&gt; ~/.my.cnf -&gt; define
</code></pre>
<h3 id="2-mysql-体系结构"><a href="#2-mysql-体系结构" class="headerlink" title="2. mysql 体系结构"></a>2. mysql 体系结构</h3><h3 id="3-mysql-灵魂三问"><a href="#3-mysql-灵魂三问" class="headerlink" title="3. mysql 灵魂三问"></a>3. mysql 灵魂三问</h3><ol>
<li>为什么不支持全文索引</li>
<li>速度快是因为不支持事务吗</li>
<li>数据量大于1000万时性能会急剧下降吗</li>
</ol>
<h3 id="4-mysql-存储引擎"><a href="#4-mysql-存储引擎" class="headerlink" title="4. mysql 存储引擎"></a>4. mysql 存储引擎</h3><ol>
<li>innodb</li>
<li>myisam</li>
<li>…</li>
</ol>
<h3 id="5-mysql-主流连接方式"><a href="#5-mysql-主流连接方式" class="headerlink" title="5. mysql 主流连接方式"></a>5. mysql 主流连接方式</h3><ol>
<li>tcp&#x2F;ip方式</li>
<li>socket套接字方式</li>
</ol>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>2022减肥历程</title>
    <url>/2022/12/10/shenghuo/2022-nian-ji-lu/2022-jian-fei-li-cheng/</url>
    <content><![CDATA[<p>20220920 开始减肥</p>
<p>截至到 12月14 共减重 16.8斤。</p>
<p>11月17号开始轻断食 从 118.5 到 111.5 共 27 天 瘦了 7斤。<br>中间也包含了运动。每天运动一小时左右。</p>
<p>轻断食<br>早饭正常吃（一份300g左右的蛋肉肠粉），<br>午饭米饭减半（80-100g），菜去掉油水（菜+肉大概240g）。<br>晚饭 酸奶+蛋白粉+坚果+自制的肉肉零食 25g 左右，可以解馋。</p>
<p>总体 1100-1200大卡</p>
<p>最近体重不降低了。可能是平台期了。<br>已经把食物中的坚果去掉了，中午只吃一个菜。但是下午继续吃肉。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>减肥</tag>
      </tags>
  </entry>
  <entry>
    <title>go 构建简单的web</title>
    <url>/2022/12/10/golang/go-gou-jian-jian-dan-de-web/</url>
    <content><![CDATA[<p>golang</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">func <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/&quot;</span>, func(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">		w.Write([]byte(<span class="string">&quot;hello world&quot;</span>))</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/bbb&quot;</span>, func(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">		w.Write([]byte(<span class="string">&quot;hello world bbb&quot;</span>))</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	http.ListenAndServe(<span class="string">&quot;localhost:8080&quot;</span>, nil)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="localhost-8080"><a href="#localhost-8080" class="headerlink" title="localhost:8080"></a>localhost:8080</h3><h3 id="localhost-8080-x2F-bbb"><a href="#localhost-8080-x2F-bbb" class="headerlink" title="localhost:8080&#x2F;bbb"></a>localhost:8080&#x2F;bbb</h3><p>http.Handle 的使用 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span> helloHandler struct&#123;&#125;</span><br><span class="line"></span><br><span class="line">func (m *helloHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">	w.Write([]byte(<span class="string">&quot;hello world&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span> aboutHandler struct&#123;&#125;</span><br><span class="line"></span><br><span class="line">func (a *aboutHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">	w.Write([]byte(<span class="string">&quot;about&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func Welcome(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">	w.Write([]byte(<span class="string">&quot;Welcome&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">	mh := helloHandler&#123;&#125;</span><br><span class="line">	a := aboutHandler&#123;&#125;</span><br><span class="line"></span><br><span class="line">	server := http.Server&#123;</span><br><span class="line">		Addr:    <span class="string">&quot;localhost:8080&quot;</span>,</span><br><span class="line">		Handler: nil,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	http.Handle(<span class="string">&quot;/hello&quot;</span>, &amp;mh)</span><br><span class="line">	http.Handle(<span class="string">&quot;/about&quot;</span>, &amp;a)</span><br><span class="line"></span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/home&quot;</span>, func(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">		w.Write([]byte(<span class="string">&quot;home&quot;</span>))</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/welcome&quot;</span>, Welcome)</span><br><span class="line"></span><br><span class="line">	server.ListenAndServe()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="localhost-8080-1"><a href="#localhost-8080-1" class="headerlink" title="localhost:8080"></a>localhost:8080</h3><h3 id="localhost-8080-x2F-bbb-1"><a href="#localhost-8080-x2F-bbb-1" class="headerlink" title="localhost:8080&#x2F;bbb"></a>localhost:8080&#x2F;bbb</h3>]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go 通过http 发送 GET、POST 请求，并读取返回数据</title>
    <url>/2022/12/10/golang/go-tong-guo-http-fa-song-get-post-qing-qiu-bing-du-qu-fan-hui-shu-ju/</url>
    <content><![CDATA[<p>golang</p>
<h3 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;net/url&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span> Req struct &#123;</span><br><span class="line">	AdvertiserId uint64</span><br><span class="line">	Filtering    Filtering</span><br><span class="line">	Fields       []string</span><br><span class="line">	Page         string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span> Filtering struct &#123;</span><br><span class="line">	AdId uint64 `json:<span class="string">&quot;ad_id&quot;</span>`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span> Resp struct &#123;</span><br><span class="line">	Message   string `json:<span class="string">&quot;message&quot;</span>`</span><br><span class="line">	Code      int    `json:<span class="string">&quot;code&quot;</span>`</span><br><span class="line">	Data      string `json:<span class="string">&quot;data&quot;</span>`</span><br><span class="line">	RequestId string `json:<span class="string">&quot;request_id&quot;</span>`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">	request, err := http.NewRequest(http.MethodGet, <span class="string">&quot;baidu.com&quot;</span>, nil)</span><br><span class="line">	<span class="keyword">if</span> err != nil &#123;</span><br><span class="line">		<span class="built_in">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	request.Header.Set(<span class="string">&quot;Access-Token&quot;</span>, <span class="string">&quot;dcb85e80f6bb92f&quot;</span>)</span><br><span class="line">	query := make(url.Values)</span><br><span class="line"></span><br><span class="line">	query.Set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;16329224&quot;</span>)</span><br><span class="line"></span><br><span class="line">	//设置 filtering  json 参数</span><br><span class="line">	var req Req</span><br><span class="line">	req.Filtering.AdId = 1747537983277069</span><br><span class="line">	filteringJson, err := json.Marshal(req.Filtering)</span><br><span class="line">	<span class="keyword">if</span> err != nil &#123;</span><br><span class="line">		<span class="built_in">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	query.Set(<span class="string">&quot;filtering&quot;</span>, string(filteringJson))</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> req.Page != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		query.Set(<span class="string">&quot;page&quot;</span>, req.Page)</span><br><span class="line">	&#125;</span><br><span class="line">	query.Set(<span class="string">&quot;page_size&quot;</span>, <span class="string">&quot;100&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> len(req.Fields) &gt; 0 &#123;</span><br><span class="line">		fieldsJson, _ := json.Marshal(req.Fields)</span><br><span class="line">		query.Set(<span class="string">&quot;filtering&quot;</span>, string(fieldsJson))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	request.URL.RawQuery = query.Encode()</span><br><span class="line"></span><br><span class="line">	response, err := http.DefaultClient.Do(request)</span><br><span class="line">	<span class="keyword">if</span> err != nil &#123;</span><br><span class="line">		<span class="built_in">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	respJson, err := io.ReadAll(response.Body)</span><br><span class="line">	<span class="keyword">if</span> err != nil &#123;</span><br><span class="line">		<span class="built_in">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	var resp Resp</span><br><span class="line">	json.Unmarshal(respJson, &amp;resp)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;返回数据： %+v \n&quot;</span>, resp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	<span class="string">&quot;bytes&quot;</span></span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;errors&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span> Req struct &#123;</span><br><span class="line">	AdvertiserId uint64</span><br><span class="line">	Fields       []string</span><br><span class="line">	Page         string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span> Resp struct &#123;</span><br><span class="line">	Message   string `json:<span class="string">&quot;message&quot;</span>`</span><br><span class="line">	Code      int64  `json:<span class="string">&quot;code&quot;</span>`</span><br><span class="line">	Data      string `json:<span class="string">&quot;data&quot;</span>`</span><br><span class="line">	RequestId string `json:<span class="string">&quot;request_id&quot;</span>`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">	var req Req</span><br><span class="line">	reqByte, _ := json.Marshal(req)</span><br><span class="line">	request, err := http.NewRequest(http.MethodPost, <span class="string">&quot;baidu.com&quot;</span>, bytes.NewReader(reqByte))</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err != nil &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">	&#125;</span><br><span class="line">	request.Header.Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">	request.Header.Set(<span class="string">&quot;Access-Token&quot;</span>, <span class="string">&quot;dcb85e8b92f&quot;</span>)</span><br><span class="line">	response, err := http.DefaultClient.Do(request)</span><br><span class="line">	<span class="keyword">if</span> err != nil &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">	&#125;</span><br><span class="line">	respJson, err := io.ReadAll(response.Body)</span><br><span class="line">	<span class="keyword">if</span> err != nil &#123;</span><br><span class="line">		<span class="built_in">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	response.Body.Close()</span><br><span class="line">	var resp Resp</span><br><span class="line">	json.Unmarshal(respJson, &amp;resp)</span><br><span class="line">	<span class="keyword">if</span> resp.Code != 0 &#123;</span><br><span class="line">		err = errors.New(resp.Message)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>http</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>golang 常用标准库-time</title>
    <url>/2022/12/10/golang/go-chang-yong-biao-zhun-ku-02-time/</url>
    <content><![CDATA[<h2 id="golang-常用标准库-time"><a href="#golang-常用标准库-time" class="headerlink" title="golang 常用标准库 time"></a>golang 常用标准库 time</h2><h4 id="time-代表一个纳秒精度的时间点"><a href="#time-代表一个纳秒精度的时间点" class="headerlink" title="time 代表一个纳秒精度的时间点"></a>time 代表一个纳秒精度的时间点</h4>]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>time</tag>
      </tags>
  </entry>
  <entry>
    <title>go 协程 协程管理器sync chan</title>
    <url>/2022/12/10/golang/go-xie-cheng-xie-cheng-guan-li-qi-chan/</url>
    <content><![CDATA[<h2 id="golang-sync-WaitGroup-协程管理器-需要地址传参"><a href="#golang-sync-WaitGroup-协程管理器-需要地址传参" class="headerlink" title="golang sync.WaitGroup  协程管理器 需要地址传参"></a>golang sync.WaitGroup  协程管理器 需要地址传参</h2><p>有缓冲区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line">func <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">	// 有缓冲区</span><br><span class="line">	c1 := make(chan int, 1)</span><br><span class="line">	c1 &lt;- 100</span><br><span class="line">	fmt.Println(&lt;-c1)// 100</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>无缓冲区,会死锁 报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line">func <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">	// 无缓冲区</span><br><span class="line">	c1 := make(chan int)</span><br><span class="line">	c1 &lt;- 100</span><br><span class="line">	fmt.Println(&lt;-c1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// fatal error: all goroutines are asleep - deadlock!</span><br><span class="line">                                                  </span><br><span class="line">// goroutine 1 [chan send]:                          </span><br><span class="line">//  main.main()                                       </span><br><span class="line">//        D:/go_pro/go_test/main.go:35 +0x65        </span><br><span class="line">// <span class="built_in">exit</span> status 2      </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>无缓冲区异步执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line">func <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">	// 无缓冲区, + 协程执行</span><br><span class="line">	c1 := make(chan int)</span><br><span class="line">	go <span class="function"><span class="title">func</span></span>() &#123;</span><br><span class="line">		c1 &lt;- 100</span><br><span class="line">	&#125;()</span><br><span class="line">	fmt.Println(&lt;-c1) //100</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>参考视频: <a href="https://www.bilibili.com/video/BV1Vf4y1S75t?vd_source=08c7a48b57ad4d6c4aa2c17295004ee2">【golang教学】第十一章：golang的并发神器goroutine  和 channel （1010工作室出品）</a></p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go 协程 协程管理器sync chan</title>
    <url>/2022/12/10/golang/go-xie-cheng-xie-cheng-guan-li-qi-sync/</url>
    <content><![CDATA[<h2 id="golang-sync-WaitGroup-协程管理器-需要地址传参"><a href="#golang-sync-WaitGroup-协程管理器-需要地址传参" class="headerlink" title="golang sync.WaitGroup  协程管理器 需要地址传参"></a>golang sync.WaitGroup  协程管理器 需要地址传参</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line">func <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">	//go Run()</span><br><span class="line">	//time.Sleep(1 * time.Second)</span><br><span class="line">	//i := 0</span><br><span class="line">	//for i &lt; 10 &#123;</span><br><span class="line">	//	i++</span><br><span class="line">	//	fmt.Println(i)</span><br><span class="line">	//&#125;</span><br><span class="line"></span><br><span class="line">	// 协程管理器 需要地址传参</span><br><span class="line">	var wg sync.WaitGroup</span><br><span class="line">	wg.Add(1)</span><br><span class="line">	go Run(&amp;wg)</span><br><span class="line">	wg.Wait()</span><br><span class="line"></span><br><span class="line">	// chan 协程之间通讯的工具</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func Run(wg *sync.WaitGroup) &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;我跑起来了&quot;</span>)</span><br><span class="line">	wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>参考视频: <a href="https://www.bilibili.com/video/BV1Vf4y1S75t?vd_source=08c7a48b57ad4d6c4aa2c17295004ee2">【golang教学】第十一章：golang的并发神器goroutine  和 channel （1010工作室出品）</a></p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>golang 常用标准库-os</title>
    <url>/2022/12/10/golang/go-chang-yong-biao-zhun-ku-01-os/</url>
    <content><![CDATA[<h2 id="golang-常用标准库-os"><a href="#golang-常用标准库-os" class="headerlink" title="golang 常用标准库 os"></a>golang 常用标准库 os</h2><h4 id="os"><a href="#os" class="headerlink" title="os"></a>os</h4><ol>
<li>目录文件操作<ol>
<li>os.Create 创建文件</li>
<li>os.Mkdir 创建单个目录</li>
<li>os.MkdirAll 创建多级目录</li>
<li>os.Remove 删除单个文件或目录</li>
<li>os.RemoveAll 删除多个文件或多级目录</li>
<li>os.Gwtwd 获取当前的工作目录（绝对路径，实际使用比较多）</li>
<li>os.Chdir 修改当前工作目录</li>
<li>os.Tempdir 获取临时目录</li>
<li>os.Rename 重命名文件</li>
</ol>
</li>
<li>chmod-chown<ol>
<li>os.Chmod 修改文件权限</li>
<li>os.Chown 修改文件所有者</li>
</ol>
</li>
<li>文件读取<ol>
<li>os.Create 创建文件</li>
<li>os.Open 打开文件</li>
<li>os.OpenFile </li>
<li>os.Close 关闭文件</li>
<li>os.Stat 获取文件信息</li>
<li>os.Read 读取指定字节数的数据，遇到文件结尾时，返回EOF错误</li>
<li>os.ReadAt 从文件指定的位置开始读取</li>
<li>os.ReadDir 读取目录并返回排好序的文件以及子目录名切片</li>
<li>os.Seek 设置下一次读&#x2F;写的位置</li>
</ol>
</li>
<li>文件写<ol>
<li>os.Write 写入字节</li>
<li>os.WriteString  写入字符串</li>
<li>os.WriteAt 从某个位置开始写入</li>
</ol>
</li>
<li>进程相关<ol>
<li>os.Exit 让程序以给出的状态码推出</li>
<li>os.Getuid 获取调用者的用户id</li>
<li>os.Geteuid 获取调用者的有效用户id</li>
<li>os.Getgid 获取调用者的组id</li>
<li>os.GetGroups 获取调用者所在的所有组id</li>
<li>os.Getpid 获取调用者所在进程的进程id</li>
<li>os.Getppid 获取调用者所在进程的父进程的进程id</li>
<li>信号量</li>
</ol>
</li>
<li>环境相关<ol>
<li>os.Getenv 获取环境变量</li>
<li>os.Setenv 设置环境变量</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>os</tag>
      </tags>
  </entry>
  <entry>
    <title>golang 实现简单分片文件上传</title>
    <url>/2022/12/10/golang/go-gin-fen-pian-shang-chuan-wen-jian/</url>
    <content><![CDATA[<h2 id="golang-分片上传文件"><a href="#golang-分片上传文件" class="headerlink" title="golang 分片上传文件"></a>golang 分片上传文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">	r := gin.New()</span><br><span class="line">	r.Use(</span><br><span class="line">		func(c *gin.Context) &#123;</span><br><span class="line">			defer <span class="function"><span class="title">func</span></span>() &#123;</span><br><span class="line">				<span class="keyword">if</span> e := recover(); e != nil &#123;</span><br><span class="line">					c.AbortWithStatusJSON(400, gin.H&#123;<span class="string">&quot;err&quot;</span>: e&#125;)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;()</span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line">	r.GET(<span class="string">&quot;/&quot;</span>, func(c *gin.Context) &#123;</span><br><span class="line">		c.Writer.Header().Set(<span class="string">&quot;Transfer-Encoding&quot;</span>, <span class="string">&quot;chunked&quot;</span>)</span><br><span class="line">		//c.Writer.Header().Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;image/png&quot;</span>)</span><br><span class="line">		c.Writer.Header().Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;video/mp4&quot;</span>)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> i := 0; i &lt;= 5; i++ &#123;</span><br><span class="line">			//f, _ := os.Open(fmt.Sprintf(<span class="string">&quot;./file/img_%d.png&quot;</span>, i))</span><br><span class="line">			f, _ := os.Open(fmt.Sprintf(<span class="string">&quot;./file/img_%d.mp4&quot;</span>, i))</span><br><span class="line">			time.Sleep(time.Second)</span><br><span class="line">			b, _ := ioutil.ReadAll(f)</span><br><span class="line"></span><br><span class="line">			c.Writer.Write(b)</span><br><span class="line">			c.Writer.(http.Flusher).Flush()</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	r.POST(<span class="string">&quot;/file&quot;</span>, func(c *gin.Context) &#123;</span><br><span class="line">		file, <span class="built_in">head</span>, _ := c.Request.FormFile(<span class="string">&quot;file&quot;</span>)</span><br><span class="line">		block := head.Size / 5</span><br><span class="line">		index := 0</span><br><span class="line">		<span class="keyword">for</span> &#123;</span><br><span class="line">			buf := make([]byte, block)</span><br><span class="line">			n, err := file.Read(buf)</span><br><span class="line"></span><br><span class="line">			//fmt.Println(<span class="string">&quot;buf&quot;</span>, buf)</span><br><span class="line">			//fmt.Println(<span class="string">&quot;n&quot;</span>, n)</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> err != nil &amp;&amp; err != io.EOF &#123;</span><br><span class="line">				panic(err.Error())</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> n == 0 &#123;</span><br><span class="line">				<span class="built_in">break</span></span><br><span class="line">			&#125;</span><br><span class="line">			//time.Sleep(1 * time.Second)</span><br><span class="line">			//saveBlock(fmt.Sprintf(<span class="string">&quot;img_%d.png&quot;</span>, index), buf)</span><br><span class="line">			saveBlock(fmt.Sprintf(<span class="string">&quot;img_%d.mp4&quot;</span>, index), buf)</span><br><span class="line">			index++</span><br><span class="line">		&#125;</span><br><span class="line">		c.JSON(200, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;ok&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">	&#125;)</span><br><span class="line">	r.Run(<span class="string">&quot;:8888&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func saveBlock(name string, buf []byte) &#123;</span><br><span class="line">	save, _ := os.OpenFile(<span class="string">&quot;./file/&quot;</span>+name, os.O_CREATE|os.O_RDWR, 0600)</span><br><span class="line">	defer save.Close()</span><br><span class="line">	save.Write(buf)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>参考文章: <a href="https://www.bilibili.com/video/BV1Cy4y1b7Bi?vd_source=08c7a48b57ad4d6c4aa2c17295004ee2">公开课:Gin模拟实现大文件上传、分片存储和分块显示</a></p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>协程，线程，并发模型</title>
    <url>/2022/12/10/golang-xie-cheng/xian-cheng-bing-fa-mo-xing/</url>
    <content><![CDATA[<h3 id="1-并发并行的区别"><a href="#1-并发并行的区别" class="headerlink" title="1. 并发并行的区别"></a>1. 并发并行的区别</h3><h4 id="1-1-并行"><a href="#1-1-并行" class="headerlink" title="1.1. 并行"></a>1.1. 并行</h4><pre><code>多核cpu
要求cpu具备多核计算的能力
</code></pre>
<h4 id="1-2-并发"><a href="#1-2-并发" class="headerlink" title="1.2. 并发"></a>1.2. 并发</h4><pre><code>不要求多核cpu，不要求cpu具备多核计算的能力
</code></pre>
<h3 id="2-csp-并发模型"><a href="#2-csp-并发模型" class="headerlink" title="2. csp 并发模型"></a>2. csp 并发模型</h3><h4 id="2-1-通信顺序进程模型"><a href="#2-1-通信顺序进程模型" class="headerlink" title="2.1. 通信顺序进程模型"></a>2.1. 通信顺序进程模型</h4><h4 id="2-2-go语言中有两种并发模型"><a href="#2-2-go语言中有两种并发模型" class="headerlink" title="2.2. go语言中有两种并发模型"></a>2.2. go语言中有两种并发模型</h4><ol>
<li>线程与锁的并发模型</li>
<li>CSP同学顺序进程模型</li>
</ol>
<h3 id="3-内存分类-内核级空间-用户级空间"><a href="#3-内存分类-内核级空间-用户级空间" class="headerlink" title="3. 内存分类-内核级空间,用户级空间"></a>3. 内存分类-内核级空间,用户级空间</h3><h4 id="3-1-内核空间"><a href="#3-1-内核空间" class="headerlink" title="3.1. 内核空间"></a>3.1. 内核空间</h4><h4 id="3-2-用户空间"><a href="#3-2-用户空间" class="headerlink" title="3.2. 用户空间"></a>3.2. 用户空间</h4><h3 id="4-线程分类，线程是操作系统能够调度的最小单位"><a href="#4-线程分类，线程是操作系统能够调度的最小单位" class="headerlink" title="4. 线程分类，线程是操作系统能够调度的最小单位"></a>4. 线程分类，线程是操作系统能够调度的最小单位</h3><h4 id="4-1-用户线程（无法被cpu感知）"><a href="#4-1-用户线程（无法被cpu感知）" class="headerlink" title="4.1. 用户线程（无法被cpu感知）"></a>4.1. 用户线程（无法被cpu感知）</h4><p><strong>用户空间</strong>的代码创建，管理，销毁</p>
<h4 id="4-2-内核线程"><a href="#4-2-内核线程" class="headerlink" title="4.2. 内核线程"></a>4.2. 内核线程</h4><p>由<strong>操作系统</strong>创建，管理，调度</p>
<h3 id="5-线程模型"><a href="#5-线程模型" class="headerlink" title="5. 线程模型"></a>5. 线程模型</h3><h4 id="5-1-用户级线程模型"><a href="#5-1-用户级线程模型" class="headerlink" title="5.1. 用户级线程模型"></a>5.1. 用户级线程模型</h4><pre><code>一个进程（一个进程有多个线程）对应一个内核线程
优点：进程内的多线程管理由用户代码完成，所以这里的线程的创建，管理，同步等工作显得一场轻量级和高效
缺点： 
    1 进程内的多线程无法很好的利用CPU多核运算的优势，只能通过分时复用的方式轮换执行
    2 如果进程内有线程阻塞，很可能造成阻塞
</code></pre>
<p><img src="https://s3.uuu.ovh/imgs/2022/11/23/75168473cc0eb514.png"></p>
<h4 id="5-2-内核级线程模型"><a href="#5-2-内核级线程模型" class="headerlink" title="5.2. 内核级线程模型"></a>5.2. 内核级线程模型</h4><pre><code>进程中每个线程都会对应一个内核线程
优点： 
    多线程可以充分利用CPU的多核并行计算能力，
    进程内某个线程的堵塞并不会影响程序的运行
缺点：
    线程的管理和调度由操作系统负责，
    会导致每次线程切换上下文的时候从用户态到内核态，产生不小的资源消耗
    同时创建线程的梳理受限于可创建内核线程的数量
</code></pre>
<p><img src="https://s3.uuu.ovh/imgs/2022/11/23/b262f7b9593e3bd9.png"></p>
<h5 id="5-2-1-一个进程可以创建多少个线程？"><a href="#5-2-1-一个进程可以创建多少个线程？" class="headerlink" title="5.2.1. 一个进程可以创建多少个线程？"></a>5.2.1. 一个进程可以创建多少个线程？</h5><p><img src="https://s3.uuu.ovh/imgs/2022/11/23/61075f1b275ea374.png"></p>
<h4 id="5-3-两级线程模型"><a href="#5-3-两级线程模型" class="headerlink" title="5.3. 两级线程模型"></a>5.3. 两级线程模型</h4><pre><code>相当于用户及线程喝内核级线程的结合
一个进程会对应多个内核级线程，由 进程内的调度器 来觉得进程内线程与内核线程的对应
用户线程的调度与管理由用户空间的进程对应的调度去负责，而内核线程的调度由操作系统负责
优点：
    既能有效的降低线程创建对应资源的管理和消耗，又能够很好的提供线程并行计算的能力
</code></pre>
<p><img src="https://s3.uuu.ovh/imgs/2022/11/23/d1c5ff52cb5602f5.png"></p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang的MPG模型</title>
    <url>/2022/12/10/golang-xie-cheng/golang-de-mpg-mo-xing/</url>
    <content><![CDATA[<h3 id="1-mpg-模型"><a href="#1-mpg-模型" class="headerlink" title="1. mpg 模型"></a>1. mpg 模型</h3><h4 id="1-1-go-语言的-mpg-模型是一种特殊的两级线程模型，它将CPU，内核线程，用户线程之间的管理，描述为-M、P、G三者之间的关系"><a href="#1-1-go-语言的-mpg-模型是一种特殊的两级线程模型，它将CPU，内核线程，用户线程之间的管理，描述为-M、P、G三者之间的关系" class="headerlink" title="1.1. go 语言的 mpg 模型是一种特殊的两级线程模型，它将CPU，内核线程，用户线程之间的管理，描述为 M、P、G三者之间的关系"></a>1.1. go 语言的 mpg 模型是一种特殊的两级线程模型，它将CPU，内核线程，用户线程之间的管理，描述为 M、P、G三者之间的关系</h4><ol>
<li>M：machine（机器）。一个M对应一个内核级线程，相当于内核级线程在go中的映射</li>
<li>P：processor（处理器）。一个p代表执行go代码所需要的上下文环境</li>
<li>G：goroutine（协程）。是一个代码片段，相当于用户级线程</li>
<li>go func aaa(){} ,这里的aaa 相当于 一个用户级线程</li>
</ol>
<h6 id="1-1-1-goroutine和coroutine的区别"><a href="#1-1-1-goroutine和coroutine的区别" class="headerlink" title="1.1.1. goroutine和coroutine的区别"></a>1.1.1. goroutine和coroutine的区别</h6><pre><code>  goroutine 可能发生并行执行；
  但 coroutine 始终顺序执行。
  http://c.biancheng.net/view/96.html
</code></pre>
<p>MPG：<br>每个M都会与一个内核级线程绑定，在运行时，一个M同时只能绑定一个内核线程</p>
<p>…<br>琅琊百晓生</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>golang 简单rpc 调用</title>
    <url>/2022/12/10/golang-rpc/golang-rpc-jian-dan-diao-yong/</url>
    <content><![CDATA[<p>linux 常用操作和命令</p>
<h4 id="1-server-文件夹-main-go"><a href="#1-server-文件夹-main-go" class="headerlink" title="1. server 文件夹 main.go"></a>1. server 文件夹 main.go</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;net/rpc&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span> Server struct &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span> Req struct &#123;</span><br><span class="line">	NumOne int</span><br><span class="line">	NumTwo int</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">type</span> Res struct &#123;</span><br><span class="line">	Num int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (s *Server) Add(req Req, res *Res) error &#123;</span><br><span class="line">	time.Sleep(5 * time.Second)</span><br><span class="line">	res.Num = req.NumOne + req.NumTwo</span><br><span class="line"></span><br><span class="line">	<span class="built_in">return</span> nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">	rpc.Register(new(Server))</span><br><span class="line">	rpc.HandleHTTP()</span><br><span class="line">	l, e := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:8888&quot;</span>)</span><br><span class="line">	fmt.Println(l, e)</span><br><span class="line">	http.Serve(l, nil)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-client-文件夹-main-go"><a href="#2-client-文件夹-main-go" class="headerlink" title="2. client 文件夹 main.go"></a>2. client 文件夹 main.go</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/rpc&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span> Req struct &#123;</span><br><span class="line">	NumOne int</span><br><span class="line">	NumTwo int</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">type</span> Res struct &#123;</span><br><span class="line">	Num int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">	req := Req&#123;</span><br><span class="line">		NumOne: 10,</span><br><span class="line">		NumTwo: 20,</span><br><span class="line">	&#125;</span><br><span class="line">	var res Res</span><br><span class="line">	client, err := rpc.DialHTTP(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;localhost:8888&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != nil &#123;</span><br><span class="line">		log.Fatalln(<span class="string">&quot;dialing 失败:&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	//err2 := client.Call(<span class="string">&quot;Server.Add&quot;</span>, req, &amp;res)</span><br><span class="line">	ca := client.Go(<span class="string">&quot;Server.Add&quot;</span>, req, &amp;res, nil)</span><br><span class="line"></span><br><span class="line">	//call := &lt;-ca.Done</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		select &#123;</span><br><span class="line">		<span class="keyword">case</span> &lt;-ca.Done:</span><br><span class="line">			fmt.Println(res)</span><br><span class="line">			<span class="built_in">return</span></span><br><span class="line">		default:</span><br><span class="line">			time.Sleep(1 * time.Second)</span><br><span class="line">			fmt.Println(<span class="string">&quot;我在这里可以做好多事情，哈哈哈&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(req)</span><br><span class="line">	fmt.Println(&amp;res)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>先启动服务，再启动客户端请求</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>rpc</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 待梳理问题</title>
    <url>/2022/12/10/golang-high/golang-dai-shu-li-wen-ti/</url>
    <content><![CDATA[<h2 id="1-Golang-待梳理问题"><a href="#1-Golang-待梳理问题" class="headerlink" title="1. Golang 待梳理问题"></a>1. Golang 待梳理问题</h2><h3 id="1-1-Gin-如何让做参数校验？"><a href="#1-1-Gin-如何让做参数校验？" class="headerlink" title="1.1. Gin 如何让做参数校验？"></a>1.1. Gin 如何让做参数校验？</h3><h3 id="1-2-如何通过字符串调用函数？"><a href="#1-2-如何通过字符串调用函数？" class="headerlink" title="1.2. 如何通过字符串调用函数？"></a>1.2. 如何通过字符串调用函数？</h3><h3 id="1-3-go-的-chan-关闭后还可以发送数据吗-？"><a href="#1-3-go-的-chan-关闭后还可以发送数据吗-？" class="headerlink" title="1.3. go 的 chan 关闭后还可以发送数据吗 ？"></a>1.3. go 的 chan 关闭后还可以发送数据吗 ？</h3><h3 id="1-4-什么是内存逃逸？-什么时候会发生内存逃逸？"><a href="#1-4-什么是内存逃逸？-什么时候会发生内存逃逸？" class="headerlink" title="1.4. 什么是内存逃逸？ 什么时候会发生内存逃逸？"></a>1.4. 什么是内存逃逸？ 什么时候会发生内存逃逸？</h3><h3 id="1-5-new-和-make-的区别是什么"><a href="#1-5-new-和-make-的区别是什么" class="headerlink" title="1.5. new 和 make 的区别是什么"></a>1.5. new 和 make 的区别是什么</h3><p>相同点:<br>make和new都是golang用来分配内存的內建函数，且在堆上分配内存。<br>不同点：<br>make既分配内存，也初始化内存。<br>new只是将内存清零，并没有初始化内存。<br>make返回的还是引用类型本身；而new返回的是指向类型的指针。<br>make只能用来分配及初始化类型为slice，map，channel的数据；new可以分配任意类型的数据。</p>
<h3 id="1-6-结构体是传指针还是值-？"><a href="#1-6-结构体是传指针还是值-？" class="headerlink" title="1.6. 结构体是传指针还是值 ？"></a>1.6. 结构体是传指针还是值 ？</h3><h3 id="1-7-G一直占用资源，GMP怎么解决？"><a href="#1-7-G一直占用资源，GMP怎么解决？" class="headerlink" title="1.7. G一直占用资源，GMP怎么解决？"></a>1.7. G一直占用资源，GMP怎么解决？</h3><h3 id="1-8-GMP，G什么时候阻塞，G阻塞，调度器如何解决？G有集中状态？"><a href="#1-8-GMP，G什么时候阻塞，G阻塞，调度器如何解决？G有集中状态？" class="headerlink" title="1.8. GMP，G什么时候阻塞，G阻塞，调度器如何解决？G有集中状态？"></a>1.8. GMP，G什么时候阻塞，G阻塞，调度器如何解决？G有集中状态？</h3><h3 id="1-9-线程有几种状态？-自旋和非自旋"><a href="#1-9-线程有几种状态？-自旋和非自旋" class="headerlink" title="1.9. 线程有几种状态？ 自旋和非自旋"></a>1.9. 线程有几种状态？ 自旋和非自旋</h3><h3 id="1-10-Go的tag-原理-反射原理-？"><a href="#1-10-Go的tag-原理-反射原理-？" class="headerlink" title="1.10. Go的tag 原理? 反射原理 ？"></a>1.10. Go的tag 原理? 反射原理 ？</h3><h3 id="1-11-线程有多大？携程有多大-？-线程2M，协程2KB"><a href="#1-11-线程有多大？携程有多大-？-线程2M，协程2KB" class="headerlink" title="1.11. 线程有多大？携程有多大 ？ 线程2M，协程2KB"></a>1.11. 线程有多大？携程有多大 ？ 线程2M，协程2KB</h3><h3 id="1-12-一个线程发生OOM？"><a href="#1-12-一个线程发生OOM？" class="headerlink" title="1.12. 一个线程发生OOM？"></a>1.12. 一个线程发生OOM？</h3><h3 id="1-13-携程发生OOM？"><a href="#1-13-携程发生OOM？" class="headerlink" title="1.13. 携程发生OOM？"></a>1.13. 携程发生OOM？</h3><h3 id="1-14-错误处理如何解决-？是否统一处理-？"><a href="#1-14-错误处理如何解决-？是否统一处理-？" class="headerlink" title="1.14. 错误处理如何解决 ？是否统一处理 ？"></a>1.14. 错误处理如何解决 ？是否统一处理 ？</h3><h3 id="1-15-CPU多核如何保持不冲突-？"><a href="#1-15-CPU多核如何保持不冲突-？" class="headerlink" title="1.15. CPU多核如何保持不冲突 ？"></a>1.15. CPU多核如何保持不冲突 ？</h3><h3 id="1-16-Go的Mutex的-底层实现-？"><a href="#1-16-Go的Mutex的-底层实现-？" class="headerlink" title="1.16. Go的Mutex的 底层实现 ？"></a>1.16. Go的Mutex的 底层实现 ？</h3><h3 id="1-17-饥饿模式和正常模式的区别是什么-？"><a href="#1-17-饥饿模式和正常模式的区别是什么-？" class="headerlink" title="1.17. 饥饿模式和正常模式的区别是什么 ？"></a>1.17. 饥饿模式和正常模式的区别是什么 ？</h3><h3 id="1-18-多个G中一个G出错如何处理？"><a href="#1-18-多个G中一个G出错如何处理？" class="headerlink" title="1.18. 多个G中一个G出错如何处理？"></a>1.18. 多个G中一个G出错如何处理？</h3><h3 id="1-19-空-struct-的使用场景-？空结构体增加方法"><a href="#1-19-空-struct-的使用场景-？空结构体增加方法" class="headerlink" title="1.19. 空 struct 的使用场景 ？空结构体增加方法"></a>1.19. 空 struct 的使用场景 ？空结构体增加方法</h3><h3 id="1-20-字符串转字节数组是否发生内存拷贝？"><a href="#1-20-字符串转字节数组是否发生内存拷贝？" class="headerlink" title="1.20. 字符串转字节数组是否发生内存拷贝？"></a>1.20. 字符串转字节数组是否发生内存拷贝？</h3><h3 id="1-21-如何不发生内存拷贝？"><a href="#1-21-如何不发生内存拷贝？" class="headerlink" title="1.21. 如何不发生内存拷贝？"></a>1.21. 如何不发生内存拷贝？</h3><h3 id="1-22-如何高效的拼接字符串？"><a href="#1-22-如何高效的拼接字符串？" class="headerlink" title="1.22. 如何高效的拼接字符串？"></a>1.22. 如何高效的拼接字符串？</h3><p>strings.Join ≈ strings.Builder &gt; bytes.Buffer &gt; “+” &gt; fmt.Sprintf</p>
<h3 id="1-23-如何设计RPC框架-？"><a href="#1-23-如何设计RPC框架-？" class="headerlink" title="1.23. 如何设计RPC框架 ？"></a>1.23. 如何设计RPC框架 ？</h3><h3 id="1-24-TCP-粘包问题-？-包序列号-，长度？"><a href="#1-24-TCP-粘包问题-？-包序列号-，长度？" class="headerlink" title="1.24. TCP 粘包问题 ？ 包序列号 ，长度？"></a>1.24. TCP 粘包问题 ？ 包序列号 ，长度？</h3><h3 id="1-25-请你讲一下Go的面向对象是如何实现的？"><a href="#1-25-请你讲一下Go的面向对象是如何实现的？" class="headerlink" title="1.25. 请你讲一下Go的面向对象是如何实现的？"></a>1.25. 请你讲一下Go的面向对象是如何实现的？</h3><p>Go 实现面向对象的两个关键是 struct 喝interface<br>封装：对于同一个包，对象包内的文件可见，对不同的包，需要将对象以大写开头才是可见的。<br>继承：继承是编译时特征，在struct内假如所需要继承的类即可<br>多态：多态是运行时特征。Go多态通过interface 来实现。类型和接口是松耦合的，某个类型的实例可以赋给它所实现的任意接口类型的变量。<br>Go支持多重继承，就是在类型中嵌入所有毕业的父类型</p>
<h3 id="1-26-二维切片如何初始化"><a href="#1-26-二维切片如何初始化" class="headerlink" title="1.26. 二维切片如何初始化"></a>1.26. 二维切片如何初始化</h3><p>使用make 对二维切片进行初始化。<br>要使用二维切片保存数据时候还要对对应的一维切片进行初始化。</p>
<h3 id="1-27-uint-型变量-a-x3D-1，-b-x3D-2，-a-b-是多少-？"><a href="#1-27-uint-型变量-a-x3D-1，-b-x3D-2，-a-b-是多少-？" class="headerlink" title="1.27. uint 型变量 a &#x3D; 1， b &#x3D; 2， a-b 是多少 ？"></a>1.27. uint 型变量 a &#x3D; 1， b &#x3D; 2， a-b 是多少 ？</h3><p>结果会溢出，如果是32位系统，结果是2^32-1，如果是64位系统，结果2^64-1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">var a uint = 1</span><br><span class="line">var b uint = 2</span><br><span class="line"></span><br><span class="line">	fmt.Println(strconv.Itoa(math.MaxUint8))</span><br><span class="line">	fmt.Println(a - b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-28-1-27"><a href="#1-28-1-27" class="headerlink" title="1.28. 1.27."></a>1.28. 1.27.</h3><h3 id="1-29-1-28"><a href="#1-29-1-28" class="headerlink" title="1.29. 1.28."></a>1.29. 1.28.</h3><h3 id="1-30-1-29"><a href="#1-30-1-29" class="headerlink" title="1.30. 1.29."></a>1.30. 1.29.</h3><h3 id="1-31-1-30"><a href="#1-31-1-30" class="headerlink" title="1.31. 1.30."></a>1.31. 1.30.</h3><h3 id="1-32-1-31"><a href="#1-32-1-31" class="headerlink" title="1.32. 1.31."></a>1.32. 1.31.</h3><h3 id="1-33-1-32"><a href="#1-33-1-32" class="headerlink" title="1.33. 1.32."></a>1.33. 1.32.</h3><h3 id="1-34-1-33"><a href="#1-34-1-33" class="headerlink" title="1.34. 1.33."></a>1.34. 1.33.</h3><h3 id="1-35-1-34"><a href="#1-35-1-34" class="headerlink" title="1.35. 1.34."></a>1.35. 1.34.</h3><h3 id="1-36-1-35"><a href="#1-36-1-35" class="headerlink" title="1.36. 1.35."></a>1.36. 1.35.</h3><h3 id="1-37-1-36"><a href="#1-37-1-36" class="headerlink" title="1.37. 1.36."></a>1.37. 1.36.</h3><h3 id="1-38"><a href="#1-38" class="headerlink" title="1.38."></a>1.38.</h3>]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>GMP 的设计策略</title>
    <url>/2022/12/10/golang-high/gmp-de-she-ji-ce-lue/</url>
    <content><![CDATA[<h2 id="1-GMP-的设计策略"><a href="#1-GMP-的设计策略" class="headerlink" title="1. GMP 的设计策略"></a>1. GMP 的设计策略</h2><h3 id="1-1-复用线程"><a href="#1-1-复用线程" class="headerlink" title="1.1. 复用线程"></a>1.1. 复用线程</h3><pre><code>偷取G
handle off
</code></pre>
<h3 id="1-2-抢占"><a href="#1-2-抢占" class="headerlink" title="1.2. 抢占"></a>1.2. 抢占</h3><pre><code>每个G只执行10ms，到期会被抢走P
</code></pre>
<h3 id="1-3-全局队列"><a href="#1-3-全局队列" class="headerlink" title="1.3. 全局队列"></a>1.3. 全局队列</h3><pre><code>M 没有 G 的时候从全局队列取G
</code></pre>
<h3 id="1-4-利用并行"><a href="#1-4-利用并行" class="headerlink" title="1.4. 利用并行"></a>1.4. 利用并行</h3><pre><code>MaxProcess P = cpu/2
</code></pre>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串在内存里怎么存</title>
    <url>/2022/12/10/golang-2022/zi-fu-chuan-zai-nei-cun-li-zen-me-cun/</url>
    <content><![CDATA[<p>bit 只能表示 0 或者 1<br>8bit 就是可以表示 00000000 - 11111111 即 0-255<br>16bit 就是可以表示 0000000000000000 - 1111111111111111 即 0-65535</p>
<p>bit 转 bytes 需要除以 8<br>8 bit &#x3D; 1 byte </p>
<p>所以 1 byte 即 1 个字节可以表示 256个数字（加上 0 值）<br>     2 byte 即 2 个字节可以表示 65536个数字（加上 0 值）</p>
<p>那么 字母可以用编号存<br>如 A &#x3D;》 65 &#x3D;》0100 0001</p>
<p>go 语言中，认为字符串是不会被修改的，所以字符串是存在只读内存段。<br>字符串变量是可以共用底层字符串内容的。被另一个变量修改了，另外一个也会被修改。</p>
<p>如果非要修改，可以直接给变量赋值新值，这样这个变量存储的地址就会指向新的内容。</p>
<p>也可以把变量强制修改成字节slice切片，这样会为切片重新分配一段内存，并且拷贝原来字符串的内容。</p>
]]></content>
      <categories>
        <category>内存</category>
      </categories>
      <tags>
        <tag>内存</tag>
      </tags>
  </entry>
  <entry>
    <title>http为什么要三次握手，为什么四次挥手</title>
    <url>/2022/12/10/golang-2022/http-wei-shi-me-yao-san-ci-wo-shou-wei-shi-me-si-ci-hui-shou/</url>
    <content><![CDATA[<h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
      <categories>
        <category>http</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>tcp和udp的区别</title>
    <url>/2022/12/10/golang-2022/tcp-he-udp-de-qu-bie/</url>
    <content><![CDATA[<h3 id="tcp和udp的区别"><a href="#tcp和udp的区别" class="headerlink" title="tcp和udp的区别"></a>tcp和udp的区别</h3><h3 id="什么时候用tcp，什么时候用udp"><a href="#什么时候用tcp，什么时候用udp" class="headerlink" title="什么时候用tcp，什么时候用udp"></a>什么时候用tcp，什么时候用udp</h3><h3 id="udp消息丢了怎么样？"><a href="#udp消息丢了怎么样？" class="headerlink" title="udp消息丢了怎么样？"></a>udp消息丢了怎么样？</h3><h3 id="什么是滑动窗口，为什么要采用滑动窗口，什么时候使用滑动窗口？"><a href="#什么是滑动窗口，为什么要采用滑动窗口，什么时候使用滑动窗口？" class="headerlink" title="什么是滑动窗口，为什么要采用滑动窗口，什么时候使用滑动窗口？"></a>什么是滑动窗口，为什么要采用滑动窗口，什么时候使用滑动窗口？</h3>]]></content>
      <categories>
        <category>http</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>golang的内存分配机制是怎样的</title>
    <url>/2022/12/10/golang-2022/golang-de-nei-cun-fen-pei-ji-zhi-shi-zen-yang-de/</url>
    <content><![CDATA[<h3 id="关于内存分配可以好好聊聊GMP模型，这才是重点"><a href="#关于内存分配可以好好聊聊GMP模型，这才是重点" class="headerlink" title="关于内存分配可以好好聊聊GMP模型，这才是重点"></a>关于内存分配可以好好聊聊GMP模型，这才是重点</h3>]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>golang GMP goroutinue 的执行过程</title>
    <url>/2022/12/10/golang-2022/golang-gmp-goroutinue-de-zhi-xing-guo-cheng/</url>
    <content><![CDATA[<h3 id="golang-GMP-goroutinue-的执行过程"><a href="#golang-GMP-goroutinue-的执行过程" class="headerlink" title="golang GMP goroutinue 的执行过程"></a>golang GMP goroutinue 的执行过程</h3><p>go 语言中 协程对应的数据结构是 runtime.g<br>         工作线程对应的数据结构是 runtime.m<br>         逻辑处理器P，对应的数据结构是 runtime.p<br>         全局变量 sched 对应的就是调度器，对应的数据结构是 runtime.schedt,记录了很多的调度相关的信息。包括全局的runq</p>
<p>全局变量G0 就是主协程对应的G </p>
<p>M 执行 队列的顺序<br>先从本地队列 也就是P 上去获取 G 执行完本地队列就会去全局队列，全局队列也没有了就会去其他的M 上偷取G</p>
<p>自己的理解：<br>把程序的运行比作产科，<br>G：协程， 就相当于嗷嗷待补的娃娃，饿了拉了，冷了，热了 就是需要人去照顾，去处理<br>M：线程，就相当于护士，去满足这些孩子的需求，给他们洗澡换衣服。满足他们的需求。<br>P：处理器，就相当于护士长。记录哪个孩子需要啥，并且去分配给护士去处理，护士不够了就会“创建”更多的护士来处理、满足这些娃娃的需求。</p>
<p>如果使用 time.sleep() 方式，实际上会调用 gopark 函数,把当前协程的状态从”_Gruning” 修改为 “_Gwaiting”</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>RAM内存条是怎么存数据的</title>
    <url>/2022/12/10/golang-2022/ram-nei-cun-tiao-shi-zen-me-cun-shu-ju-de/</url>
    <content><![CDATA[<p>###内存条是怎么存存储数据的？</p>
<p>图解文章 ：<a href="https://blog.csdn.net/zyhse/article/details/120771121">https://blog.csdn.net/zyhse/article/details/120771121</a></p>
<p>个人理解：</p>
<p>每个内存条的一面是一个rank ，有的双面内存条就是两个rank。<br>每个面上有8个小黑块，哪个小黑块就是 一个chip，<br>每个小黑块有8个bank，8层bank 叠加在一起，组成一个小黑块&#x3D;》chip</p>
<p>每个bank呢，就有对应的行和列存储对应的数据。<br>每个bank 有16384行，1024列，每个格子可以保存8个bit，也就是1个字节(byte)的数据。<br>每个bank存储的数据 16384<em>1024</em>8 &#x3D; 134217728 bit &#x3D;  16777216 bytes &#x3D; 16384 kb &#x3D; 16 MB &#x3D; 0.015625 G</p>
<p>bit 只能表示 0 或者 1<br>8bit 就是可以表示 00000000 - 11111111 即 0-255<br>16bit 就是可以表示 0000000000000000 - 1111111111111111 即 0-65535</p>
<p>bit 转 bytes 需要除以 8<br>8 bit &#x3D; 1 byte </p>
<p>所以 1 byte 即 1 个字节可以表示 256个数字（加上 0 值）<br>     2 byte 即 2 个字节可以表示 65536个数字（加上 0 值）</p>
<p>一个小黑块有8个bank 就是 16<em>8 &#x3D; 128 MB<br>一块内存条有8个小黑块 就是 128</em>8 &#x3D; 1024 MB &#x3D; 1G</p>
<p>golang 中 int64 占用 8个字节 ，也就是8个格子，也就是bank 上面 一行8列，横着连续8个格子</p>
<p>int16  占用 2  字节 2  个横着连续格子<br>int32  占用 4  字节 4  个横着连续格子<br>int64  占用 8  字节 8  个横着连续格子<br>string 占用 16 字节 16 个横着连续格子</p>
<p>每种数据的对齐值，就是她的对其边界。<br>内存对齐要求 数据存储地址，以及占用的字节数都要是它对其边界的倍数<br>内存对其是为了减少浪费</p>
<p>go 结构体是如何内存对齐的？<br>    go 的结构体取结构中各成员的对齐值最大的数据</p>
<p>如 type Test struct {<br>    a int8      1byte<br>    b int64     8byte<br>    c int32     4byte<br>    d int16     2byte<br>}</p>
<p>则这个结构体的内存对其值 为 8 byte<br>结构体整体对其的数据需要是内存对其的倍数 ，所以上述 结构体的占用字节是 24</p>
]]></content>
      <categories>
        <category>内存</category>
      </categories>
      <tags>
        <tag>内存</tag>
      </tags>
  </entry>
  <entry>
    <title>维生素</title>
    <url>/2022/10/16/shenghuo/wei-sheng-su/</url>
    <content><![CDATA[<h2 id="维生素A"><a href="#维生素A" class="headerlink" title="维生素A"></a>维生素A</h2><pre><code>来源：动物肝脏，深色水果，类胡萝卜素转化成维生素A（转化效率不高）
缺乏表现：严重缺乏的话会得夜盲症，轻度缺乏有干眼症、皮肤粗糙、皮肤干燥
</code></pre>
<h2 id="维生素B"><a href="#维生素B" class="headerlink" title="维生素B"></a>维生素B</h2><h2 id="维生素C"><a href="#维生素C" class="headerlink" title="维生素C"></a>维生素C</h2>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>git 撤销 add commit</title>
    <url>/2022/10/13/util/git-che-xiao-add-commit/</url>
    <content><![CDATA[<h2 id="git-撤销-add-commit"><a href="#git-撤销-add-commit" class="headerlink" title="git 撤销 add commit"></a>git 撤销 add commit</h2><h3 id="git-撤销-add"><a href="#git-撤销-add" class="headerlink" title="git 撤销 add"></a>git 撤销 add</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset HEAD .</span><br></pre></td></tr></table></figure>

<h3 id="git-撤销-commit"><a href="#git-撤销-commit" class="headerlink" title="git 撤销 commit"></a>git 撤销 commit</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --soft HEAD^</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 常用操作和命令</title>
    <url>/2022/10/05/linux/linux-chang-yong-cao-zuo-he-ming-ling/</url>
    <content><![CDATA[<p>linux 常用操作和命令</p>
<h4 id="1-后台执行脚本-a-sh"><a href="#1-后台执行脚本-a-sh" class="headerlink" title="1. 后台执行脚本 a.sh"></a>1. 后台执行脚本 a.sh</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nohup</span> sh a.sh &amp;</span><br></pre></td></tr></table></figure>

<h4 id="2-查找-a-sh-的进程"><a href="#2-查找-a-sh-的进程" class="headerlink" title="2. 查找 a.sh 的进程"></a>2. 查找 a.sh 的进程</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -aux|grep a.sh </span><br></pre></td></tr></table></figure>
<h4 id="3-杀掉进程"><a href="#3-杀掉进程" class="headerlink" title="3. 杀掉进程"></a>3. 杀掉进程</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 1211  </span><br><span class="line"><span class="string">&quot;kill 杀死进程&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="4-ps：process-status，列出系统中的进程，非动态，需要动态显示的话可以使用-top-命令"><a href="#4-ps：process-status，列出系统中的进程，非动态，需要动态显示的话可以使用-top-命令" class="headerlink" title="4. ps：process status，列出系统中的进程，非动态，需要动态显示的话可以使用 top 命令"></a>4. ps：process status，列出系统中的进程，非动态，需要动态显示的话可以使用 top 命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -A       <span class="comment">#显示所有的进程信息</span></span><br><span class="line">ps -U root  <span class="comment">#显示指定用户信息 </span></span><br><span class="line">ps -ef      <span class="comment">#显示所有进程信息连同命令行</span></span><br><span class="line">ps -l       <span class="comment">#查找登陆这相关的pid 相关信息</span></span><br><span class="line">ps -aux     <span class="comment">#列出所有在内存中的程序</span></span><br><span class="line">ps -axjf    <span class="comment">#进程树方式显示</span></span><br><span class="line">ps -ef|grep php       <span class="comment">#查找特定进程</span></span><br><span class="line">ps -aux|grep <span class="string">&#x27;aa.txt&#x27;</span> <span class="comment">#找出aa.txt 服务信息 pid 号码 </span></span><br></pre></td></tr></table></figure>
<h4 id="5-文件相关"><a href="#5-文件相关" class="headerlink" title="5. 文件相关"></a>5. 文件相关</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p aa <span class="comment">#不存在则创建文件夹</span></span><br><span class="line"><span class="built_in">touch</span> aa.log   <span class="comment">#存在则修改文件创建和修改的时间，不存在则创建对应文件</span></span><br><span class="line"><span class="built_in">cp</span> /home/wwwroot/a.txt /home/wwwlogs/a.txt  <span class="comment">#将 /home/wwwroot/a.txt 拷贝到  /home/wwwlogs/a.txt 中</span></span><br><span class="line"><span class="string">&quot;cp 源文件 目的文件&quot;</span></span><br><span class="line"><span class="built_in">cat</span> aa.log <span class="comment">#查看aa.log 文件内容</span></span><br></pre></td></tr></table></figure>

<h3 id="vim-操作"><a href="#vim-操作" class="headerlink" title="vim 操作"></a>vim 操作</h3><h4 id="6-hjkl-操作对应的方向"><a href="#6-hjkl-操作对应的方向" class="headerlink" title="6. hjkl 操作对应的方向"></a>6. hjkl 操作对应的方向</h4><pre><code>    ^
    |
&lt;-hjkl-&gt;
   |
   V
</code></pre>
<h4 id="7-模式切换"><a href="#7-模式切换" class="headerlink" title="7. 模式切换"></a>7. 模式切换</h4><pre><code>                 i,a              :/     
        编辑模式 《====》 正常模式 《====》 命令模式
    (无法使用快捷键)    （使用快捷键）     （：wq 保存退出）
                                          ：q 退出
                                          ：q！不保存退出
                                          ：w 保存
</code></pre>
<h4 id="8-正常模式使用快捷键操作："><a href="#8-正常模式使用快捷键操作：" class="headerlink" title="8. 正常模式使用快捷键操作："></a>8. 正常模式使用快捷键操作：</h4><pre><code>yy 复制当前行，5yy 复制当前光标下的5行
p 拷贝当前复制，
dd 删除当前行，5dd 删除当前光标下的5行
:set nu  显示行号
:set nonu 不显示行号
G 跳转到末行
gg 跳转到首行
/xx 回车 查找xx
n: 查找下一个
Shift + g :200 跳转到第200行 
</code></pre>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>死信队列</title>
    <url>/2022/10/05/mq/si-xin-dui-lie/</url>
    <content><![CDATA[<h3 id="1-特点"><a href="#1-特点" class="headerlink" title="1. 特点"></a>1. 特点</h3><pre><code>死信队列（Dead-Letter-Queue，DLQ）用于处理无法被正常消费的消息。
达到最大重试次数后，若消费依然失败，则表明消费者在正常情况下无法正确地消费该消息，
此时CMQ 不会立刻将消息丢弃，而是将其发送到该消费者对应的特殊队列中，这个特殊队列就是DLQ。
</code></pre>
<h3 id="2-常见用途"><a href="#2-常见用途" class="headerlink" title="2. 常见用途"></a>2. 常见用途</h3><pre><code>发送消息十分钟后发送给用户
未支付订单取消订单
下单后收到支付系统消息
规定每天固定发送消息
</code></pre>
]]></content>
      <categories>
        <category>mq</category>
      </categories>
      <tags>
        <tag>mq</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 为什么使用 B+ 树</title>
    <url>/2022/10/03/mysql/mysql-wei-shi-me-shi-yong-b-shu/</url>
    <content><![CDATA[<p>mysql 为什么使用 B+ 树</p>
<h3 id="1-B-树的特点"><a href="#1-B-树的特点" class="headerlink" title="1. B 树的特点"></a>1. B 树的特点</h3><pre><code>节点排序
一个节点可以存多个元素，元素也排序了 
</code></pre>
<h3 id="2-B-树的特点"><a href="#2-B-树的特点" class="headerlink" title="2. B+ 树的特点"></a>2. B+ 树的特点</h3><pre><code>拥有B树的特点
叶子节点之间有指针（底层-&gt; 叶子）
非叶子节点（树枝）在叶子节点都冗余了，即叶子节点存储了所有的数据，并且排好序
</code></pre>
<h3 id="3-mysql-使用-B-树的原因是："><a href="#3-mysql-使用-B-树的原因是：" class="headerlink" title="3. mysql 使用 B+ 树的原因是："></a>3. mysql 使用 B+ 树的原因是：</h3><pre><code>索引是用来查询的
而B+树是通过对数据进行排序来提升查询速度的
B+树中一个InnoDb页就是一个B+树节点，一个InnoDb默认是16KB，
所以若一条数据1KB，而两层的B+树可以村2000万行数据，可以友好的全表扫描范围内查找sql语句。
所以两千万条数据以上的表需要做分库分表，无法通过索引优化
</code></pre>
<h3 id="4-叶子节点村的是主键索引还是普通索引？"><a href="#4-叶子节点村的是主键索引还是普通索引？" class="headerlink" title="4. 叶子节点村的是主键索引还是普通索引？"></a>4. 叶子节点村的是主键索引还是普通索引？</h3><pre><code>叶子节点存的是主键索引。
如果是联合索引，则之间存主键索引的位置，通过主键索引再查到对应的数据
查询过程是回表操作，索引会慢
</code></pre>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>索引</tag>
      </tags>
  </entry>
  <entry>
    <title>redis 使用场景</title>
    <url>/2022/10/03/redis/redis-shi-yong-chang-jing/</url>
    <content><![CDATA[<h2 id="1-string"><a href="#1-string" class="headerlink" title="1. string"></a>1. string</h2><h3 id="1-1-记录短信验证码到redis，并给失效时间"><a href="#1-1-记录短信验证码到redis，并给失效时间" class="headerlink" title="1.1. 记录短信验证码到redis，并给失效时间"></a>1.1. 记录短信验证码到redis，并给失效时间</h3><h3 id="1-2-记录用户-token，判断是否合法登录，"><a href="#1-2-记录用户-token，判断是否合法登录，" class="headerlink" title="1.2. 记录用户 token，判断是否合法登录，"></a>1.2. 记录用户 token，判断是否合法登录，</h3><h3 id="1-3-商品计数器"><a href="#1-3-商品计数器" class="headerlink" title="1.3. 商品计数器"></a>1.3. 商品计数器</h3><h2 id="2-hash"><a href="#2-hash" class="headerlink" title="2. hash"></a>2. hash</h2><h3 id="2-1-购物车-hset-hget"><a href="#2-1-购物车-hset-hget" class="headerlink" title="2.1. 购物车 hset hget"></a>2.1. 购物车 hset hget</h3>]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis 使用场景</title>
    <url>/2022/10/03/redis/redis-yu-shu-ju-ku-huan-cun-yi-zhi-xing-wen-ti/</url>
    <content><![CDATA[<h2 id="1-redis-与数据库缓存一致性问题"><a href="#1-redis-与数据库缓存一致性问题" class="headerlink" title="1. redis 与数据库缓存一致性问题"></a>1. redis 与数据库缓存一致性问题</h2><h3 id="1-1-延时双删"><a href="#1-1-延时双删" class="headerlink" title="1.1. 延时双删"></a>1.1. 延时双删</h3><h3 id="1-2-先写库，再删除缓存"><a href="#1-2-先写库，再删除缓存" class="headerlink" title="1.2. 先写库，再删除缓存"></a>1.2. 先写库，再删除缓存</h3><pre><code>引入MQ
    MQ mysql，失败可重试
    MQ 更新 redis
闹正原子操作
</code></pre>
<h3 id="1-3-热点数据永不过期，保证若一致性"><a href="#1-3-热点数据永不过期，保证若一致性" class="headerlink" title="1.3. 热点数据永不过期，保证若一致性"></a>1.3. 热点数据永不过期，保证若一致性</h3>]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>string</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 常用操作</title>
    <url>/2022/10/03/docker/docker-chang-yong-cao-zuo/</url>
    <content><![CDATA[<h3 id="1-docker-命令"><a href="#1-docker-命令" class="headerlink" title="1. docker 命令"></a>1. docker 命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start 容器名/id     <span class="comment">#开始运行容器</span></span><br><span class="line">docker stop 容器名/id      <span class="comment">#停止运行容器</span></span><br><span class="line">docker ps       <span class="comment">#列出正在运行的容器</span></span><br><span class="line">docker run      <span class="comment">#构建容器</span></span><br><span class="line">docker build    <span class="comment">#创建镜像</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>beego 常用操作</title>
    <url>/2022/10/03/golang/beego-chang-yong-cao-zuo/</url>
    <content><![CDATA[<h3 id="1-bee-命令"><a href="#1-bee-命令" class="headerlink" title="1. bee 命令"></a>1. bee 命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bee new xxx <span class="comment"># 创建一个新项目</span></span><br><span class="line">bee api xxx <span class="comment"># 创建一个api项目</span></span><br><span class="line">bee run <span class="comment"># 运行 beego 项目</span></span><br><span class="line">bee pack <span class="comment"># 上线时用来打包beego文件的，打包完成的文件在bin文件中</span></span><br></pre></td></tr></table></figure>

<h3 id="2-beego-过滤器"><a href="#2-beego-过滤器" class="headerlink" title="2. beego 过滤器"></a>2. beego 过滤器</h3><pre><code>安全验证，如IP屏蔽，token 验证，访问地址屏蔽
</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ne 不等于</span><br><span class="line">lt 小于</span><br><span class="line">gt 大于</span><br><span class="line">le 小于等于</span><br><span class="line">ge 大于等于</span><br></pre></td></tr></table></figure>

<h3 id="3-beego-通过orm-操作数据库"><a href="#3-beego-通过orm-操作数据库" class="headerlink" title="3. beego 通过orm 操作数据库"></a>3. beego 通过orm 操作数据库</h3><pre><code>在关系型数据库和对象之间做一个映射
在操作数据库时，不需要写复杂的sql语句，只需要操作对象即可对对应的数据进行操作
</code></pre>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>beego</tag>
      </tags>
  </entry>
  <entry>
    <title>go init 函数</title>
    <url>/2022/10/03/golang/go-init-han-shu/</url>
    <content><![CDATA[<h3 id="1-特点"><a href="#1-特点" class="headerlink" title="1. 特点"></a>1. 特点</h3><pre><code>先于main函数执行，实现包级别的一些初始化操作
每个包可以包含多个 init 函数
所有编译器发现的函数都会被安排在main函数之前执行
init 函数没有输入参数，返回值会且仅会导入一次
</code></pre>
<h3 id="2-主要作用"><a href="#2-主要作用" class="headerlink" title="2. 主要作用"></a>2. 主要作用</h3><pre><code>初始化不能采用初始化表达式初始化的变量
程序运行前的注册
实现 sync.Once 功能
</code></pre>
<h3 id="3-init-执行顺序"><a href="#3-init-执行顺序" class="headerlink" title="3. init 执行顺序"></a>3. init 执行顺序</h3><pre><code>单个包中init执行顺序 初始化变量 &gt; init 函数 &gt; main 函数
单个包中多个init 执行是顺序的
相互以来的包之间的init 函数，按照递归的顺序执行
</code></pre>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 待梳理问题</title>
    <url>/2022/10/03/mysql/mysql-dai-shu-li-wen-ti/</url>
    <content><![CDATA[<h2 id="1-Mysql-待梳理问题"><a href="#1-Mysql-待梳理问题" class="headerlink" title="1. Mysql 待梳理问题"></a>1. Mysql 待梳理问题</h2><h3 id="1-1-mysql-如何进行分库分表"><a href="#1-1-mysql-如何进行分库分表" class="headerlink" title="1.1. mysql 如何进行分库分表"></a>1.1. mysql 如何进行分库分表</h3>]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 待梳理问题</title>
    <url>/2022/10/03/redis/redis-dai-shu-li-wen-ti/</url>
    <content><![CDATA[<h2 id="1-Redis-待梳理问题"><a href="#1-Redis-待梳理问题" class="headerlink" title="1. Redis 待梳理问题"></a>1. Redis 待梳理问题</h2><h3 id="1-1-redis-主从模式是什么？和集群模式的区别是什么？"><a href="#1-1-redis-主从模式是什么？和集群模式的区别是什么？" class="headerlink" title="1.1. redis 主从模式是什么？和集群模式的区别是什么？"></a>1.1. redis 主从模式是什么？和集群模式的区别是什么？</h3>]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub 添加 sshkey</title>
    <url>/2022/10/03/util/github-tian-jia-sshkey/</url>
    <content><![CDATA[<h2 id="1-GitHub-添加-sshkey"><a href="#1-GitHub-添加-sshkey" class="headerlink" title="1. GitHub 添加 sshkey"></a>1. GitHub 添加 sshkey</h2><h3 id="1-1-生成密钥-邮箱填自己的GitHub注册邮箱"><a href="#1-1-生成密钥-邮箱填自己的GitHub注册邮箱" class="headerlink" title="1.1. 生成密钥 邮箱填自己的GitHub注册邮箱"></a>1.1. 生成密钥 邮箱填自己的GitHub注册邮箱</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;xxx@xxx.com&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-2-生成密钥-邮箱填自己的GitHub注册邮箱"><a href="#1-2-生成密钥-邮箱填自己的GitHub注册邮箱" class="headerlink" title="1.2. 生成密钥 邮箱填自己的GitHub注册邮箱"></a>1.2. 生成密钥 邮箱填自己的GitHub注册邮箱</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;xxx@xxx.com&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-3-将生成的密钥添加到GitHub-SSH-keys-里面"><a href="#1-3-将生成的密钥添加到GitHub-SSH-keys-里面" class="headerlink" title="1.3. 将生成的密钥添加到GitHub SSH keys 里面"></a>1.3. 将生成的密钥添加到GitHub SSH keys 里面</h3><p>点击头像 &#x3D;》 <code>Settings</code> &#x3D;》 <code>SSH and GPG keys</code> &#x3D;》 点击 <code>New SSH key</code> 按钮 添加即可</p>
<h3 id="1-4-测试是否添加成功"><a href="#1-4-测试是否添加成功" class="headerlink" title="1.4. 测试是否添加成功"></a>1.4. 测试是否添加成功</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com <span class="comment"># 回车 输入 yes即可 </span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 修改后 自动提交脚本</title>
    <url>/2022/10/03/util/zi-dong-ti-jiao-jiao-ben/</url>
    <content><![CDATA[<p>每次修改文章后都需要敲一串生成 和 提交github 的代码，研究了一下脚本，写了两种方式自动生成并且将原代码提交</p>
<h3 id="为什么要写两种方式呢-？"><a href="#为什么要写两种方式呢-？" class="headerlink" title="为什么要写两种方式呢 ？"></a>为什么要写两种方式呢 ？</h3><h4 id="因为-bash-和-powershell-不是一种语言，在powershell-里执行-sh-脚本也可以，他会自动调用-bash，但是不方便查看输出内容"><a href="#因为-bash-和-powershell-不是一种语言，在powershell-里执行-sh-脚本也可以，他会自动调用-bash，但是不方便查看输出内容" class="headerlink" title="因为 bash 和 powershell 不是一种语言，在powershell 里执行 sh 脚本也可以，他会自动调用 bash，但是不方便查看输出内容"></a>因为 bash 和 powershell 不是一种语言，在powershell 里执行 sh 脚本也可以，他会自动调用 bash，但是不方便查看输出内容</h4><p>脚本非常简单 一共就两步，一是hexo 生成并发布，二是推送源代码到github仓库</p>
<p>提交到github 仓库需要 commit 的 message，所以需要在执行脚本的时候可以输入</p>
<h3 id="bash-脚本"><a href="#bash-脚本" class="headerlink" title="bash 脚本"></a>bash 脚本</h3><h4 id="将代码复制保存在”-sh”-为后缀名的文件中，在-gitbash-中执行即可。比如-保存成-push-sh-，则-执行-“push-sh-提交信息”"><a href="#将代码复制保存在”-sh”-为后缀名的文件中，在-gitbash-中执行即可。比如-保存成-push-sh-，则-执行-“push-sh-提交信息”" class="headerlink" title="将代码复制保存在”.sh” 为后缀名的文件中，在 gitbash 中执行即可。比如 保存成 push.sh ，则 执行 “push.sh 提交信息”"></a>将代码复制保存在”.sh” 为后缀名的文件中，在 gitbash 中执行即可。比如 保存成 push.sh ，则 执行 “push.sh 提交信息”</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> [ ! -n <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;请输入提交信息&quot;</span></span><br><span class="line">  <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  msg=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$msg</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">echoMsg</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$1</span>:&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echoMsg <span class="string">&quot;cd D:\github\github-hexo&quot;</span></span><br><span class="line"><span class="built_in">cd</span> D:\github\github-hexo</span><br><span class="line"></span><br><span class="line">echoMsg <span class="string">&quot;hexo g&quot;</span></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">echoMsg <span class="string">&quot;hexo d&quot;</span></span><br><span class="line">hexo d</span><br><span class="line"></span><br><span class="line">echoMsg <span class="string">&quot;git pull&quot;</span></span><br><span class="line">git pull</span><br><span class="line">echoMsg <span class="string">&quot;git status&quot;</span></span><br><span class="line">git status</span><br><span class="line"> </span><br><span class="line">echoMsg <span class="string">&quot;git add .&quot;</span></span><br><span class="line">git add .</span><br><span class="line"> </span><br><span class="line">echoMsg <span class="string">&quot;git commit -m <span class="variable">$msg</span>&quot;</span></span><br><span class="line">git commit -m <span class="string">&quot;<span class="variable">$msg</span>&quot;</span></span><br><span class="line"> </span><br><span class="line">echoMsg <span class="string">&quot;git push &quot;</span></span><br><span class="line">git push </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="powershell-脚本"><a href="#powershell-脚本" class="headerlink" title="powershell 脚本"></a>powershell 脚本</h3><h4 id="将代码复制保存在”-ps1”-为后缀名的文件中，在-powershell下执行-即可。比如-保存成-push-ps1-，则-执行-“push-ps1-提交信息”"><a href="#将代码复制保存在”-ps1”-为后缀名的文件中，在-powershell下执行-即可。比如-保存成-push-ps1-，则-执行-“push-ps1-提交信息”" class="headerlink" title="将代码复制保存在”.ps1” 为后缀名的文件中，在 powershell下执行 即可。比如 保存成 push.ps1 ，则 执行 “push.ps1 提交信息”"></a>将代码复制保存在”.ps1” 为后缀名的文件中，在 powershell下执行 即可。比如 保存成 push.ps1 ，则 执行 “push.ps1 提交信息”</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此文件在 powershell下执行</span></span><br><span class="line"></span><br><span class="line">param(<span class="variable">$msg</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hexo g&quot;</span></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hexo d&quot;</span></span><br><span class="line">hexo d</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;git add .&quot;</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;git commit -m <span class="variable">$msg</span>&quot;</span></span><br><span class="line">git commit -m <span class="variable">$msg</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;git push &quot;</span></span><br><span class="line">git push</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>bash</tag>
        <tag>powershell</tag>
      </tags>
  </entry>
  <entry>
    <title>redis</title>
    <url>/2022/10/03/redis/redis/</url>
    <content><![CDATA[<p>redis 所有的key 原则上都要设置过期时间！！！</p>
<h2 id="1-常用数据类型"><a href="#1-常用数据类型" class="headerlink" title="1. 常用数据类型"></a>1. 常用数据类型</h2><h3 id="1-1-string-字符串"><a href="#1-1-string-字符串" class="headerlink" title="1.1. string 字符串"></a>1.1. string 字符串</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">set</span> user:001 <span class="string">&#x27;&#123;&quot;Id&quot;:&quot;214&quot;,&quot;Name&quot;:&quot;玫德丝度假系列青梨洗发水&quot;,&quot;Barcode&quot;:&quot;8714462081942&quot;,&quot;RecordCode&quot;:&quot;61F9J8714462081942&quot;&#125;&#x27;</span></span><br><span class="line"><span class="string">&quot;OK&quot;</span></span><br><span class="line">&gt; get user:001</span><br><span class="line"><span class="string">&quot;&#123;&quot;</span>Id<span class="string">&quot;:&quot;</span>214<span class="string">&quot;,&quot;</span>Name<span class="string">&quot;:&quot;</span>玫德丝度假系列青梨洗发水<span class="string">&quot;,&quot;</span>Barcode<span class="string">&quot;:&quot;</span>8714462081942<span class="string">&quot;,&quot;</span>RecordCode<span class="string">&quot;:&quot;</span>61F9J8714462081942<span class="string">&quot;&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-hash-哈希"><a href="#1-2-hash-哈希" class="headerlink" title="1.2. hash 哈希"></a>1.2. hash 哈希</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; hget </span><br><span class="line">&gt; hmget </span><br><span class="line">&gt; hset </span><br><span class="line">&gt; hmset </span><br></pre></td></tr></table></figure>

<h3 id="1-3-list-链表"><a href="#1-3-list-链表" class="headerlink" title="1.3. list 链表"></a>1.3. list 链表</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; lpush user zhangsan</span><br><span class="line">&gt; lpush user lisi</span><br><span class="line">&gt; lpush user wangwu</span><br><span class="line">&gt; rpop user </span><br><span class="line">&gt; lpop user </span><br><span class="line">&gt;lrange user 1 10</span><br></pre></td></tr></table></figure>

<h3 id="1-4-set-集合"><a href="#1-4-set-集合" class="headerlink" title="1.4. set 集合"></a>1.4. set 集合</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; sadd</span><br><span class="line">&gt; spop</span><br><span class="line">&gt; smembers</span><br></pre></td></tr></table></figure>
<h3 id="1-5-sort-set-有序集合"><a href="#1-5-sort-set-有序集合" class="headerlink" title="1.5. sort set 有序集合"></a>1.5. sort set 有序集合</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; zadd</span><br><span class="line">&gt; zrange</span><br></pre></td></tr></table></figure>




<p>更多用法: <a href="https://www.runoob.com/redis/redis-tutorial.html">菜鸟教程</a></p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>string</tag>
        <tag>get</tag>
        <tag>set</tag>
      </tags>
  </entry>
  <entry>
    <title>免费 图床</title>
    <url>/2022/10/03/util/tu-chuang/</url>
    <content><![CDATA[<p>免费 图床 <a href="https://www.imgurl.org/vip/manage">https://www.imgurl.org/vip/manage</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>postman、apipost 预览接口数据</title>
    <url>/2022/10/03/util/postman-apipost-yu-lan-jie-kou-shu-ju/</url>
    <content><![CDATA[<p>使用postman 挺长时间了 ， 最近才发现可以预览接口返回的json数据</p>
<p>ps：早知道这个功能能省事好多啊</p>
<p>在此记录一下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 此代码写在 tests 中，请求接口后返回数据点击 Visualize 按钮 即可预览</span><br><span class="line">// html 模板字符</span><br><span class="line">var template = `</span><br><span class="line"> </span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;<span class="built_in">tr</span>&gt;</span><br><span class="line">            &lt;th&gt;ID&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;用户名&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;创建时间&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line"> </span><br><span class="line">        &#123;&#123;<span class="comment">#each response&#125;&#125;</span></span><br><span class="line">            &lt;<span class="built_in">tr</span>&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;<span class="built_in">id</span>&#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;name&#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;create_time&#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &#123;&#123;/each&#125;&#125;</span><br><span class="line"> </span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">`;</span><br><span class="line"> </span><br><span class="line">// Set visualizer</span><br><span class="line">pm.visualizer.set(template, &#123;</span><br><span class="line">    // 解析返回的数据，并传给模板想要预览的数据 </span><br><span class="line">    response: pm.response.json().data.details</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title>mysql 优化</title>
    <url>/2022/10/03/mysql/mysql-you-hua/</url>
    <content><![CDATA[<p>mysql</p>
<h2 id="1-mysql-优化的不同维度："><a href="#1-mysql-优化的不同维度：" class="headerlink" title="1. mysql 优化的不同维度："></a>1. mysql 优化的不同维度：</h2><pre><code>sql语句优化
表优化（分表，加索引）
库优化（分库，主从分离，读写分离）
</code></pre>
<h2 id="2-防sql注入："><a href="#2-防sql注入：" class="headerlink" title="2. 防sql注入："></a>2. 防sql注入：</h2><pre><code>限制权限
过滤用户数据，参数化
不使用原生sql
</code></pre>
<h2 id="3-explain-执行计划"><a href="#3-explain-执行计划" class="headerlink" title="3. explain 执行计划"></a>3. explain 执行计划</h2><pre><code>从优到劣依次为：
null &gt; system&gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL 
</code></pre>
<h2 id="4-mysql-优化"><a href="#4-mysql-优化" class="headerlink" title="4. mysql 优化"></a>4. mysql 优化</h2><p>建立索引的原则是： 尽量选择区分度高的字段建立索引</p>
<p>比例越接近1，越适合建立索引，但是区分度高低，并不能作为绝对的标准，还要结合实际业务设置索引</p>
<p>区分度公式 ： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">count(distinct col_name)/count(*)</span><br></pre></td></tr></table></figure>

<h3 id="4-1-在-where-x2F-order-by-字段加索引，比如下面的sql，需要在-name-age-建立索引"><a href="#4-1-在-where-x2F-order-by-字段加索引，比如下面的sql，需要在-name-age-建立索引" class="headerlink" title="4.1. 在 where&#x2F;order by 字段加索引，比如下面的sql，需要在 name,age 建立索引"></a>4.1. 在 where&#x2F;order by 字段加索引，比如下面的sql，需要在 name,age 建立索引</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select name,age,phone from user <span class="built_in">where</span> name = <span class="string">&quot;张三&quot;</span> order by age desc </span><br></pre></td></tr></table></figure>

<h3 id="4-2-用户“性别”要不要建立索引-？"><a href="#4-2-用户“性别”要不要建立索引-？" class="headerlink" title="4.2. 用户“性别”要不要建立索引 ？"></a>4.2. 用户“性别”要不要建立索引 ？</h3><p>如果用户性别是平均分布，那么性别列建立索引效果不大<br>如果男女不平衡，经常需要查询少的那部分，则建立索引比较好</p>
<p>同理，比如数据是否已经处理，is_deal 字段，0 未处理，1 已处理成功，2 处理失败，处理成功的数据占据99.9%。<br>那么建立索引就比较好</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql优化</tag>
      </tags>
  </entry>
  <entry>
    <title>golang 实现简单文件上传</title>
    <url>/2022/10/03/golang/go-shi-xian-wen-jian-shang-chuan/</url>
    <content><![CDATA[<h2 id="golang-上传文件"><a href="#golang-上传文件" class="headerlink" title="golang 上传文件"></a>golang 上传文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;html/template&quot;</span></span><br><span class="line">	<span class="string">&quot;io&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func <span class="function"><span class="title">main</span></span>()  &#123;</span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/upload&quot;</span>, Upload)</span><br><span class="line">	<span class="keyword">if</span> err := http.ListenAndServe(<span class="string">&quot;127.0.0.1:9090&quot;</span>, nil); err != nil &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func Upload(w http.ResponseWriter, r *http.Request)  &#123;</span><br><span class="line">	//判断请求方式</span><br><span class="line">	<span class="keyword">if</span> r.Method == <span class="string">&quot;POST&quot;</span> &#123;</span><br><span class="line">		//设置内存大小</span><br><span class="line">		r.ParseMultipartForm(32 &lt;&lt; <span class="string">20)</span></span><br><span class="line"><span class="string">		//获取上传文件</span></span><br><span class="line"><span class="string">		file, handler, err := r.FormFile(&quot;uploadfile&quot;)</span></span><br><span class="line"><span class="string">		if err != nil &#123;</span></span><br><span class="line"><span class="string">			fmt.Println(err)</span></span><br><span class="line"><span class="string">			return</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">		defer file.Close()</span></span><br><span class="line"><span class="string">		fmt.Fprintf(w, &quot;%v&quot;, handler.Header)</span></span><br><span class="line"><span class="string">		//创建上传目录</span></span><br><span class="line"><span class="string">		os.Mkdir(&quot;./upload&quot;, os.ModePerm)</span></span><br><span class="line"><span class="string">		//创建上传文件</span></span><br><span class="line"><span class="string">		f, err := os.Create(&quot;./upload/&quot; + handler.Filename)</span></span><br><span class="line"><span class="string">		if err != nil &#123;</span></span><br><span class="line"><span class="string">			fmt.Println(err)</span></span><br><span class="line"><span class="string">			return</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">		defer f.Close()</span></span><br><span class="line"><span class="string">		io.Copy(f, file)</span></span><br><span class="line"><span class="string">		w.WriteHeader(http.StatusCreated)</span></span><br><span class="line"><span class="string">		io.WriteString(w, &quot;Uploaded successfully&quot;)</span></span><br><span class="line"><span class="string">	&#125; else &#123;</span></span><br><span class="line"><span class="string">		//渲染页面 解析模板文件</span></span><br><span class="line"><span class="string">		tpl, _ := template.ParseFiles(&quot;./upload.html&quot;)</span></span><br><span class="line"><span class="string">		tpl.Execute(w, nil)</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<p>参考文章: <a href="https://juejin.cn/post/7134935002432667679">稀土掘金</a></p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go 修改结构体切片的值</title>
    <url>/2022/10/03/golang/go-jie-gou-ti-qie-pian-de-zhi/</url>
    <content><![CDATA[<p>golang</p>
<h2 id="for-循环结构体切片的时候，直接使用-value-值去修改，是不会修改原数据的"><a href="#for-循环结构体切片的时候，直接使用-value-值去修改，是不会修改原数据的" class="headerlink" title="for 循环结构体切片的时候，直接使用 value 值去修改，是不会修改原数据的"></a>for 循环结构体切片的时候，直接使用 value 值去修改，是不会修改原数据的</h2><h3 id="for-循环里的-v-属于临时变量"><a href="#for-循环里的-v-属于临时变量" class="headerlink" title="for 循环里的 v 属于临时变量"></a>for 循环里的 v 属于临时变量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span> User struct &#123;</span><br><span class="line">	Name    string</span><br><span class="line">	Address string</span><br><span class="line">	Age     int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">	<span class="built_in">users</span> := []User&#123;</span><br><span class="line">		&#123;<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;北京&quot;</span>, 18&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;李四&quot;</span>, <span class="string">&quot;上海&quot;</span>, 19&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;王五&quot;</span>, <span class="string">&quot;广州&quot;</span>, 20&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	users02 := <span class="built_in">users</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;原数据:\n %+v \n&quot;</span>, <span class="built_in">users</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> _, v := range <span class="built_in">users</span> &#123;</span><br><span class="line">		v.Name = <span class="string">&quot;大傻瓜：&quot;</span> + v.Name</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;第一种方式修改后:\n %+v \n&quot;</span>, <span class="built_in">users</span>)</span><br><span class="line">	<span class="keyword">for</span> k, v := range users02 &#123;</span><br><span class="line">		<span class="built_in">users</span>[k].Name = <span class="string">&quot;小傻瓜：&quot;</span> + v.Name</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;第二种方式修改后:\n %+v \n&quot;</span>, <span class="built_in">users</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="打印内容，可以看到大傻瓜没加上，小傻瓜加上了"><a href="#打印内容，可以看到大傻瓜没加上，小傻瓜加上了" class="headerlink" title="打印内容，可以看到大傻瓜没加上，小傻瓜加上了"></a>打印内容，可以看到大傻瓜没加上，小傻瓜加上了</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">原数据:</span><br><span class="line">[&#123;Name:张三 Address:北京 Age:18&#125; &#123;Name:李四 Address:上海 Age:19&#125; &#123;Name:王五 Address:广州 Age:20&#125;]</span><br><span class="line">第一种方式修改后:</span><br><span class="line">[&#123;Name:张三 Address:北京 Age:18&#125; &#123;Name:李四 Address:上海 Age:19&#125; &#123;Name:王五 Address:广州 Age:20&#125;]</span><br><span class="line">第二种方式修改后:</span><br><span class="line">[&#123;Name:小傻瓜：张三 Address:北京 Age:18&#125; &#123;Name:小傻瓜：李四 Address:上海 Age:19 &#125; &#123;Name:小傻瓜：王五 Address:广州 Age:20&#125;]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>结构体</tag>
        <tag>切片</tag>
      </tags>
  </entry>
  <entry>
    <title>go int64 精度丢失</title>
    <url>/2022/10/03/golang/go-int64-jing-du-diu-shi/</url>
    <content><![CDATA[<p>golang</p>
<h2 id="math-包可查看各种类型的最大值，最小数"><a href="#math-包可查看各种类型的最大值，最小数" class="headerlink" title="math 包可查看各种类型的最大值，最小数"></a>math 包可查看各种类型的最大值，最小数</h2><h3 id="int64-接收超过最大值的数字将会丢失数据"><a href="#int64-接收超过最大值的数字将会丢失数据" class="headerlink" title="int64 接收超过最大值的数字将会丢失数据"></a>int64 接收超过最大值的数字将会丢失数据</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Int64 最大值&quot;</span>, math.MaxInt64)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Int64 最小值&quot;</span>, math.MinInt64)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#Int64 最大值 9223372036854775807</span></span><br><span class="line"><span class="comment">#Int64 最小值 -9223372036854775808</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>数据类型</tag>
        <tag>int64</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下 docker Vmmem 占用内存过多</title>
    <url>/2022/10/03/docker/docker-vmmem-zhan-yong-nei-cun-guo-duo/</url>
    <content><![CDATA[<h2 id="1-Windows下-docker-启动后，Vmmem-占用内存过多"><a href="#1-Windows下-docker-启动后，Vmmem-占用内存过多" class="headerlink" title="1. Windows下 docker 启动后，Vmmem 占用内存过多"></a>1. Windows下 docker 启动后，Vmmem 占用内存过多</h2><h3 id="1-1-如果是用的wsl模式的话，就可以关闭-hyper-v"><a href="#1-1-如果是用的wsl模式的话，就可以关闭-hyper-v" class="headerlink" title="1.1. 如果是用的wsl模式的话，就可以关闭 hyper-v"></a>1.1. 如果是用的wsl模式的话，就可以关闭 hyper-v</h3><h4 id="1-1-1-关闭方式-learn-microsoft-com"><a href="#1-1-1-关闭方式-learn-microsoft-com" class="headerlink" title="1.1.1. 关闭方式 learn.microsoft.com"></a>1.1.1. 关闭方式 <a href="https://learn.microsoft.com/zh-cn/troubleshoot/windows-client/application-management/virtualization-apps-not-work-with-hyper-v">learn.microsoft.com</a></h4><h3 id="1-2-然后设置-docker-的最大使用内存"><a href="#1-2-然后设置-docker-的最大使用内存" class="headerlink" title="1.2. 然后设置 docker 的最大使用内存"></a>1.2. 然后设置 docker 的最大使用内存</h3><h4 id="1-2-1-按下-Windows-R-键，输入-UserProfile-并运行进入用户文件夹"><a href="#1-2-1-按下-Windows-R-键，输入-UserProfile-并运行进入用户文件夹" class="headerlink" title="1.2.1. 按下 Windows+R 键，输入 %UserProfile% 并运行进入用户文件夹"></a>1.2.1. 按下 <code>Windows+R</code> 键，输入 <code>%UserProfile%</code> 并运行进入用户文件夹</h4><h4 id="1-2-2-新建文件-wslconfig-，然后记事本编辑"><a href="#1-2-2-新建文件-wslconfig-，然后记事本编辑" class="headerlink" title="1.2.2. 新建文件 .wslconfig ，然后记事本编辑"></a>1.2.2. 新建文件 <code>.wslconfig</code> ，然后记事本编辑</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[wsl2]</span><br><span class="line">memory=2GB</span><br><span class="line">swap=0</span><br><span class="line">localhostForwarding=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="1-3-重启电脑和docker"><a href="#1-3-重启电脑和docker" class="headerlink" title="1.3. 重启电脑和docker"></a>1.3. 重启电脑和docker</h3>]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>Vmmem</tag>
      </tags>
  </entry>
  <entry>
    <title>windows 环境下 使用 docker 安装 mysql,并且挂载外部配置和数据</title>
    <url>/2022/10/03/docker/windows-xia-shi-yong-docker-an-zhuang-mysql/</url>
    <content><![CDATA[<h2 id="1-Docker-安装-MySQL"><a href="#1-Docker-安装-MySQL" class="headerlink" title="1. Docker 安装 MySQL"></a>1. Docker 安装 MySQL</h2><h3 id="1-1-查看可用的-MySQL-版本"><a href="#1-1-查看可用的-MySQL-版本" class="headerlink" title="1.1. 查看可用的 MySQL 版本"></a>1.1. 查看可用的 MySQL 版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure>
<h3 id="1-2-拉取-MySQL-镜像"><a href="#1-2-拉取-MySQL-镜像" class="headerlink" title="1.2. 拉取 MySQL 镜像"></a>1.2. 拉取 MySQL 镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull mysql:latest</span><br></pre></td></tr></table></figure>

<h3 id="1-3-查看本地镜像"><a href="#1-3-查看本地镜像" class="headerlink" title="1.3. 查看本地镜像"></a>1.3. 查看本地镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<h3 id="1-4-运行容器"><a href="#1-4-运行容器" class="headerlink" title="1.4. 运行容器"></a>1.4. 运行容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -itd --name mysql-test06 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</span><br><span class="line">docker run -itd --name mysql-test07 -p 3307:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</span><br><span class="line">docker run -itd --name mysql-test08 -p 3308:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</span><br><span class="line">docker run -itd --name mysql-test09 -p 3309:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</span><br></pre></td></tr></table></figure>

<h3 id="1-5-参数说明："><a href="#1-5-参数说明：" class="headerlink" title="1.5. 参数说明："></a>1.5. 参数说明：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--name 设置容器名</span><br><span class="line">-p ，设置端口映射，</span><br><span class="line">    3306:3306 ：主机 windows 3306 端口:容器内mysql 的 3306 端口，</span><br><span class="line">    外部主机可以直接通过 宿主机ip:3306 访问到 MySQL 的服务。</span><br><span class="line">    也可以改为 3307/3308/3309 等其他可用端口值</span><br><span class="line"></span><br><span class="line">-e 设置环境变量</span><br><span class="line">    MYSQL_ROOT_PASSWORD=123456：设置 MySQL 服务 root 用户的密码。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-6-挂载外部配置和数据"><a href="#1-6-挂载外部配置和数据" class="headerlink" title="1.6. 挂载外部配置和数据"></a>1.6. 挂载外部配置和数据</h3><ul>
<li>data: mysql的数据目录，包括数据库，表</li>
<li>conf.d :存储自定义配置文件</li>
<li>my.cnf :是默认配置文件</li>
</ul>
<h3 id="1-7-创建对应的文件夹和文件"><a href="#1-7-创建对应的文件夹和文件" class="headerlink" title="1.7. 创建对应的文件夹和文件"></a>1.7. 创建对应的文件夹和文件</h3><p>如下：<br><img src="https://s3.bmp.ovh/imgs/2022/09/28/9106e755438c0a34.png"></p>
<h4 id="1-7-1-创建对应的文件夹"><a href="#1-7-1-创建对应的文件夹" class="headerlink" title="1.7.1. 创建对应的文件夹"></a>1.7.1. 创建对应的文件夹</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">d:/docker/mysql/data  </span><br><span class="line">d:/docker/mysql/conf.d</span><br></pre></td></tr></table></figure>
<h4 id="1-7-2-创建对应的配置文件-my-cnf"><a href="#1-7-2-创建对应的配置文件-my-cnf" class="headerlink" title="1.7.2. 创建对应的配置文件 my.cnf"></a>1.7.2. 创建对应的配置文件 my.cnf</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">d:/docker/mysql/my.cnf</span><br></pre></td></tr></table></figure>

<h4 id="1-7-3-my-cnf添加如下内容"><a href="#1-7-3-my-cnf添加如下内容" class="headerlink" title="1.7.3. my.cnf添加如下内容"></a>1.7.3. my.cnf添加如下内容</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">user=mysql</span><br><span class="line">character-set-server=utf8</span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line">secure_file_priv=/var/lib/mysql</span><br><span class="line">expire_logs_days=7</span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</span><br><span class="line">max_connections=1000</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure>

<h3 id="1-8-创建容器，并后台启动"><a href="#1-8-创建容器，并后台启动" class="headerlink" title="1.8. 创建容器，并后台启动"></a>1.8. 创建容器，并后台启动</h3><p><strong>注意，这里如果在 windows 系统下 需要加上盘符，即绝对路径</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">示例一：</span><br><span class="line">docker run -v d:/docker/mysql/data/:/var/lib/mysql -v d:/docker/mysql/conf.d:/etc/mysql/conf.d -v d:/docker/mysql/my.cnf:/etc/mysql/my.cnf -p 3309:3306 --name mysql-test09 -e MYSQL_ROOT_PASSWORD=123456 -d 43fcfca0776d</span><br><span class="line">示例二：</span><br><span class="line">docker run -v d:/docker/mysql3306/data/:/var/lib/mysql -v d:/docker/mysql3306/conf.d:/etc/mysql/conf.d -v d:/docker/mysql3306/my.cnf:/etc/mysql/my.cnf -p 3306:3306 --name mysql-test06 -e MYSQL_ROOT_PASSWORD=123456 -d 43fcfca0776d</span><br></pre></td></tr></table></figure>


<h3 id="1-5-参数说明：-1"><a href="#1-5-参数说明：-1" class="headerlink" title="1.5. 参数说明："></a>1.5. 参数说明：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-v : --volume 绑定一个卷</span><br><span class="line">-d :后台运行容器，并返回容器ID</span><br></pre></td></tr></table></figure>

<p>参考文章:<br>    <a href="https://www.runoob.com/docker/docker-install-mysql.html">菜鸟教程</a><br>    <a href="https://www.cnblogs.com/linjiqin/p/11465804.html">博客园</a></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>PowerShell一次执行多条命令</title>
    <url>/2022/10/03/util/powershell-yi-ci-zhi-xing-duo-tiao-ming-ling/</url>
    <content><![CDATA[<p>参考文章 <a href="https://blog.csdn.net/u011215669/article/details/81086097">csdn</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add . | git commit -m <span class="string">&quot;edit&quot;</span> | git push</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
</search>
